{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Travelify - Conversational AI Travel Planning Platform\n\n## Project Overview\nA conversational AI travel planning platform that creates personalized travel packages through guided dialogue and real-time POI integration. Users interact with an AI through chat to clarify their travel preferences, then receive 3 customized travel package options with interactive day-by-day itineraries.\n\n## Key Features\n- Chat-based conversational interface (2-3 guided questions)\n- Real-time travel package generation (A/B/C options)\n- Google Places API integration for authentic POI data\n- Interactive dashboard with package comparison\n- Day-by-day itinerary with minimal editing capabilities\n- JSON export for travel agency handoff\n- Package refinement through conversation continuation\n\n## User Preferences\n- Focus on authentic data over mock/placeholder content\n- Emphasize conversational flow over form-based input\n- Prioritize user experience with interactive dashboard\n- Keep conversation guided but natural\n\n## Project Architecture\n- Frontend: React with Wouter routing, TanStack Query for data management\n- Backend: Express.js with in-memory storage\n- Styling: Tailwind CSS with purple/gold color scheme (#2D1B69, #FFD700)\n- External APIs: Google Places API for POI data\n- Data Flow: Chat → Clarification → Package Generation → Dashboard → Export\n- Data Integrity: Session-scoped tag processing, quarantined candidate logging, safety filters\n- Security: Input validation, content filtering, rate limiting, no auto-persistence of user text\n\n## Recent Changes\n- 2025-01-27: **Intelligent Itinerary Generation with Realistic Duration Estimates:**\n  - Implemented AI-powered itinerary builder that considers actual visit durations\n  - Added duration estimation based on POI types (theme parks: 8hrs, museums: 2-3hrs, etc.)\n  - Integrated OpenAI GPT-4 to reason about feasible daily combinations\n  - Prevents unrealistic groupings (e.g., Disneyland + Tokyo Tower on same day)\n  - Distributes attractions intelligently across all days based on duration and travel time\n  - Maximum 8 hours of activities per day with proper time slot allocation\n  - Considers travel time between locations (30 min average)\n  - Groups nearby attractions to minimize transit\n  - Balances each day with varied activity types (culture, food, shopping)\n  - Fallback algorithm ensures itinerary generation even if AI service fails\n- 2025-01-26: **Auto-Navigation and Improved User Flow:**\n  - Implemented automatic navigation from Chat to Package Selection after AI generates 3 packages\n  - Created proper routing structure: `/chat`, `/packages`, `/itinerary/:id`\n  - Added Zustand store for package state management across pages\n  - Implemented breadcrumb navigation for easy navigation between pages\n  - Added smooth page transitions with fade/slide animations (200-300ms)\n  - Mobile-optimized with toast notifications when packages are ready\n  - Deep link support - users can directly access `/packages` and `/itinerary/:id`\n  - Session-based package persistence - packages remain until new session starts\n  - Made package cards fully clickable for direct navigation to itinerary detail\n  - Auto-scroll to top on page transitions for better mobile UX\n- 2025-01-26: **Session-Scoped Personalization System:**\n  - Implemented SessionManager service with 4-hour TTL for temporary preference storage\n  - Created session middleware for Express with cookie/header-based session tracking\n  - Built SessionEnhancedPackageGenerator that applies personalization weights (≤30% boost)\n  - Added session ID tracking to API client via X-Session-Id headers\n  - Formula: Output = Global baseline × Session-specific weights (0.7 to 1.3 range)\n  - Session preferences never persist to global database, only verified Google Places POIs\n  - Free-text inputs (e.g., \"play water\", \"burgers\") only affect ranking within session\n  - Automatic session cleanup every 15 minutes for expired sessions\n  - Frontend localStorage tracking with automatic session renewal\n- 2025-01-26: **Enhanced POI Search with LLM Ranking:**\n  - Implemented Google Places search with city/context scoping\n  - Added LLM ranking to filter and show top 5 best results\n  - 500ms debounced auto-search as you type\n  - Enhanced UI with star ratings, review counts (13.7k format), and price levels ($$$)\n  - Category badges with color coding (red for food, blue for attractions, etc.)\n  - \"Search wider radius\" fallback for no results\n- 2025-01-26: **Enhanced Itinerary Card UI:**\n  - Replaced text-based ratings with visual star component (with half-star support)\n  - Added formatted review counts with lighter gray color (#CCCCCC) and K formatting (e.g., 1.5k)\n  - Implemented colored pill-shaped category tags (red for food, blue for attractions, green for nature, etc.)\n  - Improved information hierarchy with bold titles, secondary ratings, and smaller description text\n  - Added StarRating component for reusable visual rating display\n  - Enhanced activity type detection with expanded categories (food, culture, nature, shopping, nightlife)\n  - Icons now have category-specific colors (red for food, purple for accommodation, blue for attractions)\n- 2025-01-26: **Fixed Free-Text Preference Handling:**\n  - Free-text preferences from chat (e.g., \"play water\") now properly influence itinerary generation\n  - Added extraction of preferences from conversation messages (water, food, culture, nature, etc.)\n  - Merged free-text with selected tags for equal weight in POI scoring\n  - Added search query mappings for free-text terms (water activities → water parks, onsen, beaches)\n  - Cities without curated tags (like Sapporo) now respect user intent from chat\n  - System processes both `selectedTags` and `freeTextPreferences` arrays\n  - Fixed itinerary generation to maintain 4-5 activities consistently across all days\n- 2025-01-26: **Implemented Data Integrity Policy:**\n  - Session-scoped tag processing (never persisted to canonical DB)\n  - Created `userTagCandidates` quarantined table with 30-day TTL for review\n  - Added safety filters to block inappropriate/suspicious content\n  - Free-text only biases POI selection, never creates permanent tags\n  - Human review required before promoting candidates to official tags\n  - Comprehensive input validation and sanitization\n  - Rate limiting and content filtering for POIs\n- 2025-08-19: Initial project setup with conversational travel planning concept\n- Removed budget breakdown and accommodation suggestions from scope\n- Focused on core conversational experience and POI integration\n- 2025-08-20: Enhanced chat experience with major improvements:\n  - Added city-level destination support (recognizes both countries and cities)\n  - Implemented fuzzy matching for typos (e.g., \"lodon\" → London, \"kioto\" → Kyoto)\n  - Natural number parsing (accepts \"five days\" and \"5 days\")\n  - Auto-focus on chat input after messages\n  - Country → City flow (suggests 4-5 popular cities when country selected)\n  - More conversational, less form-like dialogue\n  - Graceful error recovery without freezing\n  - Fixed redundant people count confirmation - typing \"3\" immediately proceeds\n  - Expanded city database to 30+ countries with 5-10 major cities each\n  - Cities not in curated list (like Okinawa) are now accepted without resetting\n  - Context-aware number interpretation based on conversation step\n  - Fixed critical city matching bug - \"Dallas\" no longer incorrectly matches to \"Los Angeles\"\n  - Removed problematic partial string matching that caused false positives\n  - Cities are now accepted exactly as typed when not in curated list\n- 2025-08-21: Implemented comprehensive city database with Google Places integration:\n  - Created PostgreSQL database structure with cities, conversations, packages, and POIs tables\n  - Seeded 138 curated cities across 26 countries with Google Place IDs\n  - Japan includes all requested cities: Tokyo, Osaka, Kyoto, Okinawa, Sapporo, Fukuoka, Nagoya, Yokohama\n  - Built CityService with database operations and Google Places validation capability\n  - Implemented city API routes for search and popular cities retrieval\n  - Database stores canonical Google Place IDs for each city for future enrichment\n  - Cities marked as \"curated\" with popularity scores for better recommendations\n  - Added Google Maps deep links to all POIs using Place IDs\n  - Implemented actionable navigation buttons with format: https://www.google.com/maps/place/?q=place_id:<PLACE_ID>\n  - Added Maps links in both itinerary view and POI search modal for preview\n  - Fallback to search query links for POIs without Place IDs\n  - **Replaced generic theme question with localized city-specific tags:**\n    - Dynamic multi-select tag interface based on selected city\n    - 40+ major cities with curated popular attractions (Tokyo → Disneyland, Tokyo Tower, etc.)\n    - Support for custom user preferences alongside predefined tags\n    - Tags appear naturally in conversation as if typed by user\n    - Fallback to generic interests for non-curated cities\n- 2025-01-25: **Enhanced Tag System with Advanced Normalization:**\n  - **Database Schema**: Added cityTags, tagAliases, tagEmbeddings, userTagSelections tables\n  - **Multi-lingual Support**: Japanese/English aliases (e.g., \"築地\" → Tsukiji Market, \"TDL\" → Tokyo Disneyland)\n  - **Fuzzy Matching**: Handles typos with Levenshtein distance (≥75% similarity threshold)\n  - **Tag Normalization Service**: Maps free-text inputs to existing tags or creates validated candidates\n  - **Enhanced Storage**: 10+ tags for Tokyo, 5+ for Kyoto/Osaka with aliases\n  - **Smart Categorization**: Tags grouped by category (attraction, district, experience, food)\n  - **Usage Tracking**: Increments scores based on user selections for better recommendations\n  - **Real-time Search**: As-you-type tag suggestions with confidence scores\n  - **Google Places Validation**: Future-ready for validating unknown tags via Places API\n  - **EnhancedTagSelector Component**: Visual categories, multi-select, custom input support\n  - **Country Alias Normalization**: \"America\", \"United States\", \"U.S.\" all map to \"USA\" correctly\n  - **Expanded City Coverage**: Added comprehensive tags for 8 major US cities (New York, Los Angeles, Las Vegas, San Francisco, Miami)\n  - **Universal Tag Support**: All supported destinations now show relevant tags (no longer limited to Japan)\n  - **Fallback Mechanism**: Cities without specific tags show generic interests (Must-see Highlights, Local Food & Culture, etc.)\n- 2025-01-26: **Enhanced Itinerary Generation with Tag Support:**\n  - **Comprehensive City Database**: Seeded 39 major cities across 17 countries with curated tags\n  - **Tag-Driven POI Selection**: Created enhancedPackageGenerator service that respects user-selected tags\n  - **Real Google Places Integration**: All POIs have valid Place IDs and ratings from Google Places API\n  - **Balanced Itinerary Generation**: Each day includes 1-2 tag-related POIs plus must-see attractions\n  - **Multi-lingual Tag Support**: Tags include native language aliases (Japanese, Korean, Thai, Chinese, Arabic, Greek)\n  - **Quality Filters**: POIs filtered by minimum rating (4.0+) and review count (100+)\n  - **Tag Coverage Validation**: System ensures each selected tag appears at least once in itinerary\n  - **Smart POI Categorization**: Automatic categorization of venues (food, culture, shopping, nightlife, nature)\n  - **Explanations for POI Selection**: Each POI includes reason tied to tag or popularity\n  - **Three Package Types**: Classic (tag-focused), Foodie (culinary), and Budget options\n\n## Technical Stack\n- Full-stack JavaScript with TypeScript\n- Drizzle ORM with in-memory storage\n- shadcn/ui components\n- Google Places API integration\n- Export functionality for JSON handoff\n\n## Development Status\n- Setting up: Data models, conversational interface, Google Places integration\n- Next: Package generation, dashboard, and editing features","size_bytes":11969},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        brand: {\n          bg: \"var(--brand-bg)\",\n          card: \"var(--brand-card)\",\n          border: \"var(--brand-border)\",\n          text: \"var(--brand-text)\",\n          mute: \"var(--brand-mute)\",\n          accent: \"var(--brand-accent)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3060},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/google_places_integration_and_ui_1755623099188.md":{"content":"\n# Google Places API 接入指南 + UI 配色規範（V0 Demo）\n*最後更新：2025-08-19 17:01 UTC*\n\n本文件說明如何在 **Travelify（對話式旅遊包）** 的 V0 Demo 中接入 **Google Places API** 以取得景點/餐廳資料，並提供一份 **純色系 UI 配色** 方案（去除漸層）。\n\n---\n\n## 一、目標與範圍\n- 以使用者「對話澄清」後的條件（城市、主題偏好、預算）呼叫 Google Places，取得 **候選 POI（景點/餐廳）** 清單。\n- 在 **方案生成（A/B/C）** 階段，將 POI 套入行程格局（早/午/晚），並呈現 **預算分布 + 航班/飯店示例卡**。\n- 僅用於 **V0 Demo**，以 **Text Search / Nearby Search / Details / Photo** 做最小可用整合。\n\n---\n\n## 二、環境變數\n```\nGOOGLE_MAPS_API_KEY=你的API_KEY\n```\n\n> 建議：在 Google Cloud Console 啟用 **Places API / Maps JavaScript API（如需）**，並針對 **HTTP referrer** 或 **IP** 做金鑰限制。\n\n---\n\n## 三、服務端 API 設計（Next.js App Router, 伺服器端 fetch）\n\n### 1) `/api/places/search`\n- **用途**：以 `query` 或 `location+radius` 取得候選 POI（景點/餐廳）。\n- **Query 參數**：\n  - `query`（如：`Tokyo sushi`、`best ramen in shinjuku`）\n  - 或 `location`（`lat,lng`）+ `radius`（公尺，<=50000）+ `type`（如 `restaurant`/`tourist_attraction`）\n- **Google 端點（二選一）**：\n  - Text Search：`https://maps.googleapis.com/maps/api/place/textsearch/json?query={q}&key={API_KEY}`\n  - Nearby Search：`https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={lat},{lng}&radius={r}&type={type}&key={API_KEY}`\n\n**範例（Next.js Route）**\n```ts\n// app/api/places/search/route.ts\nimport { NextRequest } from \"next/server\";\n\nconst GOOGLE = \"https://maps.googleapis.com/maps/api/place\";\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const query = searchParams.get(\"query\");\n  const location = searchParams.get(\"location\"); // \"35.6804,139.7690\"\n  const radius = searchParams.get(\"radius\") ?? \"5000\";\n  const type = searchParams.get(\"type\") ?? \"tourist_attraction\";\n  const key = process.env.GOOGLE_MAPS_API_KEY!;\n\n  let url = \"\";\n  if (query) {\n    url = `${GOOGLE}/textsearch/json?query=${encodeURIComponent(query)}&key=${key}`;\n  } else if (location) {\n    url = `${GOOGLE}/nearbysearch/json?location=${location}&radius=${radius}&type=${type}&key=${key}`;\n  } else {\n    return new Response(JSON.stringify({ error: \"query or location required\" }), { status: 400 });\n  }\n\n  const res = await fetch(url, { cache: \"no-store\" });\n  const data = await res.json();\n\n  // 正規化（僅保留前 10 筆）\n  const results = (data.results ?? []).slice(0, 10).map((p: any) => ({\n    place_id: p.place_id,\n    name: p.name,\n    rating: p.rating,\n    user_ratings_total: p.user_ratings_total,\n    price_level: p.price_level,\n    types: p.types,\n    address: p.formatted_address ?? p.vicinity,\n    location: p.geometry?.location,\n    open_now: p.opening_hours?.open_now ?? null,\n    photo_ref: p.photos?.[0]?.photo_reference ?? null\n  }));\n\n  return Response.json({ results });\n}\n```\n\n**測試 cURL**\n```bash\ncurl \"http://localhost:3000/api/places/search?query=Tokyo%20ramen\"\n```\n\n---\n\n### 2) `/api/places/details`\n- **用途**：取得單一 POI 的細節（網址、電話、營業時間、照片等）。\n- **Google 端點**：\n  - Details：`https://maps.googleapis.com/maps/api/place/details/json?place_id={id}&fields=name,formatted_address,international_phone_number,website,url,opening_hours,geometry,rating,user_ratings_total,price_level,types,photos&key={API_KEY}`\n\n**範例（Next.js Route）**\n```ts\n// app/api/places/details/route.ts\nimport { NextRequest } from \"next/server\";\nconst GOOGLE = \"https://maps.googleapis.com/maps/api/place\";\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const id = searchParams.get(\"place_id\");\n  const key = process.env.GOOGLE_MAPS_API_KEY!;\n  if (!id) return new Response(JSON.stringify({ error: \"place_id required\" }), { status: 400 });\n\n  const fields = [\n    \"name\",\"formatted_address\",\"international_phone_number\",\"website\",\"url\",\n    \"opening_hours\",\"geometry\",\"rating\",\"user_ratings_total\",\"price_level\",\"types\",\"photos\"\n  ].join(\",\");\n\n  const url = `${GOOGLE}/details/json?place_id=${id}&fields=${fields}&key=${key}`;\n  const res = await fetch(url, { cache: \"no-store\" });\n  const data = await res.json();\n  const r = data.result ?? {};\n\n  const norm = {\n    place_id: id,\n    name: r.name,\n    address: r.formatted_address,\n    phone: r.international_phone_number,\n    website: r.website,\n    maps_url: r.url,\n    location: r.geometry?.location,\n    opening_hours: r.opening_hours,\n    rating: r.rating,\n    user_ratings_total: r.user_ratings_total,\n    price_level: r.price_level,\n    types: r.types,\n    photos: (r.photos ?? []).slice(0, 5).map((p: any) => ({\n      photo_reference: p.photo_reference,\n      width: p.width,\n      height: p.height\n    }))\n  };\n\n  return Response.json({ result: norm });\n}\n```\n\n**測試 cURL**\n```bash\ncurl \"http://localhost:3000/api/places/details?place_id=YOUR_PLACE_ID\"\n```\n\n---\n\n### 3) `/api/places/photo`\n- **用途**：透過 `photo_reference` 取回圖片（Google 以 302 轉址）。\n- **Google 端點**：\n  - Photo：`https://maps.googleapis.com/maps/api/place/photo?maxwidth={w}&photo_reference={ref}&key={API_KEY}`\n\n**範例（Next.js Route）**\n```ts\n// app/api/places/photo/route.ts\nimport { NextRequest } from \"next/server\";\nconst GOOGLE = \"https://maps.googleapis.com/maps/api/place\";\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const ref = searchParams.get(\"ref\");\n  const maxwidth = searchParams.get(\"maxwidth\") ?? \"800\";\n  const key = process.env.GOOGLE_MAPS_API_KEY!;\n  if (!ref) return new Response(\"ref required\", { status: 400 });\n  const url = `${GOOGLE}/photo?maxwidth=${maxwidth}&photo_reference=${ref}&key=${key}`;\n  // 直接 302 轉址\n  return Response.redirect(url);\n}\n```\n\n---\n\n## 四、正規化資料結構（前端/後端共用）\n> 以「最小可用」欄位來餵行程排程器與卡片展示。\n\n```ts\ntype NormalizedPOI = {\n  place_id: string;\n  name: string;\n  rating?: number;\n  user_ratings_total?: number;\n  price_level?: number;\n  types?: string[];\n  address?: string;\n  location?: { lat: number; lng: number };\n  open_now?: boolean | null;\n  photo_ref?: string | null;\n}\n\ntype PlaceDetails = NormalizedPOI & {\n  phone?: string;\n  website?: string;\n  maps_url?: string;\n  opening_hours?: any;\n  photos?: { photo_reference: string; width: number; height: number }[];\n}\n```\n\n---\n\n## 五、快取與額度建議\n- **快取層**：\n  - `search` 結果：以 `query` 或 `location+type+radius` 為 key，**1 小時**快取。\n  - `details` 結果：以 `place_id` 為 key，**24 小時**快取。\n- **避免重複**：對同一 `place_id` 僅在缺欄位時再補打 `details`。\n- **錯誤處理**：尊重 `status`（如 `OVER_QUERY_LIMIT`）；顯示替代文案。\n- **合規**：遵守 Google Places 服務條款與標示（顯示 “Powered by Google”／來源 icon）。\n\n---\n\n## 六、UI 配色與元件規範（純色、無漸層）\n- **主色（背景）**：深紫色 `#2D1B69`\n- **輔色（強調/按鈕/高亮）**：金黃色 `#FFD700`\n- **中性色（文字/邊框）**：\n  - 主要文字 `#F5F5F7`（在深紫背景上有足夠對比）\n  - 次要文字 `#C9C9D1`\n  - 邊框/分隔 `#3A2A7A`\n  - 卡片底 `#241557`\n\n**Tailwind 設定（片段）**\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        brand: {\n          bg: \"#2D1B69\",\n          card: \"#241557\",\n          border: \"#3A2A7A\",\n          text: \"#F5F5F7\",\n          mute: \"#C9C9D1\",\n          accent: \"#FFD700\"\n        }\n      }\n    }\n  }\n}\n```\n\n**基本元件風格**\n```css\n:root {\n  --bg: #2D1B69;\n  --card: #241557;\n  --border: #3A2A7A;\n  --text: #F5F5F7;\n  --mute: #C9C9D1;\n  --accent: #FFD700;\n}\n\nbody { background: var(--bg); color: var(--text); }\n\n.button-primary {\n  background: var(--accent);\n  color: #2D1B69;\n  border-radius: 10px;\n  padding: 10px 14px;\n  font-weight: 700;\n}\n\n.card {\n  background: var(--card);\n  border: 1px solid var(--border);\n  border-radius: 12px;\n  padding: 14px;\n}\n\n.badge {\n  background: rgba(255, 215, 0, 0.12);\n  color: var(--accent);\n  border: 1px solid rgba(255, 215, 0, 0.35);\n  border-radius: 999px;\n  padding: 2px 8px;\n  font-size: 12px;\n}\n```\n\n**可視化建議**\n- 列表用 **卡片** 呈現 POI（名稱、評分、類型、開放狀態），**右上角**放加號加入行程。\n- 詳情彈窗顯示 **地址/開放時間/快速導覽按鈕（導航、網站、電話）**。\n- 所有重點按鈕（如「加入 Day2 下午」）使用 **金黃色 #FFD700**；其餘次要操作使用描邊卡片樣式（透明底＋金色描邊）。\n\n---\n\n## 七、與對話流程的整合點\n- 當使用者回覆「主題偏好/區域」，觸發 `/api/places/search` → 取回候選 POI → 以 **3~6 個**卡片建議顯示。\n- 使用者點擊「加入行程」後，將 POI 寫入目前方案的 `itinerary[day].segments` 中；若超出時間區塊，提示替換或移動。\n- 在 **方案重生** 時，保留使用者已鎖定的 POI（鎖定標記）。\n\n---\n\n## 八、法規/授權提醒\n- 必須遵守 Google Places API 的 **顯示與歸屬規範**。\n- 不要在未授權情況下 **儲存或再分發照片像素**；可快取 `photo_reference`，按需動態請求。\n\n---\n\n## 九、下一步（建議）\n- 加入 **城市預設範本（City Pack）**，優先用內建 POI，Places 補位。\n- 加入 **候選 POI 的「主題標籤」與「行走時間估算」**，讓排程更智能。\n\n——\n","size_bytes":9779},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { continueConversation, generateTravelPackages, refineItinerary } from \"./services/openai\";\nimport { searchPlaces, getPlaceDetails, getPhotoUrl } from \"./services/googlePlaces\";\nimport { insertConversationSchema, insertTravelPackageSchema } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport cityRoutes from \"./routes/cities\";\nimport { sessionMiddleware, extractSessionPreferences } from \"./middleware/sessionMiddleware\";\nimport { sessionEnhancedPackageGenerator } from \"./services/sessionEnhancedPackageGenerator\";\nimport { sessionManager } from \"./services/sessionManager\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Apply session middleware to all routes\n  app.use(sessionMiddleware);\n  \n  // Register city routes\n  app.use('/api/cities', cityRoutes);\n  \n  // Conversation endpoints\n  app.post(\"/api/conversation\", async (req, res) => {\n    try {\n      const { userId, destination, days, people, theme } = req.body;\n      \n      const conversationId = randomUUID();\n      const conversation = await storage.createConversation({\n        conversationId,\n        userId,\n        destination,\n        days,\n        people,\n        theme,\n        messages: [],\n        status: \"active\",\n        refinementCount: 0,\n      });\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Create conversation error:\", error);\n      res.status(500).json({ error: \"Failed to create conversation\" });\n    }\n  });\n\n  app.post(\"/api/conversation/:id/message\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { message } = req.body;\n      \n      // Try to get conversation by conversationId first, then fall back to id\n      let conversation = await storage.getConversation(id);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      // Add user message\n      const userMessage = {\n        id: randomUUID(),\n        role: \"user\" as const,\n        content: message,\n        timestamp: new Date(),\n      };\n      \n      const messages = [...(conversation.messages as any[]), userMessage];\n      \n      // Get AI response\n      const context = {\n        destination: conversation.destination || undefined,\n        days: conversation.days || undefined,\n        people: conversation.people || undefined,\n        theme: conversation.theme || undefined,\n        messages: messages.map(m => ({ ...m, timestamp: new Date(m.timestamp) })),\n      };\n      \n      const aiResponse = await continueConversation(context);\n      \n      // Add AI message\n      const aiMessage = {\n        id: randomUUID(),\n        role: \"assistant\" as const,\n        content: aiResponse.response,\n        timestamp: new Date(),\n        options: aiResponse.options,\n      };\n      \n      const updatedMessages = [...messages, aiMessage];\n      \n      // Update conversation with extracted info\n      // Parse selected tags from theme field (tags are passed as comma-separated string in theme)\n      let selectedTags = conversation.selectedTags || [];\n      \n      // Check if the user message contains \"I'm interested in:\" (from tag selector)\n      if (message.includes(\"I'm interested in:\")) {\n        const tagString = message.split(':')[1]?.trim() || \"\";\n        selectedTags = tagString.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag.length > 0);\n      }\n      \n      // Also check if theme contains comma-separated tags (when extracted from message)\n      else if (aiResponse.extractedInfo?.theme && aiResponse.extractedInfo.theme.includes(',')) {\n        selectedTags = aiResponse.extractedInfo.theme.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag.length > 0);\n      }\n      \n      const updatedConversation = await storage.updateConversation(id, {\n        messages: updatedMessages,\n        destination: aiResponse.extractedInfo?.destination || conversation.destination,\n        days: aiResponse.extractedInfo?.days || conversation.days,\n        people: aiResponse.extractedInfo?.people || conversation.people,\n        theme: aiResponse.extractedInfo?.theme || conversation.theme,\n        selectedTags: selectedTags.length > 0 ? selectedTags : conversation.selectedTags,\n      });\n      \n      res.json({\n        conversation: updatedConversation,\n        aiResponse: aiMessage,\n        nextStep: aiResponse.nextStep,\n      });\n    } catch (error) {\n      console.error(\"Message error:\", error);\n      res.status(500).json({ error: \"Failed to process message\" });\n    }\n  });\n\n  app.get(\"/api/conversation/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const conversation = await storage.getConversation(id);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Get conversation error:\", error);\n      res.status(500).json({ error: \"Failed to get conversation\" });\n    }\n  });\n\n  // Package generation\n  app.post(\"/api/conversation/:id/generate-packages\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const conversation = await storage.getConversation(id);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      if (!conversation.destination || !conversation.days || !conversation.theme) {\n        return res.status(400).json({ error: \"Missing required conversation data\" });\n      }\n      \n      // Use enhanced package generator if tags are selected\n      const { generateEnhancedTravelPackages } = await import('./services/enhancedPackageGenerator');\n      const { processSessionTags, sessionTagsToPreferences, logTagCandidate } = await import('./services/sessionTagProcessor');\n      \n      // Process free-text preferences using session-scoped tags (NOT persisted)\n      const sessionPreferences: string[] = [];\n      \n      // Look for theme preferences in messages\n      if (conversation.messages && Array.isArray(conversation.messages)) {\n        for (const msg of conversation.messages) {\n          if (msg.role === 'user' && msg.content) {\n            const content = msg.content;\n            \n            // Skip tag selector messages\n            if (content.toLowerCase().includes(\"i'm interested in:\")) continue;\n            \n            // Process the free-text through session tag processor\n            const sessionTags = processSessionTags(content);\n            const preferences = sessionTagsToPreferences(sessionTags);\n            sessionPreferences.push(...preferences);\n            \n            // Log candidates for potential review (quarantined, not saved to main DB)\n            sessionTags.forEach(tag => {\n              if (tag.confidence >= 0.5 && tag.category !== 'generic') {\n                logTagCandidate({\n                  tagRaw: tag.raw,\n                  tagNorm: tag.normalized,\n                  cityId: undefined, // Would be set if we had city context\n                  category: tag.category,\n                  count: 1,\n                  lastSeenAt: new Date(),\n                  samplePois: []\n                });\n              }\n            });\n          }\n        }\n      }\n      \n      // Also process theme field if it's not just tag names\n      if (conversation.theme && !conversation.theme.includes(',')) {\n        const themeTags = processSessionTags(conversation.theme);\n        const themePreferences = sessionTagsToPreferences(themeTags);\n        sessionPreferences.push(...themePreferences);\n      }\n      \n      // Extract session preferences if available\n      if (req.sessionId) {\n        extractSessionPreferences(req);\n      }\n      \n      // Use session-enhanced generator if session exists\n      const packages = req.sessionId ? \n        await sessionEnhancedPackageGenerator.generatePackages(\n          conversation.destination,\n          conversation.days,\n          conversation.people || 1,\n          conversation.selectedTags || [],\n          Array.from(new Set(sessionPreferences)),\n          conversation.messages || [],\n          req.sessionId\n        ) :\n        await generateEnhancedTravelPackages({\n          destination: conversation.destination,\n          days: conversation.days,\n          people: conversation.people || 1,\n          theme: conversation.theme,\n          selectedTags: conversation.selectedTags || [],\n          freeTextPreferences: Array.from(new Set(sessionPreferences))\n        });\n      \n      // Save packages to storage\n      const savedPackages = await Promise.all(\n        packages.map(pkg => storage.createTravelPackage({\n          conversationId: id,\n          name: pkg.name,\n          type: pkg.type,\n          packageName: pkg.name,\n          packageType: pkg.type,\n          destination: conversation.destination!,\n          days: conversation.days!,\n          budget: pkg.budget,\n          description: pkg.description,\n          route: pkg.route,\n          accommodation: pkg.accommodation,\n          diningCount: pkg.diningCount,\n          attractionCount: pkg.attractionCount,\n          highlights: pkg.highlights,\n          itinerary: pkg.itinerary,\n        }))\n      );\n      \n      // Update conversation status\n      await storage.updateConversation(id, { status: \"completed\" });\n      \n      res.json({ packages: savedPackages });\n    } catch (error) {\n      console.error(\"Generate packages error:\", error);\n      res.status(500).json({ error: \"Failed to generate packages\" });\n    }\n  });\n\n  // Package endpoints\n  app.get(\"/api/packages/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const travelPackage = await storage.getTravelPackage(id);\n      \n      if (!travelPackage) {\n        return res.status(404).json({ error: \"Package not found\" });\n      }\n      \n      res.json(travelPackage);\n    } catch (error) {\n      console.error(\"Get package error:\", error);\n      res.status(500).json({ error: \"Failed to get package\" });\n    }\n  });\n\n  app.get(\"/api/conversation/:id/packages\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const packages = await storage.getTravelPackagesByConversation(id);\n      res.json(packages);\n    } catch (error) {\n      console.error(\"Get packages error:\", error);\n      res.status(500).json({ error: \"Failed to get packages\" });\n    }\n  });\n\n  // Refinement endpoint\n  app.post(\"/api/packages/:id/refine\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { refinementRequest } = req.body;\n      \n      const travelPackage = await storage.getTravelPackage(id);\n      if (!travelPackage) {\n        return res.status(404).json({ error: \"Package not found\" });\n      }\n      \n      const conversation = await storage.getConversation(travelPackage.conversationId!);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      if ((conversation.refinementCount || 0) >= 3) {\n        return res.status(400).json({ error: \"Maximum refinements reached\" });\n      }\n      \n      const refinedItinerary = await refineItinerary(\n        travelPackage.itinerary,\n        refinementRequest,\n        {\n          destination: travelPackage.destination,\n          days: travelPackage.days,\n          theme: conversation.theme || \"general\",\n        }\n      );\n      \n      // Update package\n      const updatedPackage = await storage.updateTravelPackage(id, {\n        itinerary: refinedItinerary,\n      });\n      \n      // Increment refinement count\n      await storage.updateConversation(travelPackage.conversationId!, {\n        refinementCount: (conversation.refinementCount || 0) + 1,\n      });\n      \n      res.json(updatedPackage);\n    } catch (error) {\n      console.error(\"Refine package error:\", error);\n      res.status(500).json({ error: \"Failed to refine package\" });\n    }\n  });\n\n  // Google Places endpoints with LLM ranking\n  app.get(\"/api/places/search\", async (req, res) => {\n    try {\n      const { query, theme, minRating, minReviews, city, tags, timeSlot, conversationId } = req.query;\n      \n      if (!query || typeof query !== \"string\") {\n        return res.status(400).json({ error: \"Query parameter required\" });\n      }\n      \n      // Get conversation context if available\n      let conversationContext: any = {};\n      if (conversationId && typeof conversationId === 'string') {\n        const conversation = await storage.getConversation(conversationId);\n        if (conversation) {\n          conversationContext = {\n            city: conversation.destination,\n            tags: conversation.selectedTags || []\n          };\n        }\n      }\n      \n      // Build search query with city context\n      let searchQuery = query;\n      const searchCity = city || conversationContext.city;\n      if (searchCity && !query.toLowerCase().includes(searchCity.toLowerCase())) {\n        searchQuery = `${query} in ${searchCity}`;\n      }\n      \n      // Relax filters for initial search - we'll use LLM to filter\n      const filters = {\n        minRating: 3.5, // Lowered from 4.2 to get more results\n        minReviews: 50,  // Lowered from 500 to get more results\n        theme: theme as string | undefined\n      };\n      \n      // Add theme-specific types\n      const relevantTypes: Record<string, string[]> = {\n        'foodie': ['restaurant', 'cafe', 'bakery', 'food'],\n        'culture': ['museum', 'art_gallery', 'tourist_attraction', 'point_of_interest'],\n        'adventure': ['park', 'tourist_attraction', 'natural_feature']\n      };\n      \n      if (theme && typeof theme === 'string' && relevantTypes[theme]) {\n        (filters as any).relevantTypes = relevantTypes[theme];\n      }\n      \n      // Search places with relaxed filters\n      const searchResults = await searchPlaces(searchQuery, filters);\n      \n      // If no results, try widening the search\n      let results = searchResults;\n      if (results.length === 0 && searchCity) {\n        // Try without city restriction\n        results = await searchPlaces(query, filters);\n      }\n      \n      // Apply LLM ranking if we have OpenAI key\n      if (process.env.OPENAI_API_KEY && results.length > 0) {\n        const { rankAndFilterPOIs } = await import('./services/llmRanking');\n        \n        const rankedResults = await rankAndFilterPOIs(results, {\n          query,\n          city: searchCity,\n          tags: conversationContext.tags || (tags ? (tags as string).split(',') : []),\n          timeSlot: timeSlot as string | undefined\n        });\n        \n        results = rankedResults;\n      } else {\n        // Fallback to simple quality filtering if no LLM\n        results = results\n          .filter(p => (p.rating || 0) >= 4.0 && (p.user_ratings_total || 0) >= 200)\n          .slice(0, 5);\n      }\n      \n      // Save POIs to storage with descriptions\n      await Promise.all(\n        results.map(async (place) => {\n          const existingPOI = await storage.getPOIByPlaceId(place.place_id);\n          if (!existingPOI) {\n            await storage.createPOI({\n              placeId: place.place_id,\n              name: place.name,\n              rating: place.rating ? place.rating.toString() : undefined,\n              userRatingsTotal: place.user_ratings_total,\n              priceLevel: place.price_level,\n              types: place.types || [],\n              address: place.address,\n              location: place.location,\n              photoRef: place.photo_ref,\n              openNow: place.open_now,\n            });\n          }\n        })\n      );\n      \n      res.json({ results });\n    } catch (error) {\n      console.error(\"Places search error:\", error);\n      res.status(500).json({ error: \"Failed to search places\" });\n    }\n  });\n\n  app.get(\"/api/places/details/:placeId\", async (req, res) => {\n    try {\n      const { placeId } = req.params;\n      const details = await getPlaceDetails(placeId);\n      \n      if (!details) {\n        return res.status(404).json({ error: \"Place not found\" });\n      }\n      \n      res.json({ result: details });\n    } catch (error) {\n      console.error(\"Place details error:\", error);\n      res.status(500).json({ error: \"Failed to get place details\" });\n    }\n  });\n\n  app.get(\"/api/places/photo\", async (req, res) => {\n    try {\n      const { ref, maxwidth = \"400\" } = req.query;\n      \n      if (!ref || typeof ref !== \"string\") {\n        return res.status(400).json({ error: \"Photo reference required\" });\n      }\n      \n      const photoUrl = getPhotoUrl(ref, parseInt(maxwidth as string));\n      res.redirect(photoUrl);\n    } catch (error) {\n      console.error(\"Photo URL error:\", error);\n      res.status(500).json({ error: \"Failed to get photo\" });\n    }\n  });\n\n  // Get enhanced city-specific tags with normalization\n  app.get('/api/cities/tags/:cityName/:countryCode', async (req, res) => {\n    try {\n      const { cityName, countryCode } = req.params;\n      \n      // Get city from storage\n      const city = await storage.getCityByName(cityName, countryCode);\n      \n      if (city) {\n        // Get tags from enhanced storage\n        const tags = await storage.getCityTags(city.id);\n        \n        res.json({\n          tags: tags.map(t => t.label),\n          isDefault: false,\n          cityId: city.id,\n          enhanced: tags.map(t => ({\n            id: t.id,\n            label: t.label,\n            category: t.metadata?.category,\n            score: t.score,\n            usageCount: t.usageCount\n          }))\n        });\n      } else {\n        // For now, fall back to the old system for unsupported cities\n        const { getCityTags, getDefaultTags } = await import('./data/cityTags');\n        const tags = getCityTags(cityName, countryCode);\n        \n        if (tags.length === 0) {\n          res.json({ tags: getDefaultTags(), isDefault: true });\n        } else {\n          res.json({ tags, isDefault: false });\n        }\n      }\n    } catch (error) {\n      console.error('Error getting city tags:', error);\n      res.status(500).json({ error: 'Failed to get city tags' });\n    }\n  });\n\n  // Export endpoint\n  app.get(\"/api/packages/:id/export\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const travelPackage = await storage.getTravelPackage(id);\n      \n      if (!travelPackage) {\n        return res.status(404).json({ error: \"Package not found\" });\n      }\n      \n      const exportData = {\n        package_name: travelPackage.name,\n        destination: travelPackage.destination,\n        duration: travelPackage.days,\n        budget: travelPackage.budget,\n        type: travelPackage.type,\n        description: travelPackage.description,\n        route: travelPackage.route,\n        accommodation: travelPackage.accommodation,\n        dining_experiences: travelPackage.diningCount,\n        attractions: travelPackage.attractionCount,\n        highlights: travelPackage.highlights,\n        itinerary: travelPackage.itinerary,\n        generated_at: new Date().toISOString(),\n      };\n      \n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=travel_package_${travelPackage.name.replace(/\\s+/g, '_')}.json`);\n      res.json(exportData);\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      res.status(500).json({ error: \"Failed to export package\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19577},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, \n  type Conversation, type InsertConversation, \n  type TravelPackage, type InsertTravelPackage, \n  type POI, type InsertPOI,\n  type CityTag, type InsertCityTag,\n  type TagAlias, type InsertTagAlias,\n  type City\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Conversation operations\n  getConversation(id: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined>;\n  getConversationsByUser(userId: string): Promise<Conversation[]>;\n\n  // Travel package operations\n  getTravelPackage(id: string): Promise<TravelPackage | undefined>;\n  createTravelPackage(pkg: InsertTravelPackage): Promise<TravelPackage>;\n  updateTravelPackage(id: string, updates: Partial<TravelPackage>): Promise<TravelPackage | undefined>;\n  getTravelPackagesByConversation(conversationId: string): Promise<TravelPackage[]>;\n\n  // POI operations\n  getPOI(id: string): Promise<POI | undefined>;\n  getPOIByPlaceId(placeId: string): Promise<POI | undefined>;\n  createPOI(poi: InsertPOI): Promise<POI>;\n  updatePOI(id: string, updates: Partial<POI>): Promise<POI | undefined>;\n\n  // City operations\n  getCityByName(cityName: string, countryCode: string): Promise<City | undefined>;\n  \n  // City tag operations\n  getCityTags(cityId: number): Promise<CityTag[]>;\n  getCityTag(id: number): Promise<CityTag | undefined>;\n  createCityTag(tag: InsertCityTag): Promise<CityTag>;\n  updateCityTag(id: number, updates: Partial<CityTag>): Promise<CityTag | undefined>;\n  incrementTagUsage(tagId: number): Promise<void>;\n  \n  // Tag alias operations\n  getTagAliasesByCityId(cityId: number): Promise<TagAlias[]>;\n  getTagAliases(tagId: number): Promise<TagAlias[]>;\n  createTagAlias(alias: InsertTagAlias): Promise<TagAlias>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private conversations: Map<string, Conversation>;\n  private travelPackages: Map<string, TravelPackage>;\n  private pois: Map<string, POI>;\n  private cities: Map<number, City>;\n  private cityTags: Map<number, CityTag>;\n  private tagAliases: Map<number, TagAlias>;\n  private cityTagCounter = 1000; // Start from 1000 for in-memory IDs\n\n  constructor() {\n    this.users = new Map();\n    this.conversations = new Map();\n    this.travelPackages = new Map();\n    this.pois = new Map();\n    this.cities = new Map();\n    this.cityTags = new Map();\n    this.tagAliases = new Map();\n    \n    // Initialize with some default cities for testing\n    this.initializeDefaultCities();\n  }\n  \n  private initializeDefaultCities() {\n    // Add some default cities\n    const cities = [\n      // Japan cities\n      {\n        id: 1,\n        googlePlaceId: 'ChIJ51cu8IcbXWARiRtXIothAS4',\n        cityName: 'Tokyo',\n        countryCode: 'JP',\n        countryName: 'Japan',\n        adminLevel1: 'Tokyo',\n        latitude: '35.6762',\n        longitude: '139.6503',\n        isCurated: true,\n        popularity: 100,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 2,\n        googlePlaceId: 'ChIJ8S7pTtpwhlQRZmpW5qLvGEU',\n        cityName: 'Kyoto',\n        countryCode: 'JP',\n        countryName: 'Japan',\n        adminLevel1: 'Kyoto',\n        latitude: '35.0116',\n        longitude: '135.7681',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 3,\n        googlePlaceId: 'ChIJoZ5KYnGJAGARKtGkqbh5oJg',\n        cityName: 'Osaka',\n        countryCode: 'JP',\n        countryName: 'Japan',\n        adminLevel1: 'Osaka',\n        latitude: '34.6937',\n        longitude: '135.5023',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // USA cities\n      {\n        id: 4,\n        googlePlaceId: 'ChIJOwg_06VPwokRYv534QaPC8g',\n        cityName: 'New York',\n        countryCode: 'US',\n        countryName: 'USA',\n        adminLevel1: 'New York',\n        latitude: '40.7128',\n        longitude: '-74.0060',\n        isCurated: true,\n        popularity: 100,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 5,\n        googlePlaceId: 'ChIJE9on3F3HwoAR9AhGJW_fL-I',\n        cityName: 'Los Angeles',\n        countryCode: 'US',\n        countryName: 'USA',\n        adminLevel1: 'California',\n        latitude: '34.0522',\n        longitude: '-118.2437',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 6,\n        googlePlaceId: 'ChIJ0X31pIK3voARo3mz1ebVzDo',\n        cityName: 'Las Vegas',\n        countryCode: 'US',\n        countryName: 'USA',\n        adminLevel1: 'Nevada',\n        latitude: '36.1699',\n        longitude: '-115.1398',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 7,\n        googlePlaceId: 'ChIJIQBpAG2ahYAR_6128GcTUEo',\n        cityName: 'San Francisco',\n        countryCode: 'US',\n        countryName: 'USA',\n        adminLevel1: 'California',\n        latitude: '37.7749',\n        longitude: '-122.4194',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 8,\n        googlePlaceId: 'ChIJEWSIqIas3YcRcr1FI7ZWpFA',\n        cityName: 'Miami',\n        countryCode: 'US',\n        countryName: 'USA',\n        adminLevel1: 'Florida',\n        latitude: '25.7617',\n        longitude: '-80.1918',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 9,\n        googlePlaceId: 'ChIJ0fr0GnnDwoARRr_e8vnfGEU',\n        cityName: 'Chicago',\n        countryCode: 'US',\n        countryName: 'USA',\n        adminLevel1: 'Illinois',\n        latitude: '41.8781',\n        longitude: '-87.6298',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // UK cities\n      {\n        id: 10,\n        googlePlaceId: 'ChIJdd4hrwug2EcRcJCL3JGz6II',\n        cityName: 'London',\n        countryCode: 'GB',\n        countryName: 'United Kingdom',\n        adminLevel1: 'England',\n        latitude: '51.5074',\n        longitude: '-0.1278',\n        isCurated: true,\n        popularity: 100,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 11,\n        googlePlaceId: 'ChIJIyaYpQC4h0gRVxbTGowStCE',\n        cityName: 'Edinburgh',\n        countryCode: 'GB',\n        countryName: 'United Kingdom',\n        adminLevel1: 'Scotland',\n        latitude: '55.9533',\n        longitude: '-3.1883',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // France cities\n      {\n        id: 12,\n        googlePlaceId: 'ChIJD7fiBh9u5kcRPFkwD4g6AKI',\n        cityName: 'Paris',\n        countryCode: 'FR',\n        countryName: 'France',\n        adminLevel1: 'Île-de-France',\n        latitude: '48.8566',\n        longitude: '2.3522',\n        isCurated: true,\n        popularity: 100,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 13,\n        googlePlaceId: 'ChIJW2hEJh1zzxIRnSP3W4Lj2lU',\n        cityName: 'Nice',\n        countryCode: 'FR',\n        countryName: 'France',\n        adminLevel1: 'Provence-Alpes-Côte d\\'Azur',\n        latitude: '43.7102',\n        longitude: '7.2620',\n        isCurated: true,\n        popularity: 80,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Italy cities\n      {\n        id: 14,\n        googlePlaceId: 'ChIJu46S-XhDMxMRAhMZFCJ5Z5E',\n        cityName: 'Rome',\n        countryCode: 'IT',\n        countryName: 'Italy',\n        adminLevel1: 'Lazio',\n        latitude: '41.9028',\n        longitude: '12.4964',\n        isCurated: true,\n        popularity: 100,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 15,\n        googlePlaceId: 'ChIJr5EZ5JkxGxARNj6RRgJKY5g',\n        cityName: 'Venice',\n        countryCode: 'IT',\n        countryName: 'Italy',\n        adminLevel1: 'Veneto',\n        latitude: '45.4408',\n        longitude: '12.3155',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 16,\n        googlePlaceId: 'ChIJQRDbubUuKRMR9I5e-VWUJqA',\n        cityName: 'Florence',\n        countryCode: 'IT',\n        countryName: 'Italy',\n        adminLevel1: 'Tuscany',\n        latitude: '43.7696',\n        longitude: '11.2558',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 17,\n        googlePlaceId: 'ChIJ53USP0nBhkcR3EqI0CRDP5c',\n        cityName: 'Milan',\n        countryCode: 'IT',\n        countryName: 'Italy',\n        adminLevel1: 'Lombardy',\n        latitude: '45.4642',\n        longitude: '9.1900',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Spain cities\n      {\n        id: 18,\n        googlePlaceId: 'ChIJ5TCOcRaYZQgR5JHf8JXBNwY',\n        cityName: 'Barcelona',\n        countryCode: 'ES',\n        countryName: 'Spain',\n        adminLevel1: 'Catalonia',\n        latitude: '41.3851',\n        longitude: '2.1734',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 19,\n        googlePlaceId: 'ChIJi7xhMnjjQgwRE4ELH79cOkQ',\n        cityName: 'Madrid',\n        countryCode: 'ES',\n        countryName: 'Spain',\n        adminLevel1: 'Community of Madrid',\n        latitude: '40.4168',\n        longitude: '-3.7038',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // More Japan cities \n      {\n        id: 20,\n        googlePlaceId: 'ChIJ-wBUcqA3GTURqP7nVvUi0lg',\n        cityName: 'Okinawa',\n        countryCode: 'JP',\n        countryName: 'Japan',\n        adminLevel1: 'Okinawa',\n        latitude: '26.2124',\n        longitude: '127.6809',\n        isCurated: true,\n        popularity: 80,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 21,\n        googlePlaceId: 'ChIJRx_3uqJXJV8RLhGKRAObwec',\n        cityName: 'Sapporo',\n        countryCode: 'JP',\n        countryName: 'Japan',\n        adminLevel1: 'Hokkaido',\n        latitude: '43.0621',\n        longitude: '141.3544',\n        isCurated: true,\n        popularity: 75,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // South Korea cities\n      {\n        id: 22,\n        googlePlaceId: 'ChIJzWXFYeuifDcRXwmC8j-H2nI',\n        cityName: 'Seoul',\n        countryCode: 'KR',\n        countryName: 'South Korea',\n        adminLevel1: 'Seoul',\n        latitude: '37.5665',\n        longitude: '126.9780',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 23,\n        googlePlaceId: 'ChIJNc0j6G3jYjcRPLWhsNuF0FE',\n        cityName: 'Busan',\n        countryCode: 'KR',\n        countryName: 'South Korea',\n        adminLevel1: 'Busan',\n        latitude: '35.1796',\n        longitude: '129.0756',\n        isCurated: true,\n        popularity: 80,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Thailand cities\n      {\n        id: 24,\n        googlePlaceId: 'ChIJ82ENKDJLHTQRIhWK-9Z_cc0',\n        cityName: 'Bangkok',\n        countryCode: 'TH',\n        countryName: 'Thailand',\n        adminLevel1: 'Bangkok',\n        latitude: '13.7563',\n        longitude: '100.5018',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 25,\n        googlePlaceId: 'ChIJayW5xvJAQTARCpzTbmZq7Qs',\n        cityName: 'Chiang Mai',\n        countryCode: 'TH',\n        countryName: 'Thailand',\n        adminLevel1: 'Chiang Mai',\n        latitude: '18.7061',\n        longitude: '98.9817',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 26,\n        googlePlaceId: 'ChIJgUbEoXqeUDARGBvyXM6gybQ',\n        cityName: 'Phuket',\n        countryCode: 'TH',\n        countryName: 'Thailand',\n        adminLevel1: 'Phuket',\n        latitude: '7.8804',\n        longitude: '98.3923',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Singapore\n      {\n        id: 27,\n        googlePlaceId: 'ChIJdZOL_jEb2jERre9qlCOBnFs',\n        cityName: 'Singapore',\n        countryCode: 'SG',\n        countryName: 'Singapore',\n        adminLevel1: 'Singapore',\n        latitude: '1.3521',\n        longitude: '103.8198',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Australia cities\n      {\n        id: 28,\n        googlePlaceId: 'ChIJP3Sa8ziEEmsRUKgyFmh9AQM',\n        cityName: 'Sydney',\n        countryCode: 'AU',\n        countryName: 'Australia',\n        adminLevel1: 'New South Wales',\n        latitude: '-33.8688',\n        longitude: '151.2093',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 29,\n        googlePlaceId: 'ChIJ90260rVG1moRlmhyKguEjSY',\n        cityName: 'Melbourne',\n        countryCode: 'AU',\n        countryName: 'Australia',\n        adminLevel1: 'Victoria',\n        latitude: '-37.8136',\n        longitude: '144.9631',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // China cities\n      {\n        id: 30,\n        googlePlaceId: 'ChIJAVuH1DRU8DURATjXVMblfCk',\n        cityName: 'Beijing',\n        countryCode: 'CN',\n        countryName: 'China',\n        adminLevel1: 'Beijing',\n        latitude: '39.9042',\n        longitude: '116.4074',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 31,\n        googlePlaceId: 'ChIJMzz1sUBwsjURKBH6_1npgpI',\n        cityName: 'Shanghai',\n        countryCode: 'CN',\n        countryName: 'China',\n        adminLevel1: 'Shanghai',\n        latitude: '31.2304',\n        longitude: '121.4737',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 32,\n        googlePlaceId: 'ChIJBcB_sVoFAjQR3RbANwlRSpo',\n        cityName: 'Hong Kong',\n        countryCode: 'HK',\n        countryName: 'Hong Kong',\n        adminLevel1: 'Hong Kong',\n        latitude: '22.3193',\n        longitude: '114.1694',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // UAE cities\n      {\n        id: 33,\n        googlePlaceId: 'ChIJRcbZaklDXz4RYlEphFBu5r0',\n        cityName: 'Dubai',\n        countryCode: 'AE',\n        countryName: 'UAE',\n        adminLevel1: 'Dubai',\n        latitude: '25.2048',\n        longitude: '55.2708',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 34,\n        googlePlaceId: 'ChIJoVLydJVuXj4R3tOaZ4mjXrw',\n        cityName: 'Abu Dhabi',\n        countryCode: 'AE',\n        countryName: 'UAE',\n        adminLevel1: 'Abu Dhabi',\n        latitude: '24.4539',\n        longitude: '54.3773',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Turkey\n      {\n        id: 35,\n        googlePlaceId: 'ChIJOwY1H6OLlxQR7c-RZnKgrds',\n        cityName: 'Istanbul',\n        countryCode: 'TR',\n        countryName: 'Turkey',\n        adminLevel1: 'Istanbul',\n        latitude: '41.0082',\n        longitude: '28.9784',\n        isCurated: true,\n        popularity: 95,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Germany cities\n      {\n        id: 36,\n        googlePlaceId: 'ChIJAVkDPzpRqEcRcE5YH9XQnvs',\n        cityName: 'Berlin',\n        countryCode: 'DE',\n        countryName: 'Germany',\n        adminLevel1: 'Berlin',\n        latitude: '52.5200',\n        longitude: '13.4050',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 37,\n        googlePlaceId: 'ChIJ2e-gOrxfnkcRbXvXWX0gJQU',\n        cityName: 'Munich',\n        countryCode: 'DE',\n        countryName: 'Germany',\n        adminLevel1: 'Bavaria',\n        latitude: '48.1351',\n        longitude: '11.5820',\n        isCurated: true,\n        popularity: 85,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Greece cities\n      {\n        id: 38,\n        googlePlaceId: 'ChIJ8UNwBw-YoRQRP6rmh8JgECg',\n        cityName: 'Athens',\n        countryCode: 'GR',\n        countryName: 'Greece',\n        adminLevel1: 'Attica',\n        latitude: '37.9838',\n        longitude: '23.7275',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 39,\n        googlePlaceId: 'ChIJW9SU68U4mhQRn-LJBBdcFIM',\n        cityName: 'Santorini',\n        countryCode: 'GR',\n        countryName: 'Greece',\n        adminLevel1: 'South Aegean',\n        latitude: '36.3932',\n        longitude: '25.4615',\n        isCurated: true,\n        popularity: 90,\n        metadata: {},\n        lastValidated: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n    \n    cities.forEach(city => {\n      this.cities.set(city.id, city as City);\n    });\n    \n    // Initialize default tags for Tokyo\n    this.initializeDefaultTags();\n  }\n  \n  private initializeDefaultTags() {\n    const cityTagsData = [\n      // Tokyo tags\n      {\n        cityId: 1,\n        tags: [\n          { label: 'Tokyo Disneyland', aliases: ['TDL', '東京ディズニーランド', 'disney'], category: 'attraction' },\n          { label: 'Tokyo Tower', aliases: ['東京タワー'], category: 'attraction' },\n          { label: 'Akihabara', aliases: ['Akiba', '秋葉原', 'akihabra'], category: 'district' },\n          { label: 'Tsukiji Market', aliases: ['築地市場', 'Tsukiji', '築地'], category: 'experience' },\n          { label: 'Shibuya Crossing', aliases: ['渋谷スクランブル交差点', 'shibuya'], category: 'attraction' },\n          { label: 'Senso-ji Temple', aliases: ['浅草寺', 'Sensoji', 'sensouji'], category: 'attraction' },\n          { label: 'TeamLab Planets', aliases: ['チームラボプラネッツ', 'Team Lab', 'teamlab'], category: 'experience' },\n          { label: 'Shinjuku', aliases: ['新宿'], category: 'district' },\n          { label: 'Harajuku', aliases: ['原宿'], category: 'district' },\n          { label: 'Roppongi', aliases: ['六本木'], category: 'district' }\n        ]\n      },\n      // Kyoto tags\n      {\n        cityId: 2,\n        tags: [\n          { label: 'Fushimi Inari', aliases: ['伏見稲荷', 'fushimi-inari'], category: 'attraction' },\n          { label: 'Golden Pavilion', aliases: ['金閣寺', 'Kinkaku-ji'], category: 'attraction' },\n          { label: 'Bamboo Forest', aliases: ['竹林', 'Arashiyama'], category: 'experience' },\n          { label: 'Gion District', aliases: ['祇園'], category: 'district' },\n          { label: 'Kiyomizu Temple', aliases: ['清水寺'], category: 'attraction' }\n        ]\n      },\n      // Osaka tags\n      {\n        cityId: 3,\n        tags: [\n          { label: 'Osaka Castle', aliases: ['大阪城'], category: 'attraction' },\n          { label: 'Dotonbori', aliases: ['道頓堀'], category: 'district' },\n          { label: 'Universal Studios Japan', aliases: ['USJ', 'ユニバーサル'], category: 'attraction' },\n          { label: 'Shinsekai', aliases: ['新世界'], category: 'district' },\n          { label: 'Namba', aliases: ['難波'], category: 'district' }\n        ]\n      },\n      // New York tags\n      {\n        cityId: 4,\n        tags: [\n          { label: 'Times Square', aliases: ['time square'], category: 'attraction' },\n          { label: 'Central Park', aliases: ['central prk'], category: 'attraction' },\n          { label: 'Statue of Liberty', aliases: ['lady liberty', 'liberty statue'], category: 'attraction' },\n          { label: 'Empire State Building', aliases: ['empire state'], category: 'attraction' },\n          { label: 'Brooklyn Bridge', aliases: ['brooklyn'], category: 'attraction' },\n          { label: 'Metropolitan Museum', aliases: ['The Met', 'met museum'], category: 'experience' },\n          { label: 'Broadway', aliases: ['broadway shows'], category: 'experience' },\n          { label: 'Wall Street', aliases: ['financial district'], category: 'district' },\n          { label: '9/11 Memorial', aliases: ['ground zero', 'world trade center'], category: 'attraction' },\n          { label: 'High Line', aliases: ['highline park'], category: 'experience' }\n        ]\n      },\n      // Los Angeles tags\n      {\n        cityId: 5,\n        tags: [\n          { label: 'Hollywood', aliases: ['hollywood sign', 'hollywood hills'], category: 'district' },\n          { label: 'Universal Studios', aliases: ['universal'], category: 'attraction' },\n          { label: 'Santa Monica Pier', aliases: ['santa monica beach'], category: 'attraction' },\n          { label: 'Beverly Hills', aliases: ['rodeo drive'], category: 'district' },\n          { label: 'Griffith Observatory', aliases: ['griffith park'], category: 'attraction' },\n          { label: 'Venice Beach', aliases: ['venice'], category: 'attraction' },\n          { label: 'Disneyland', aliases: ['disney'], category: 'attraction' },\n          { label: 'Getty Center', aliases: ['getty museum'], category: 'experience' },\n          { label: 'Malibu', aliases: ['malibu beach'], category: 'district' },\n          { label: 'Walk of Fame', aliases: ['hollywood walk'], category: 'attraction' }\n        ]\n      },\n      // Las Vegas tags\n      {\n        cityId: 6,\n        tags: [\n          { label: 'The Strip', aliases: ['las vegas strip', 'vegas strip'], category: 'district' },\n          { label: 'Bellagio Fountains', aliases: ['bellagio'], category: 'attraction' },\n          { label: 'Fremont Street', aliases: ['fremont'], category: 'district' },\n          { label: 'Grand Canyon Tours', aliases: ['grand canyon'], category: 'experience' },\n          { label: 'Caesars Palace', aliases: ['caesars'], category: 'attraction' },\n          { label: 'The Venetian', aliases: ['venetian'], category: 'attraction' },\n          { label: 'MGM Grand', aliases: ['mgm'], category: 'attraction' },\n          { label: 'Cirque du Soleil', aliases: ['cirque shows'], category: 'experience' },\n          { label: 'Red Rock Canyon', aliases: ['red rocks'], category: 'experience' },\n          { label: 'Hoover Dam', aliases: ['hoover'], category: 'attraction' }\n        ]\n      },\n      // San Francisco tags\n      {\n        cityId: 7,\n        tags: [\n          { label: 'Golden Gate Bridge', aliases: ['golden gate'], category: 'attraction' },\n          { label: 'Alcatraz Island', aliases: ['alcatraz'], category: 'attraction' },\n          { label: 'Fishermans Wharf', aliases: ['fisherman wharf'], category: 'district' },\n          { label: 'Chinatown', aliases: ['china town'], category: 'district' },\n          { label: 'Lombard Street', aliases: ['crooked street'], category: 'attraction' },\n          { label: 'Union Square', aliases: ['union sq'], category: 'district' },\n          { label: 'Golden Gate Park', aliases: ['gg park'], category: 'experience' },\n          { label: 'Cable Cars', aliases: ['trolley'], category: 'experience' },\n          { label: 'Pier 39', aliases: ['pier39'], category: 'attraction' },\n          { label: 'Sausalito', aliases: ['sausalito ferry'], category: 'experience' }\n        ]\n      },\n      // Miami tags\n      {\n        cityId: 8,\n        tags: [\n          { label: 'South Beach', aliases: ['south beach miami', 'sobe'], category: 'attraction' },\n          { label: 'Art Deco District', aliases: ['art deco'], category: 'district' },\n          { label: 'Little Havana', aliases: ['calle ocho'], category: 'district' },\n          { label: 'Wynwood Walls', aliases: ['wynwood'], category: 'attraction' },\n          { label: 'Everglades Tours', aliases: ['everglades'], category: 'experience' },\n          { label: 'Bayside Marketplace', aliases: ['bayside'], category: 'attraction' },\n          { label: 'Key Biscayne', aliases: ['key biscayne beach'], category: 'attraction' },\n          { label: 'Vizcaya Museum', aliases: ['vizcaya'], category: 'experience' },\n          { label: 'Ocean Drive', aliases: ['ocean dr'], category: 'district' },\n          { label: 'Coconut Grove', aliases: ['the grove'], category: 'district' }\n        ]\n      },\n      // Chicago tags\n      {\n        cityId: 9,\n        tags: [\n          { label: 'Millennium Park', aliases: ['millennium'], category: 'attraction' },\n          { label: 'Willis Tower', aliases: ['sears tower'], category: 'attraction' },\n          { label: 'Navy Pier', aliases: ['pier'], category: 'attraction' },\n          { label: 'Art Institute', aliases: ['art museum'], category: 'experience' },\n          { label: 'The Bean', aliases: ['cloud gate'], category: 'attraction' },\n          { label: 'River Architecture Cruise', aliases: ['river cruise'], category: 'experience' },\n          { label: 'Deep Dish Pizza', aliases: ['pizza'], category: 'food' },\n          { label: 'Magnificent Mile', aliases: ['mag mile'], category: 'district' },\n          { label: 'Wrigley Field', aliases: ['cubs stadium'], category: 'attraction' },\n          { label: 'Lincoln Park Zoo', aliases: ['zoo'], category: 'attraction' },\n          { label: 'Chicago Theatre', aliases: ['theater'], category: 'experience' }\n        ]\n      },\n      // London tags\n      {\n        cityId: 10,\n        tags: [\n          { label: 'Big Ben', aliases: ['clock tower', 'elizabeth tower'], category: 'attraction' },\n          { label: 'Tower Bridge', aliases: ['bridge'], category: 'attraction' },\n          { label: 'Buckingham Palace', aliases: ['palace'], category: 'attraction' },\n          { label: 'British Museum', aliases: ['museum'], category: 'experience' },\n          { label: 'London Eye', aliases: ['observation wheel'], category: 'attraction' },\n          { label: 'Tower of London', aliases: ['tower'], category: 'attraction' },\n          { label: 'Westminster Abbey', aliases: ['abbey'], category: 'attraction' },\n          { label: 'Camden Market', aliases: ['camden'], category: 'district' },\n          { label: 'Covent Garden', aliases: ['covent'], category: 'district' },\n          { label: 'Hyde Park', aliases: ['park'], category: 'attraction' },\n          { label: 'West End Shows', aliases: ['theatre', 'theater'], category: 'experience' },\n          { label: 'Notting Hill', aliases: ['nottinghill'], category: 'district' },\n          { label: 'Borough Market', aliases: ['food market'], category: 'food' }\n        ]\n      },\n      // Edinburgh tags\n      {\n        cityId: 11,\n        tags: [\n          { label: 'Edinburgh Castle', aliases: ['castle'], category: 'attraction' },\n          { label: 'Royal Mile', aliases: ['mile'], category: 'district' },\n          { label: 'Arthur\\'s Seat', aliases: ['arthurs seat'], category: 'attraction' },\n          { label: 'Princes Street', aliases: ['shopping'], category: 'district' },\n          { label: 'National Museum', aliases: ['museum'], category: 'experience' },\n          { label: 'Holyrood Palace', aliases: ['palace'], category: 'attraction' },\n          { label: 'Edinburgh Festival', aliases: ['fringe', 'festival'], category: 'experience' },\n          { label: 'Ghost Tours', aliases: ['haunted tours'], category: 'experience' },\n          { label: 'Scotch Whisky Experience', aliases: ['whisky', 'whiskey'], category: 'experience' },\n          { label: 'Calton Hill', aliases: ['hill'], category: 'attraction' },\n          { label: 'Dean Village', aliases: ['village'], category: 'district' }\n        ]\n      },\n      // Paris tags\n      {\n        cityId: 12,\n        tags: [\n          { label: 'Eiffel Tower', aliases: ['tour eiffel'], category: 'attraction' },\n          { label: 'Louvre Museum', aliases: ['louvre', 'mona lisa'], category: 'experience' },\n          { label: 'Arc de Triomphe', aliases: ['arc'], category: 'attraction' },\n          { label: 'Notre-Dame', aliases: ['cathedral'], category: 'attraction' },\n          { label: 'Champs-Élysées', aliases: ['champs elysees'], category: 'district' },\n          { label: 'Montmartre', aliases: ['sacre coeur'], category: 'district' },\n          { label: 'Versailles', aliases: ['palace'], category: 'attraction' },\n          { label: 'Seine River Cruise', aliases: ['river cruise'], category: 'experience' },\n          { label: 'Latin Quarter', aliases: ['quartier latin'], category: 'district' },\n          { label: 'Marais District', aliases: ['le marais'], category: 'district' },\n          { label: 'Orsay Museum', aliases: [\"musée d'orsay\"], category: 'experience' },\n          { label: 'Moulin Rouge', aliases: ['cabaret'], category: 'experience' },\n          { label: 'Sainte-Chapelle', aliases: ['chapel'], category: 'attraction' }\n        ]\n      },\n      // Nice tags\n      {\n        cityId: 13,\n        tags: [\n          { label: 'Promenade des Anglais', aliases: ['promenade'], category: 'attraction' },\n          { label: 'Old Town', aliases: ['vieux nice'], category: 'district' },\n          { label: 'Castle Hill', aliases: ['colline du château'], category: 'attraction' },\n          { label: 'Beach Clubs', aliases: ['private beaches'], category: 'attraction' },\n          { label: 'Cours Saleya Market', aliases: ['flower market'], category: 'food' },\n          { label: 'Monaco Day Trip', aliases: ['monte carlo'], category: 'experience' },\n          { label: 'Russian Cathedral', aliases: ['cathedral'], category: 'attraction' },\n          { label: 'Marc Chagall Museum', aliases: ['chagall'], category: 'experience' },\n          { label: 'Cap Ferrat', aliases: ['saint jean'], category: 'district' },\n          { label: 'Antibes', aliases: ['juan les pins'], category: 'experience' }\n        ]\n      },\n      // Rome tags\n      {\n        cityId: 14,\n        tags: [\n          { label: 'Colosseum', aliases: ['colosseo'], category: 'attraction' },\n          { label: 'Vatican City', aliases: ['vatican', 'st peters'], category: 'attraction' },\n          { label: 'Trevi Fountain', aliases: ['fontana di trevi'], category: 'attraction' },\n          { label: 'Roman Forum', aliases: ['forum'], category: 'attraction' },\n          { label: 'Pantheon', aliases: ['pantheon temple'], category: 'attraction' },\n          { label: 'Spanish Steps', aliases: ['piazza di spagna'], category: 'attraction' },\n          { label: 'Trastevere', aliases: ['trastevere district'], category: 'district' },\n          { label: 'Campo de\\' Fiori', aliases: ['market'], category: 'district' },\n          { label: 'Borghese Gallery', aliases: ['villa borghese'], category: 'experience' },\n          { label: 'Sistine Chapel', aliases: ['cappella sistina'], category: 'attraction' },\n          { label: 'Piazza Navona', aliases: ['navona'], category: 'district' },\n          { label: 'Catacombs', aliases: ['underground rome'], category: 'experience' }\n        ]\n      },\n      // Venice tags\n      {\n        cityId: 15,\n        tags: [\n          { label: 'St. Mark\\'s Square', aliases: ['piazza san marco'], category: 'attraction' },\n          { label: 'Grand Canal', aliases: ['canal grande'], category: 'attraction' },\n          { label: 'Rialto Bridge', aliases: ['ponte di rialto'], category: 'attraction' },\n          { label: 'Gondola Ride', aliases: ['gondola'], category: 'experience' },\n          { label: 'Doge\\'s Palace', aliases: ['palazzo ducale'], category: 'attraction' },\n          { label: 'St. Mark\\'s Basilica', aliases: ['basilica'], category: 'attraction' },\n          { label: 'Murano Island', aliases: ['murano glass'], category: 'experience' },\n          { label: 'Burano Island', aliases: ['colorful houses'], category: 'experience' },\n          { label: 'Bridge of Sighs', aliases: ['ponte dei sospiri'], category: 'attraction' },\n          { label: 'Peggy Guggenheim', aliases: ['guggenheim'], category: 'experience' },\n          { label: 'Venetian Masks', aliases: ['carnival masks'], category: 'experience' }\n        ]\n      },\n      // Florence tags\n      {\n        cityId: 16,\n        tags: [\n          { label: 'Uffizi Gallery', aliases: ['uffizi'], category: 'experience' },\n          { label: 'Duomo', aliases: ['cathedral', 'brunelleschi dome'], category: 'attraction' },\n          { label: 'Ponte Vecchio', aliases: ['old bridge'], category: 'attraction' },\n          { label: 'David Statue', aliases: ['michelangelo david'], category: 'attraction' },\n          { label: 'Boboli Gardens', aliases: ['gardens'], category: 'attraction' },\n          { label: 'Piazzale Michelangelo', aliases: ['viewpoint'], category: 'attraction' },\n          { label: 'Santa Croce', aliases: ['basilica'], category: 'attraction' },\n          { label: 'Pitti Palace', aliases: ['palazzo pitti'], category: 'attraction' },\n          { label: 'Mercato Centrale', aliases: ['central market'], category: 'food' },\n          { label: 'San Lorenzo Market', aliases: ['leather market'], category: 'district' },\n          { label: 'Oltrarno District', aliases: ['artisan quarter'], category: 'district' }\n        ]\n      },\n      // Milan tags\n      {\n        cityId: 17,\n        tags: [\n          { label: 'Milan Cathedral', aliases: ['duomo di milano'], category: 'attraction' },\n          { label: 'Galleria Vittorio Emanuele', aliases: ['galleria'], category: 'attraction' },\n          { label: 'La Scala Opera', aliases: ['teatro alla scala'], category: 'experience' },\n          { label: 'Fashion District', aliases: ['quadrilatero'], category: 'district' },\n          { label: 'Navigli Canals', aliases: ['navigli'], category: 'district' },\n          { label: 'Sforza Castle', aliases: ['castello sforzesco'], category: 'attraction' },\n          { label: 'Brera District', aliases: ['brera'], category: 'district' },\n          { label: 'Last Supper', aliases: ['cenacolo'], category: 'attraction' },\n          { label: 'Aperitivo Culture', aliases: ['happy hour'], category: 'food' },\n          { label: 'San Siro Stadium', aliases: ['giuseppe meazza'], category: 'attraction' }\n        ]\n      },\n      // Barcelona tags\n      {\n        cityId: 18,\n        tags: [\n          { label: 'Sagrada Familia', aliases: ['sagrada', 'gaudi'], category: 'attraction' },\n          { label: 'Park Güell', aliases: ['park guell', 'parc guell'], category: 'attraction' },\n          { label: 'Las Ramblas', aliases: ['la rambla'], category: 'district' },\n          { label: 'Gothic Quarter', aliases: ['barri gotic'], category: 'district' },\n          { label: 'Casa Batlló', aliases: ['batllo'], category: 'attraction' },\n          { label: 'Camp Nou', aliases: ['fc barcelona'], category: 'attraction' },\n          { label: 'Barceloneta Beach', aliases: ['beach'], category: 'attraction' },\n          { label: 'Boqueria Market', aliases: ['la boqueria'], category: 'food' },\n          { label: 'Montjuïc', aliases: ['montjuic hill'], category: 'attraction' },\n          { label: 'Picasso Museum', aliases: ['museu picasso'], category: 'experience' },\n          { label: 'El Born', aliases: ['born district'], category: 'district' },\n          { label: 'Tapas Tours', aliases: ['tapas crawl'], category: 'food' }\n        ]\n      },\n      // Madrid tags\n      {\n        cityId: 19,\n        tags: [\n          { label: 'Prado Museum', aliases: ['museo del prado'], category: 'experience' },\n          { label: 'Royal Palace', aliases: ['palacio real'], category: 'attraction' },\n          { label: 'Retiro Park', aliases: ['parque del retiro'], category: 'attraction' },\n          { label: 'Plaza Mayor', aliases: ['main square'], category: 'district' },\n          { label: 'Puerta del Sol', aliases: ['sol'], category: 'district' },\n          { label: 'Reina Sofia Museum', aliases: ['museo reina sofia'], category: 'experience' },\n          { label: 'Gran Via', aliases: ['shopping street'], category: 'district' },\n          { label: 'Mercado San Miguel', aliases: ['san miguel market'], category: 'food' },\n          { label: 'Santiago Bernabéu', aliases: ['real madrid'], category: 'attraction' },\n          { label: 'El Rastro Flea Market', aliases: ['rastro'], category: 'district' },\n          { label: 'Malasaña District', aliases: ['malasana'], category: 'district' },\n          { label: 'Flamenco Shows', aliases: ['flamenco'], category: 'experience' }\n        ]\n      },\n      // Okinawa tags\n      {\n        cityId: 20,\n        tags: [\n          { label: 'Churaumi Aquarium', aliases: ['aquarium', '美ら海水族館'], category: 'attraction' },\n          { label: 'Shuri Castle', aliases: ['首里城', 'castle'], category: 'attraction' },\n          { label: 'Kokusai Street', aliases: ['国際通り', 'shopping street'], category: 'district' },\n          { label: 'Beautiful Beaches', aliases: ['beaches', 'emerald beach'], category: 'attraction' },\n          { label: 'Snorkeling & Diving', aliases: ['blue cave', 'diving'], category: 'experience' },\n          { label: 'Island Hopping', aliases: ['ishigaki', 'miyako'], category: 'experience' },\n          { label: 'Okinawa World', aliases: ['gyokusendo cave'], category: 'attraction' },\n          { label: 'American Village', aliases: ['mihama'], category: 'district' },\n          { label: 'Naha Market', aliases: ['makishi market'], category: 'food' },\n          { label: 'Traditional Ryukyu Culture', aliases: ['ryukyu village'], category: 'experience' }\n        ]\n      },\n      // Sapporo tags\n      {\n        cityId: 21,\n        tags: [\n          { label: 'Snow Festival', aliases: ['雪まつり', 'yuki matsuri'], category: 'experience' },\n          { label: 'Sapporo Beer Museum', aliases: ['beer garden', 'ビール博物館'], category: 'experience' },\n          { label: 'Susukino District', aliases: ['すすきの', 'nightlife'], category: 'district' },\n          { label: 'Odori Park', aliases: ['大通公園'], category: 'attraction' },\n          { label: 'Mount Moiwa', aliases: ['もいわ山', 'ropeway'], category: 'attraction' },\n          { label: 'Ramen Alley', aliases: ['ラーメン横丁', 'miso ramen'], category: 'food' },\n          { label: 'Jingisukan', aliases: ['lamb bbq', 'ジンギスカン'], category: 'food' },\n          { label: 'Nijo Market', aliases: ['二条市場', 'seafood market'], category: 'food' },\n          { label: 'Historic Village', aliases: ['開拓の村'], category: 'experience' },\n          { label: 'Hot Springs', aliases: ['jozankei onsen', '温泉'], category: 'experience' }\n        ]\n      },\n      // Seoul tags\n      {\n        cityId: 22,\n        tags: [\n          { label: 'Gyeongbokgung Palace', aliases: ['경복궁', 'palace'], category: 'attraction' },\n          { label: 'N Seoul Tower', aliases: ['namsan tower', '남산타워'], category: 'attraction' },\n          { label: 'Myeongdong', aliases: ['명동', 'shopping'], category: 'district' },\n          { label: 'Bukchon Hanok Village', aliases: ['북촌한옥마을', 'traditional village'], category: 'district' },\n          { label: 'Insadong', aliases: ['인사동', 'art street'], category: 'district' },\n          { label: 'Gangnam District', aliases: ['강남', 'gangnam style'], category: 'district' },\n          { label: 'Korean BBQ', aliases: ['kbbq', '고기구이'], category: 'food' },\n          { label: 'K-Pop Experience', aliases: ['kpop', 'bts'], category: 'experience' },\n          { label: 'DMZ Tour', aliases: ['demilitarized zone'], category: 'experience' },\n          { label: 'Dongdaemun Market', aliases: ['동대문', 'ddm'], category: 'district' },\n          { label: 'Han River', aliases: ['한강', 'hangang park'], category: 'attraction' },\n          { label: 'Street Food Markets', aliases: ['gwangjang', '광장시장'], category: 'food' }\n        ]\n      },\n      // Busan tags\n      {\n        cityId: 23,\n        tags: [\n          { label: 'Haeundae Beach', aliases: ['해운대', 'beach'], category: 'attraction' },\n          { label: 'Gamcheon Culture Village', aliases: ['감천문화마을', 'colorful village'], category: 'district' },\n          { label: 'Jagalchi Fish Market', aliases: ['자갈치시장', 'seafood'], category: 'food' },\n          { label: 'Haedong Yonggungsa Temple', aliases: ['해동용궁사', 'seaside temple'], category: 'attraction' },\n          { label: 'Gwangalli Beach', aliases: ['광안리', 'diamond bridge'], category: 'attraction' },\n          { label: 'Taejongdae Park', aliases: ['태종대', 'coastal park'], category: 'attraction' },\n          { label: 'Spa Land', aliases: ['스파랜드', 'jjimjilbang'], category: 'experience' },\n          { label: 'BIFF Square', aliases: ['부산국제영화제', 'film festival'], category: 'district' },\n          { label: 'Gukje Market', aliases: ['국제시장', 'traditional market'], category: 'district' },\n          { label: 'Beomeosa Temple', aliases: ['범어사'], category: 'attraction' }\n        ]\n      },\n      // Bangkok tags\n      {\n        cityId: 24,\n        tags: [\n          { label: 'Grand Palace', aliases: ['พระบรมมหาราชวัง', 'royal palace'], category: 'attraction' },\n          { label: 'Wat Pho', aliases: ['วัดโพธิ์', 'reclining buddha'], category: 'attraction' },\n          { label: 'Wat Arun', aliases: ['วัดอรุณ', 'temple of dawn'], category: 'attraction' },\n          { label: 'Chatuchak Market', aliases: ['จตุจักร', 'weekend market'], category: 'district' },\n          { label: 'Floating Markets', aliases: ['damnoen saduak', 'amphawa'], category: 'experience' },\n          { label: 'Street Food Tours', aliases: ['pad thai', 'tom yum'], category: 'food' },\n          { label: 'Khao San Road', aliases: ['ถนนข้าวสาร', 'backpacker street'], category: 'district' },\n          { label: 'Rooftop Bars', aliases: ['sky bar', 'lebua'], category: 'experience' },\n          { label: 'Chinatown', aliases: ['yaowarat', 'เยาวราช'], category: 'district' },\n          { label: 'Jim Thompson House', aliases: ['silk house'], category: 'attraction' },\n          { label: 'Thai Massage', aliases: ['spa', 'นวดแผนไทย'], category: 'experience' },\n          { label: 'Chao Phraya River', aliases: ['แม่น้ำเจ้าพระยา', 'river cruise'], category: 'experience' }\n        ]\n      },\n      // Chiang Mai tags\n      {\n        cityId: 25,\n        tags: [\n          { label: 'Doi Suthep Temple', aliases: ['ดอยสุเทพ', 'mountain temple'], category: 'attraction' },\n          { label: 'Old City Temples', aliases: ['wat chedi luang', 'wat phra singh'], category: 'attraction' },\n          { label: 'Night Bazaar', aliases: ['ไนท์บาซาร์', 'night market'], category: 'district' },\n          { label: 'Sunday Walking Street', aliases: ['ถนนคนเดิน', 'weekend market'], category: 'district' },\n          { label: 'Elephant Sanctuary', aliases: ['ethical elephant'], category: 'experience' },\n          { label: 'Thai Cooking Class', aliases: ['cooking school'], category: 'experience' },\n          { label: 'Nimman Road', aliases: ['นิมมาน', 'trendy area'], category: 'district' },\n          { label: 'Khao Soi', aliases: ['ข้าวซอย', 'northern curry'], category: 'food' },\n          { label: 'Doi Inthanon', aliases: ['highest peak'], category: 'experience' },\n          { label: 'Yi Peng Festival', aliases: ['lantern festival', 'ยี่เป็ง'], category: 'experience' }\n        ]\n      },\n      // Phuket tags\n      {\n        cityId: 26,\n        tags: [\n          { label: 'Patong Beach', aliases: ['ป่าตอง', 'party beach'], category: 'attraction' },\n          { label: 'Phi Phi Islands', aliases: ['พีพี', 'island tour'], category: 'experience' },\n          { label: 'Big Buddha', aliases: ['พระใหญ่', 'hilltop buddha'], category: 'attraction' },\n          { label: 'Old Town Phuket', aliases: ['เมืองเก่าภูเก็ต', 'sino-portuguese'], category: 'district' },\n          { label: 'Bangla Road', aliases: ['บางลา', 'nightlife'], category: 'district' },\n          { label: 'Island Hopping', aliases: ['james bond island', 'similan'], category: 'experience' },\n          { label: 'Kata Beach', aliases: ['กะตะ', 'surfing'], category: 'attraction' },\n          { label: 'Thai Boxing', aliases: ['muay thai', 'มวยไทย'], category: 'experience' },\n          { label: 'Promthep Cape', aliases: ['แหลมพรหมเทพ', 'sunset point'], category: 'attraction' },\n          { label: 'Weekend Market', aliases: ['naka market', 'ตลาดนัด'], category: 'food' }\n        ]\n      },\n      // Singapore tags\n      {\n        cityId: 27,\n        tags: [\n          { label: 'Marina Bay Sands', aliases: ['mbs', 'skypark'], category: 'attraction' },\n          { label: 'Gardens by the Bay', aliases: ['supertrees', 'cloud forest'], category: 'attraction' },\n          { label: 'Sentosa Island', aliases: ['universal studios', 'beach'], category: 'experience' },\n          { label: 'Orchard Road', aliases: ['shopping belt'], category: 'district' },\n          { label: 'Chinatown', aliases: ['牛车水', 'temple street'], category: 'district' },\n          { label: 'Little India', aliases: ['tekka', 'serangoon'], category: 'district' },\n          { label: 'Hawker Centers', aliases: ['maxwell', 'lau pa sat'], category: 'food' },\n          { label: 'Singapore Zoo', aliases: ['night safari', 'river safari'], category: 'attraction' },\n          { label: 'Clarke Quay', aliases: ['boat quay', 'nightlife'], category: 'district' },\n          { label: 'Merlion Park', aliases: ['merlion statue'], category: 'attraction' },\n          { label: 'Arab Street', aliases: ['kampong glam', 'haji lane'], category: 'district' },\n          { label: 'Singapore Flyer', aliases: ['observation wheel'], category: 'attraction' }\n        ]\n      },\n      // Sydney tags\n      {\n        cityId: 28,\n        tags: [\n          { label: 'Sydney Opera House', aliases: ['opera house'], category: 'attraction' },\n          { label: 'Harbour Bridge', aliases: ['bridge climb'], category: 'attraction' },\n          { label: 'Bondi Beach', aliases: ['bondi to coogee'], category: 'attraction' },\n          { label: 'The Rocks', aliases: ['historic area'], category: 'district' },\n          { label: 'Darling Harbour', aliases: ['harbour'], category: 'district' },\n          { label: 'Royal Botanic Gardens', aliases: ['gardens'], category: 'attraction' },\n          { label: 'Manly Beach', aliases: ['ferry to manly'], category: 'attraction' },\n          { label: 'Blue Mountains', aliases: ['three sisters', 'katoomba'], category: 'experience' },\n          { label: 'Taronga Zoo', aliases: ['zoo'], category: 'attraction' },\n          { label: 'Circular Quay', aliases: ['ferry terminal'], category: 'district' },\n          { label: 'Surry Hills', aliases: ['trendy suburb'], category: 'district' },\n          { label: 'Fish Market', aliases: ['seafood market'], category: 'food' }\n        ]\n      },\n      // Melbourne tags\n      {\n        cityId: 29,\n        tags: [\n          { label: 'Federation Square', aliases: ['fed square'], category: 'attraction' },\n          { label: 'Great Ocean Road', aliases: ['12 apostles'], category: 'experience' },\n          { label: 'Queen Victoria Market', aliases: ['vic market'], category: 'food' },\n          { label: 'Laneways & Street Art', aliases: ['hosier lane', 'graffiti'], category: 'district' },\n          { label: 'Melbourne Cricket Ground', aliases: ['mcg', 'sports'], category: 'attraction' },\n          { label: 'St Kilda Beach', aliases: ['penguins', 'luna park'], category: 'attraction' },\n          { label: 'Royal Botanic Gardens', aliases: ['gardens'], category: 'attraction' },\n          { label: 'Coffee Culture', aliases: ['laneway cafes'], category: 'food' },\n          { label: 'Fitzroy', aliases: ['hipster suburb'], category: 'district' },\n          { label: 'Eureka Skydeck', aliases: ['skydeck 88'], category: 'attraction' },\n          { label: 'Phillip Island', aliases: ['penguin parade'], category: 'experience' },\n          { label: 'Yarra Valley', aliases: ['wine region'], category: 'experience' }\n        ]\n      },\n      // Beijing tags\n      {\n        cityId: 30,\n        tags: [\n          { label: 'Great Wall', aliases: ['长城', 'mutianyu', 'badaling'], category: 'attraction' },\n          { label: 'Forbidden City', aliases: ['故宫', 'palace museum'], category: 'attraction' },\n          { label: 'Temple of Heaven', aliases: ['天坛'], category: 'attraction' },\n          { label: 'Summer Palace', aliases: ['颐和园'], category: 'attraction' },\n          { label: 'Tiananmen Square', aliases: ['天安门广场'], category: 'attraction' },\n          { label: 'Hutong Tours', aliases: ['胡同', 'rickshaw'], category: 'experience' },\n          { label: 'Peking Duck', aliases: ['北京烤鸭', 'roast duck'], category: 'food' },\n          { label: 'Wangfujing Street', aliases: ['王府井', 'shopping'], category: 'district' },\n          { label: 'Panjiayuan Market', aliases: ['潘家园', 'antique market'], category: 'district' },\n          { label: '798 Art District', aliases: ['art zone'], category: 'district' },\n          { label: 'Lama Temple', aliases: ['雍和宫'], category: 'attraction' },\n          { label: 'Olympic Park', aliases: ['birds nest', '鸟巢'], category: 'attraction' }\n        ]\n      },\n      // Shanghai tags\n      {\n        cityId: 31,\n        tags: [\n          { label: 'The Bund', aliases: ['外滩', 'waterfront'], category: 'attraction' },\n          { label: 'Yu Garden', aliases: ['豫园', 'yuyuan'], category: 'attraction' },\n          { label: 'Oriental Pearl Tower', aliases: ['东方明珠塔'], category: 'attraction' },\n          { label: 'Shanghai Tower', aliases: ['上海中心大厦', 'skyscraper'], category: 'attraction' },\n          { label: 'Nanjing Road', aliases: ['南京路', 'shopping street'], category: 'district' },\n          { label: 'French Concession', aliases: ['法租界', 'xintiandi'], category: 'district' },\n          { label: 'Zhujiajiao Water Town', aliases: ['朱家角', 'venice of shanghai'], category: 'experience' },\n          { label: 'Shanghai Museum', aliases: ['上海博物馆'], category: 'experience' },\n          { label: 'Tianzifang', aliases: ['田子坊', 'art district'], category: 'district' },\n          { label: 'Xiaolongbao', aliases: ['小笼包', 'soup dumplings'], category: 'food' },\n          { label: 'Pudong Skyline', aliases: ['浦东', 'lujiazui'], category: 'attraction' },\n          { label: 'Jade Buddha Temple', aliases: ['玉佛寺'], category: 'attraction' }\n        ]\n      },\n      // Hong Kong tags\n      {\n        cityId: 32,\n        tags: [\n          { label: 'Victoria Peak', aliases: ['太平山', 'peak tram'], category: 'attraction' },\n          { label: 'Star Ferry', aliases: ['天星小輪', 'harbour crossing'], category: 'experience' },\n          { label: 'Temple Street Market', aliases: ['廟街', 'night market'], category: 'district' },\n          { label: 'Big Buddha', aliases: ['天壇大佛', 'lantau island'], category: 'attraction' },\n          { label: 'Victoria Harbour', aliases: ['維多利亞港', 'symphony of lights'], category: 'attraction' },\n          { label: 'Central District', aliases: ['中環', 'ifc mall'], category: 'district' },\n          { label: 'Dim Sum', aliases: ['點心', 'yum cha'], category: 'food' },\n          { label: 'Ladies Market', aliases: ['女人街', 'mong kok'], category: 'district' },\n          { label: 'Ocean Park', aliases: ['海洋公園'], category: 'attraction' },\n          { label: 'Disneyland', aliases: ['迪士尼樂園'], category: 'attraction' },\n          { label: 'Lan Kwai Fong', aliases: ['蘭桂坊', 'nightlife'], category: 'district' },\n          { label: 'Wong Tai Sin Temple', aliases: ['黃大仙祠'], category: 'attraction' }\n        ]\n      },\n      // Dubai tags\n      {\n        cityId: 33,\n        tags: [\n          { label: 'Burj Khalifa', aliases: ['tallest building', 'برج خليفة'], category: 'attraction' },\n          { label: 'Dubai Mall', aliases: ['shopping', 'aquarium'], category: 'attraction' },\n          { label: 'Desert Safari', aliases: ['dune bashing', 'camel ride'], category: 'experience' },\n          { label: 'Dubai Marina', aliases: ['marina walk', 'jbr beach'], category: 'district' },\n          { label: 'Gold Souk', aliases: ['gold market', 'سوق الذهب'], category: 'district' },\n          { label: 'Palm Jumeirah', aliases: ['palm island', 'atlantis'], category: 'attraction' },\n          { label: 'Dubai Fountain', aliases: ['fountain show'], category: 'attraction' },\n          { label: 'Burj Al Arab', aliases: ['7-star hotel', 'برج العرب'], category: 'attraction' },\n          { label: 'Old Dubai', aliases: ['deira', 'bur dubai'], category: 'district' },\n          { label: 'Dubai Creek', aliases: ['abra ride', 'خور دبي'], category: 'experience' },\n          { label: 'Ski Dubai', aliases: ['indoor skiing'], category: 'experience' },\n          { label: 'Global Village', aliases: ['القرية العالمية'], category: 'experience' }\n        ]\n      },\n      // Abu Dhabi tags\n      {\n        cityId: 34,\n        tags: [\n          { label: 'Sheikh Zayed Mosque', aliases: ['grand mosque', 'مسجد الشيخ زايد'], category: 'attraction' },\n          { label: 'Louvre Abu Dhabi', aliases: ['museum', 'اللوفر أبوظبي'], category: 'experience' },\n          { label: 'Ferrari World', aliases: ['theme park', 'عالم فيراري'], category: 'attraction' },\n          { label: 'Emirates Palace', aliases: ['luxury hotel', 'قصر الإمارات'], category: 'attraction' },\n          { label: 'Corniche Beach', aliases: ['waterfront', 'كورنيش'], category: 'attraction' },\n          { label: 'Yas Island', aliases: ['yas marina', 'جزيرة ياس'], category: 'district' },\n          { label: 'Qasr Al Watan', aliases: ['presidential palace', 'قصر الوطن'], category: 'attraction' },\n          { label: 'Heritage Village', aliases: ['traditional village'], category: 'experience' },\n          { label: 'Mangrove Kayaking', aliases: ['eco tour'], category: 'experience' },\n          { label: 'Saadiyat Island', aliases: ['beach clubs', 'جزيرة السعديات'], category: 'attraction' }\n        ]\n      },\n      // Istanbul tags\n      {\n        cityId: 35,\n        tags: [\n          { label: 'Hagia Sophia', aliases: ['ayasofya', 'آيا صوفيا'], category: 'attraction' },\n          { label: 'Blue Mosque', aliases: ['sultanahmet', 'sultan ahmed'], category: 'attraction' },\n          { label: 'Topkapi Palace', aliases: ['topkapı sarayı'], category: 'attraction' },\n          { label: 'Grand Bazaar', aliases: ['kapalıçarşı', 'covered bazaar'], category: 'district' },\n          { label: 'Bosphorus Cruise', aliases: ['boğaziçi', 'strait cruise'], category: 'experience' },\n          { label: 'Galata Tower', aliases: ['galata kulesi'], category: 'attraction' },\n          { label: 'Basilica Cistern', aliases: ['yerebatan sarnıcı'], category: 'attraction' },\n          { label: 'Spice Bazaar', aliases: ['mısır çarşısı', 'egyptian bazaar'], category: 'district' },\n          { label: 'Taksim Square', aliases: ['istiklal street', 'beyoğlu'], category: 'district' },\n          { label: 'Turkish Bath', aliases: ['hamam', 'حمام'], category: 'experience' },\n          { label: 'Dolmabahce Palace', aliases: ['dolmabahçe sarayı'], category: 'attraction' },\n          { label: 'Turkish Breakfast', aliases: ['kahvaltı', 'simit'], category: 'food' }\n        ]\n      },\n      // Berlin tags\n      {\n        cityId: 36,\n        tags: [\n          { label: 'Brandenburg Gate', aliases: ['brandenburger tor'], category: 'attraction' },\n          { label: 'Berlin Wall Memorial', aliases: ['east side gallery'], category: 'attraction' },\n          { label: 'Museum Island', aliases: ['museumsinsel', 'pergamon'], category: 'experience' },\n          { label: 'Reichstag', aliases: ['bundestag', 'parliament'], category: 'attraction' },\n          { label: 'Checkpoint Charlie', aliases: ['cold war'], category: 'attraction' },\n          { label: 'Tiergarten', aliases: ['central park'], category: 'attraction' },\n          { label: 'Alexanderplatz', aliases: ['tv tower', 'fernsehturm'], category: 'district' },\n          { label: 'Potsdamer Platz', aliases: ['sony center'], category: 'district' },\n          { label: 'Kreuzberg', aliases: ['turkish market', 'hipster'], category: 'district' },\n          { label: 'Berlin Cathedral', aliases: ['berliner dom'], category: 'attraction' },\n          { label: 'Hackescher Markt', aliases: ['courtyards'], category: 'district' },\n          { label: 'Techno Clubs', aliases: ['berghain', 'nightlife'], category: 'experience' }\n        ]\n      },\n      // Munich tags\n      {\n        cityId: 37,\n        tags: [\n          { label: 'Marienplatz', aliases: ['glockenspiel', 'new town hall'], category: 'attraction' },\n          { label: 'Neuschwanstein Castle', aliases: ['fairy tale castle', 'disney castle'], category: 'attraction' },\n          { label: 'Oktoberfest', aliases: ['beer festival', 'wiesn'], category: 'experience' },\n          { label: 'English Garden', aliases: ['englischer garten', 'surfers'], category: 'attraction' },\n          { label: 'BMW Museum', aliases: ['bmw welt'], category: 'experience' },\n          { label: 'Hofbräuhaus', aliases: ['beer hall'], category: 'food' },\n          { label: 'Viktualienmarkt', aliases: ['food market'], category: 'food' },\n          { label: 'Nymphenburg Palace', aliases: ['schloss nymphenburg'], category: 'attraction' },\n          { label: 'Deutsches Museum', aliases: ['science museum'], category: 'experience' },\n          { label: 'Olympic Park', aliases: ['olympiapark'], category: 'attraction' },\n          { label: 'Dachau Memorial', aliases: ['concentration camp'], category: 'experience' }\n        ]\n      },\n      // Athens tags\n      {\n        cityId: 38,\n        tags: [\n          { label: 'Acropolis', aliases: ['ακρόπολη', 'parthenon'], category: 'attraction' },\n          { label: 'Ancient Agora', aliases: ['αγορά', 'marketplace'], category: 'attraction' },\n          { label: 'Plaka District', aliases: ['πλάκα', 'old town'], category: 'district' },\n          { label: 'National Gardens', aliases: ['εθνικός κήπος'], category: 'attraction' },\n          { label: 'Syntagma Square', aliases: ['σύνταγμα', 'parliament'], category: 'district' },\n          { label: 'Mount Lycabettus', aliases: ['λυκαβηττός', 'cable car'], category: 'attraction' },\n          { label: 'National Archaeological Museum', aliases: ['museum'], category: 'experience' },\n          { label: 'Monastiraki', aliases: ['μοναστηράκι', 'flea market'], category: 'district' },\n          { label: 'Temple of Olympian Zeus', aliases: ['ολυμπιείον'], category: 'attraction' },\n          { label: 'Psyrri', aliases: ['ψυρρή', 'nightlife'], category: 'district' },\n          { label: 'Greek Tavernas', aliases: ['ταβέρνα', 'souvlaki'], category: 'food' }\n        ]\n      },\n      // Santorini tags\n      {\n        cityId: 39,\n        tags: [\n          { label: 'Oia Sunset', aliases: ['οία', 'blue domes'], category: 'attraction' },\n          { label: 'Red Beach', aliases: ['κόκκινη παραλία'], category: 'attraction' },\n          { label: 'Fira Town', aliases: ['φηρά', 'capital'], category: 'district' },\n          { label: 'Wine Tasting', aliases: ['santo wines', 'assyrtiko'], category: 'experience' },\n          { label: 'Caldera Views', aliases: ['καλδέρα', 'volcano view'], category: 'attraction' },\n          { label: 'Akrotiri', aliases: ['ακρωτήρι', 'ancient ruins'], category: 'attraction' },\n          { label: 'Black Beach', aliases: ['περίσσα', 'kamari'], category: 'attraction' },\n          { label: 'Cave Hotels', aliases: ['cliff hotels'], category: 'experience' },\n          { label: 'Boat Tours', aliases: ['volcano tour', 'hot springs'], category: 'experience' },\n          { label: 'Amoudi Bay', aliases: ['αμούδι', 'seafood'], category: 'food' }\n        ]\n      }\n    ];\n    \n    let tagIdCounter = 1;\n    cityTagsData.forEach(cityData => {\n      cityData.tags.forEach((tagData) => {\n        const tagId = tagIdCounter++;\n        const tag: CityTag = {\n          id: tagId,\n          cityId: cityData.cityId,\n          label: tagData.label,\n          normalizedLabel: tagData.label.toLowerCase().replace(/[\\s-_]+/g, ''),\n          source: 'curated',\n          score: '1.00',\n          placeIds: [],\n          metadata: { category: tagData.category },\n          usageCount: 0,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        this.cityTags.set(tagId, tag);\n        \n        // Add aliases\n        tagData.aliases.forEach((aliasText, aliasIndex) => {\n          const alias: TagAlias = {\n            id: tagId * 100 + aliasIndex,\n            tagId,\n            alias: aliasText,\n            normalizedAlias: aliasText.toLowerCase().replace(/[\\s-_]+/g, ''),\n            language: aliasText.match(/[\\u3040-\\u309f\\u30a0-\\u30ff\\u4e00-\\u9faf]/) ? 'ja' : 'en',\n            aliasType: aliasText.length <= 3 ? 'abbreviation' : 'translation',\n            confidence: '1.00',\n            createdAt: new Date()\n          };\n          this.tagAliases.set(alias.id, alias);\n        });\n      });\n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      email: insertUser.email || null,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Conversation operations\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    return this.conversations.get(id);\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const conversationId = insertConversation.conversationId || randomUUID();\n    const numericId = Math.max(...Array.from(this.conversations.values()).map(c => c.id || 0), 0) + 1;\n    const conversation: Conversation = {\n      id: numericId,\n      conversationId: conversationId,\n      userId: insertConversation.userId || null,\n      destination: insertConversation.destination || null,\n      days: insertConversation.days || null,\n      people: insertConversation.people || null,\n      theme: insertConversation.theme || null,\n      selectedTags: insertConversation.selectedTags || null,\n      status: insertConversation.status || \"active\",\n      messages: insertConversation.messages as ChatMessage[] || [],\n      refinementCount: insertConversation.refinementCount || 0,\n      packagesGenerated: insertConversation.packagesGenerated || false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    // Use conversationId as the key for consistent lookups\n    this.conversations.set(conversationId, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return undefined;\n    \n    const updated = { ...conversation, ...updates };\n    this.conversations.set(id, updated);\n    return updated;\n  }\n\n  async getConversationsByUser(userId: string): Promise<Conversation[]> {\n    return Array.from(this.conversations.values()).filter(\n      (conv) => conv.userId === userId\n    );\n  }\n\n  // Travel package operations\n  async getTravelPackage(id: string): Promise<TravelPackage | undefined> {\n    return this.travelPackages.get(id);\n  }\n\n  async createTravelPackage(insertPackage: InsertTravelPackage): Promise<TravelPackage> {\n    const id = randomUUID();\n    const travelPackage: TravelPackage = {\n      id,\n      conversationId: insertPackage.conversationId || null,\n      name: insertPackage.name,\n      type: insertPackage.type,\n      destination: insertPackage.destination,\n      days: insertPackage.days,\n      budget: insertPackage.budget,\n      description: insertPackage.description || null,\n      route: insertPackage.route || null,\n      accommodation: insertPackage.accommodation || null,\n      diningCount: insertPackage.diningCount || null,\n      attractionCount: insertPackage.attractionCount || null,\n      highlights: insertPackage.highlights || [],\n      itinerary: insertPackage.itinerary || [],\n      createdAt: new Date(),\n    };\n    this.travelPackages.set(id, travelPackage);\n    return travelPackage;\n  }\n\n  async updateTravelPackage(id: string, updates: Partial<TravelPackage>): Promise<TravelPackage | undefined> {\n    const travelPackage = this.travelPackages.get(id);\n    if (!travelPackage) return undefined;\n    \n    const updated = { ...travelPackage, ...updates };\n    this.travelPackages.set(id, updated);\n    return updated;\n  }\n\n  async getTravelPackagesByConversation(conversationId: string): Promise<TravelPackage[]> {\n    return Array.from(this.travelPackages.values()).filter(\n      (pkg) => pkg.conversationId === conversationId\n    );\n  }\n\n  // POI operations\n  async getPOI(id: string): Promise<POI | undefined> {\n    return this.pois.get(id);\n  }\n\n  async getPOIByPlaceId(placeId: string): Promise<POI | undefined> {\n    return Array.from(this.pois.values()).find(\n      (poi) => poi.placeId === placeId\n    );\n  }\n\n  async createPOI(insertPOI: InsertPOI): Promise<POI> {\n    const id = randomUUID();\n    const poi: POI = {\n      id,\n      placeId: insertPOI.placeId,\n      name: insertPOI.name,\n      rating: insertPOI.rating || null,\n      userRatingsTotal: insertPOI.userRatingsTotal || null,\n      priceLevel: insertPOI.priceLevel || null,\n      types: insertPOI.types || [],\n      address: insertPOI.address || null,\n      location: insertPOI.location || null,\n      photoRef: insertPOI.photoRef || null,\n      openNow: insertPOI.openNow || null,\n      createdAt: new Date(),\n    };\n    this.pois.set(id, poi);\n    return poi;\n  }\n\n  async updatePOI(id: string, updates: Partial<POI>): Promise<POI | undefined> {\n    const poi = this.pois.get(id);\n    if (!poi) return undefined;\n    \n    const updated = { ...poi, ...updates };\n    this.pois.set(id, updated);\n    return updated;\n  }\n\n  // City operations\n  async getCityByName(cityName: string, countryCode: string): Promise<City | undefined> {\n    return Array.from(this.cities.values()).find(\n      city => city.cityName.toLowerCase() === cityName.toLowerCase() && \n              city.countryCode === countryCode\n    );\n  }\n\n  // City tag operations\n  async getCityTags(cityId: number): Promise<CityTag[]> {\n    return Array.from(this.cityTags.values())\n      .filter(tag => tag.cityId === cityId && tag.isActive)\n      .sort((a, b) => Number(b.score) - Number(a.score));\n  }\n\n  async getCityTag(id: number): Promise<CityTag | undefined> {\n    return this.cityTags.get(id);\n  }\n\n  async createCityTag(tag: InsertCityTag): Promise<CityTag> {\n    const id = ++this.cityTagCounter;\n    const newTag: CityTag = {\n      id,\n      ...tag,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.cityTags.set(id, newTag);\n    return newTag;\n  }\n\n  async updateCityTag(id: number, updates: Partial<CityTag>): Promise<CityTag | undefined> {\n    const tag = this.cityTags.get(id);\n    if (!tag) return undefined;\n    \n    const updated = { ...tag, ...updates, updatedAt: new Date() };\n    this.cityTags.set(id, updated);\n    return updated;\n  }\n\n  async incrementTagUsage(tagId: number): Promise<void> {\n    const tag = this.cityTags.get(tagId);\n    if (tag) {\n      await this.updateCityTag(tagId, { \n        usageCount: tag.usageCount + 1,\n        score: (Number(tag.score) + 0.01).toFixed(2) // Slightly increase score with usage\n      });\n    }\n  }\n\n  // Tag alias operations\n  async getTagAliasesByCityId(cityId: number): Promise<TagAlias[]> {\n    const cityTagIds = Array.from(this.cityTags.values())\n      .filter(tag => tag.cityId === cityId)\n      .map(tag => tag.id);\n    \n    return Array.from(this.tagAliases.values())\n      .filter(alias => cityTagIds.includes(alias.tagId));\n  }\n\n  async getTagAliases(tagId: number): Promise<TagAlias[]> {\n    return Array.from(this.tagAliases.values())\n      .filter(alias => alias.tagId === tagId);\n  }\n\n  async createTagAlias(alias: InsertTagAlias): Promise<TagAlias> {\n    const id = Math.max(...Array.from(this.tagAliases.keys()), 0) + 1;\n    const newAlias: TagAlias = {\n      id,\n      ...alias,\n      createdAt: new Date()\n    };\n    this.tagAliases.set(id, newAlias);\n    return newAlias;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":72176},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, serial, text, varchar, decimal, boolean, timestamp, jsonb, index, uniqueIndex, integer } from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\n\n// Cities table with Google Places integration\nexport const cities = pgTable('cities', {\n  id: serial('id').primaryKey(),\n  googlePlaceId: varchar('google_place_id', { length: 255 }).notNull().unique(),\n  cityName: varchar('city_name', { length: 255 }).notNull(),\n  countryCode: varchar('country_code', { length: 2 }).notNull(), // ISO-2 code\n  countryName: varchar('country_name', { length: 100 }).notNull(),\n  adminLevel1: varchar('admin_level_1', { length: 255 }), // State/Province/Prefecture\n  latitude: decimal('latitude', { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal('longitude', { precision: 11, scale: 8 }).notNull(),\n  isCurated: boolean('is_curated').default(false).notNull(), // True for our hand-picked cities\n  popularity: integer('popularity').default(0), // For ranking in suggestions\n  metadata: jsonb('metadata').$type<{\n    formattedAddress?: string;\n    types?: string[];\n    photoReferences?: string[];\n    timezone?: string;\n    population?: number;\n  }>(),\n  lastValidated: timestamp('last_validated'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull()\n}, (table) => ({\n  countryCodeIdx: index('idx_country_code').on(table.countryCode),\n  cityNameIdx: index('idx_city_name').on(table.cityName),\n  isCuratedIdx: index('idx_is_curated').on(table.isCurated),\n  popularityIdx: index('idx_popularity').on(table.popularity)\n}));\n\n// Cache table for Google Places API responses\nexport const placesCache = pgTable('places_cache', {\n  id: serial('id').primaryKey(),\n  cacheKey: varchar('cache_key', { length: 500 }).notNull().unique(),\n  responseData: jsonb('response_data').notNull(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull()\n}, (table) => ({\n  expiresAtIdx: index('idx_expires_at').on(table.expiresAt)\n}));\n\n// Travel packages table (expanded)\nexport const travelPackages = pgTable('travel_packages', {\n  id: serial('id').primaryKey(),\n  conversationId: varchar('conversation_id', { length: 255 }).notNull(),\n  name: varchar('name', { length: 255 }).notNull(), // Alternative to packageName\n  packageName: varchar('package_name', { length: 255 }).notNull(),\n  type: varchar('type', { length: 50 }).notNull(), // Alternative to packageType\n  packageType: varchar('package_type', { length: 50 }).notNull(),\n  destination: varchar('destination', { length: 255 }).notNull(),\n  cityId: integer('city_id').references(() => cities.id), // Link to cities table\n  days: integer('days').notNull(),\n  people: integer('people'),\n  theme: varchar('theme', { length: 100 }),\n  budget: varchar('budget', { length: 100 }),\n  description: text('description'),\n  route: text('route'),\n  accommodation: text('accommodation'),\n  diningCount: integer('dining_count'),\n  attractionCount: integer('attraction_count'),\n  highlights: jsonb('highlights').$type<string[]>(),\n  itinerary: jsonb('itinerary'),\n  createdAt: timestamp('created_at').defaultNow().notNull()\n}, (table) => ({\n  conversationIdIdx: index('idx_conversation_id').on(table.conversationId)\n}));\n\n// Quarantined table for user tag candidates (NOT part of canonical DB)\n// These are NEVER auto-promoted - only after human review\nexport const userTagCandidates = pgTable('user_tag_candidates', {\n  id: serial('id').primaryKey(),\n  tagRaw: text('tag_raw').notNull(),\n  tagNorm: varchar('tag_norm', { length: 255 }).notNull(),\n  cityId: integer('city_id').references(() => cities.id),\n  category: varchar('category', { length: 50 }),\n  count: integer('count').default(1).notNull(),\n  lastSeenAt: timestamp('last_seen_at').defaultNow().notNull(),\n  samplePois: jsonb('sample_pois').$type<string[]>(),\n  expiresAt: timestamp('expires_at').notNull(), // 30-day TTL\n  status: varchar('status', { length: 20 }).default('quarantined').notNull(),\n  reviewedAt: timestamp('reviewed_at'),\n  reviewedBy: varchar('reviewed_by', { length: 100 })\n}, (table) => ({\n  expiresIdx: index('idx_tag_candidates_expires').on(table.expiresAt),\n  statusIdx: index('idx_tag_candidates_status').on(table.status),\n  normIdx: index('idx_tag_candidates_norm').on(table.tagNorm)\n}));\n\n// Users table (minimal for now)\nexport const users = pgTable('users', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  username: varchar('username', { length: 100 }).notNull().unique(),\n  email: varchar('email', { length: 255 }),\n  createdAt: timestamp('created_at').defaultNow().notNull()\n});\n\n// POIs table (Points of Interest from Google Places)\nexport const pois = pgTable('pois', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  placeId: varchar('place_id', { length: 255 }).notNull().unique(),\n  name: varchar('name', { length: 255 }).notNull(),\n  rating: decimal('rating', { precision: 2, scale: 1 }),\n  userRatingsTotal: integer('user_ratings_total'),\n  priceLevel: integer('price_level'),\n  types: jsonb('types').$type<string[]>(),\n  address: text('address'),\n  location: jsonb('location').$type<{ lat: number; lng: number }>(),\n  photoRef: varchar('photo_ref', { length: 500 }),\n  openNow: boolean('open_now'),\n  createdAt: timestamp('created_at').defaultNow().notNull()\n}, (table) => ({\n  placeIdIdx: index('idx_place_id').on(table.placeId)\n}));\n\n// City Tags table - localized attractions/experiences per city\nexport const cityTags = pgTable('city_tags', {\n  id: serial('id').primaryKey(),\n  cityId: integer('city_id').references(() => cities.id).notNull(),\n  label: varchar('label', { length: 255 }).notNull(), // Display name\n  normalizedLabel: varchar('normalized_label', { length: 255 }).notNull(), // Lowercase, no spaces\n  source: varchar('source', { length: 50 }).notNull(), // 'curated', 'places_enrich', 'user_add'\n  score: decimal('score', { precision: 5, scale: 2 }).default('1.00'), // Popularity/relevance score\n  placeIds: jsonb('place_ids').$type<string[]>(), // Sample Google Place IDs\n  metadata: jsonb('metadata').$type<{\n    category?: string; // 'attraction', 'district', 'experience', 'food'\n    description?: string;\n    photoUrl?: string;\n    avgRating?: number;\n    reviewCount?: number;\n  }>(),\n  usageCount: integer('usage_count').default(0), // Track how often selected\n  isActive: boolean('is_active').default(true),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull()\n}, (table) => ({\n  cityIdIdx: index('idx_tag_city_id').on(table.cityId),\n  normalizedLabelIdx: index('idx_normalized_label').on(table.normalizedLabel),\n  sourceIdx: index('idx_tag_source').on(table.source),\n  scoreIdx: index('idx_tag_score').on(table.score),\n  uniqueCityTag: uniqueIndex('idx_unique_city_tag').on(table.cityId, table.normalizedLabel)\n}));\n\n// Tag Aliases table - multi-lingual and variations\nexport const tagAliases = pgTable('tag_aliases', {\n  id: serial('id').primaryKey(),\n  tagId: integer('tag_id').references(() => cityTags.id).notNull(),\n  alias: varchar('alias', { length: 255 }).notNull(),\n  normalizedAlias: varchar('normalized_alias', { length: 255 }).notNull(),\n  language: varchar('language', { length: 10 }), // ISO language code (e.g., 'ja', 'en')\n  aliasType: varchar('alias_type', { length: 50 }), // 'synonym', 'abbreviation', 'translation', 'typo'\n  confidence: decimal('confidence', { precision: 3, scale: 2 }).default('1.00'), // Confidence score\n  createdAt: timestamp('created_at').defaultNow().notNull()\n}, (table) => ({\n  tagIdIdx: index('idx_alias_tag_id').on(table.tagId),\n  normalizedAliasIdx: index('idx_normalized_alias').on(table.normalizedAlias),\n  uniqueAlias: uniqueIndex('idx_unique_alias').on(table.tagId, table.normalizedAlias)\n}));\n\n// Tag Embeddings table - for semantic similarity matching\nexport const tagEmbeddings = pgTable('tag_embeddings', {\n  id: serial('id').primaryKey(),\n  tagId: integer('tag_id').references(() => cityTags.id).notNull().unique(),\n  embedding: jsonb('embedding').$type<number[]>().notNull(), // Vector embedding\n  model: varchar('model', { length: 100 }).notNull(), // Model used for embedding\n  createdAt: timestamp('created_at').defaultNow().notNull()\n}, (table) => ({\n  tagIdIdx: index('idx_embedding_tag_id').on(table.tagId)\n}));\n\n// User Tag Selections - track what users select\nexport const userTagSelections = pgTable('user_tag_selections', {\n  id: serial('id').primaryKey(),\n  conversationId: varchar('conversation_id', { length: 255 }).notNull(),\n  tagId: integer('tag_id').references(() => cityTags.id),\n  customText: varchar('custom_text', { length: 255 }), // For user-entered custom tags\n  isCustom: boolean('is_custom').default(false),\n  createdAt: timestamp('created_at').defaultNow().notNull()\n}, (table) => ({\n  conversationIdIdx: index('idx_selection_conversation_id').on(table.conversationId),\n  tagIdIdx: index('idx_selection_tag_id').on(table.tagId)\n}));\n\n// Conversations table (expanded)\nexport const conversations = pgTable('conversations', {\n  id: serial('id').primaryKey(),\n  conversationId: varchar('conversation_id', { length: 255 }).notNull().unique(),\n  userId: varchar('user_id', { length: 255 }),\n  destination: varchar('destination', { length: 255 }),\n  days: integer('days'),\n  people: integer('people'),\n  theme: varchar('theme', { length: 100 }),\n  selectedTags: jsonb('selected_tags').$type<string[]>(), // Store selected tag labels\n  status: varchar('status', { length: 50 }).default('active'),\n  messages: jsonb('messages').$type<ChatMessage[]>().notNull(),\n  refinementCount: integer('refinement_count').default(0),\n  packagesGenerated: boolean('packages_generated').default(false),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull()\n});\n\n// Relations\nexport const citiesRelations = relations(cities, ({ many }) => ({\n  travelPackages: many(travelPackages),\n  cityTags: many(cityTags)\n}));\n\nexport const travelPackagesRelations = relations(travelPackages, ({ one }) => ({\n  city: one(cities, {\n    fields: [travelPackages.cityId],\n    references: [cities.id]\n  })\n}));\n\nexport const cityTagsRelations = relations(cityTags, ({ one, many }) => ({\n  city: one(cities, {\n    fields: [cityTags.cityId],\n    references: [cities.id]\n  }),\n  aliases: many(tagAliases),\n  embedding: one(tagEmbeddings, {\n    fields: [cityTags.id],\n    references: [tagEmbeddings.tagId]\n  }),\n  selections: many(userTagSelections)\n}));\n\nexport const tagAliasesRelations = relations(tagAliases, ({ one }) => ({\n  tag: one(cityTags, {\n    fields: [tagAliases.tagId],\n    references: [cityTags.id]\n  })\n}));\n\nexport const tagEmbeddingsRelations = relations(tagEmbeddings, ({ one }) => ({\n  tag: one(cityTags, {\n    fields: [tagEmbeddings.tagId],\n    references: [cityTags.id]\n  })\n}));\n\nexport const userTagSelectionsRelations = relations(userTagSelections, ({ one }) => ({\n  tag: one(cityTags, {\n    fields: [userTagSelections.tagId],\n    references: [cityTags.id]\n  })\n}));\n\n// Insert schemas and types for new tables\nexport const insertCityTagSchema = createInsertSchema(cityTags).omit({ id: true, createdAt: true, updatedAt: true });\nexport type InsertCityTag = z.infer<typeof insertCityTagSchema>;\nexport type CityTag = typeof cityTags.$inferSelect;\n\nexport const insertTagAliasSchema = createInsertSchema(tagAliases).omit({ id: true, createdAt: true });\nexport type InsertTagAlias = z.infer<typeof insertTagAliasSchema>;\nexport type TagAlias = typeof tagAliases.$inferSelect;\n\nexport const insertTagEmbeddingSchema = createInsertSchema(tagEmbeddings).omit({ id: true, createdAt: true });\nexport type InsertTagEmbedding = z.infer<typeof insertTagEmbeddingSchema>;\nexport type TagEmbedding = typeof tagEmbeddings.$inferSelect;\n\nexport const insertUserTagSelectionSchema = createInsertSchema(userTagSelections).omit({ id: true, createdAt: true });\nexport type InsertUserTagSelection = z.infer<typeof insertUserTagSelectionSchema>;\nexport type UserTagSelection = typeof userTagSelections.$inferSelect;\n\n// Export City types\nexport type City = typeof cities.$inferSelect;\nexport type InsertCity = typeof cities.$inferInsert;\n\n// Chat message type\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp?: Date;\n}\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true\n});\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const insertPOISchema = createInsertSchema(pois).omit({\n  id: true,\n  createdAt: true\n});\nexport type InsertPOI = z.infer<typeof insertPOISchema>;\nexport type POI = typeof pois.$inferSelect;\n\nexport const insertCitySchema = createInsertSchema(cities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertPlacesCacheSchema = createInsertSchema(placesCache).omit({\n  id: true,\n  createdAt: true\n});\nexport type InsertPlacesCache = z.infer<typeof insertPlacesCacheSchema>;\nexport type PlacesCache = typeof placesCache.$inferSelect;\n\nexport const insertTravelPackageSchema = createInsertSchema(travelPackages).omit({\n  id: true,\n  createdAt: true\n});\nexport type InsertTravelPackage = z.infer<typeof insertTravelPackageSchema>;\nexport type TravelPackage = typeof travelPackages.$inferSelect;\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;","size_bytes":13744},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Chat from \"@/pages/Chat\";\nimport Packages from \"@/pages/Packages\";\nimport { ItineraryDetail } from \"@/pages/ItineraryDetail\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction HomeRedirect() {\n  const [, setLocation] = useLocation();\n  useEffect(() => {\n    setLocation(\"/chat\");\n  }, [setLocation]);\n  return null;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomeRedirect} />\n      <Route path=\"/chat\" component={Chat} />\n      <Route path=\"/packages\" component={Packages} />\n      <Route path=\"/itinerary/:id\" component={ItineraryDetail} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1173},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Safe area padding for mobile devices */\n@layer utilities {\n  .pt-safe {\n    padding-top: env(safe-area-inset-top);\n  }\n  .pb-safe {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n}\n\n/* Animation utilities */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideInTop {\n  from {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInBottom {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fadeIn {\n  animation: fadeIn 0.3s ease-out forwards;\n}\n\n.animate-slideInTop {\n  animation: slideInTop 0.3s ease-out forwards;\n}\n\n.animate-slideInBottom {\n  animation: slideInBottom 0.3s ease-out forwards;\n}\n\n/* Page transition */\n.page-transition {\n  animation: fadeIn 0.3s ease-out;\n}\n\n/* Toast customization to float properly */\n.fixed.bottom-20.right-4 {\n  position: fixed !important;\n  bottom: 5rem !important;\n  right: 1rem !important;\n  z-index: 50 !important;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1) !important;\n}\n\n:root {\n  --background: hsl(255, 63%, 26%);\n  --foreground: hsl(240, 6%, 96%);\n  --card: hsl(255, 63%, 14%);\n  --card-foreground: hsl(240, 6%, 96%);\n  --popover: hsl(255, 63%, 14%);\n  --popover-foreground: hsl(240, 6%, 96%);\n  --primary: hsl(51, 100%, 50%);\n  --primary-foreground: hsl(255, 63%, 26%);\n  --secondary: hsl(255, 63%, 26%);\n  --secondary-foreground: hsl(240, 6%, 96%);\n  --muted: hsl(220, 6%, 78%);\n  --muted-foreground: hsl(255, 63%, 26%);\n  --accent: hsl(51, 100%, 50%);\n  --accent-foreground: hsl(255, 63%, 26%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(255, 42%, 26%);\n  --input: hsl(255, 63%, 26%);\n  --ring: hsl(51, 100%, 50%);\n  --chart-1: hsl(51, 100%, 50%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n\n  /* Brand Colors */\n  --brand-bg: hsl(255, 63%, 26%);\n  --brand-card: hsl(255, 63%, 14%);\n  --brand-border: hsl(255, 42%, 26%);\n  --brand-text: hsl(240, 6%, 96%);\n  --brand-mute: hsl(220, 6%, 78%);\n  --brand-accent: hsl(51, 100%, 50%);\n}\n\n.dark {\n  --background: hsl(255, 63%, 26%);\n  --foreground: hsl(240, 6%, 96%);\n  --card: hsl(255, 63%, 14%);\n  --card-foreground: hsl(240, 6%, 96%);\n  --popover: hsl(255, 63%, 14%);\n  --popover-foreground: hsl(240, 6%, 96%);\n  --primary: hsl(51, 100%, 50%);\n  --primary-foreground: hsl(255, 63%, 26%);\n  --secondary: hsl(255, 63%, 26%);\n  --secondary-foreground: hsl(240, 6%, 96%);\n  --muted: hsl(220, 6%, 78%);\n  --muted-foreground: hsl(255, 63%, 26%);\n  --accent: hsl(51, 100%, 50%);\n  --accent-foreground: hsl(255, 63%, 26%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(255, 42%, 26%);\n  --input: hsl(255, 63%, 26%);\n  --ring: hsl(51, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: var(--brand-bg);\n    color: var(--brand-text);\n  }\n}\n\n@layer components {\n  .brand-bg {\n    background-color: var(--brand-bg);\n  }\n  \n  .brand-card {\n    background-color: var(--brand-card);\n  }\n  \n  .brand-border {\n    border-color: var(--brand-border);\n  }\n  \n  .brand-text {\n    color: var(--brand-text);\n  }\n  \n  .brand-mute {\n    color: var(--brand-mute);\n  }\n  \n  .brand-accent {\n    color: var(--brand-accent);\n  }\n  \n  .brand-accent-bg {\n    background-color: var(--brand-accent);\n    color: var(--brand-bg);\n  }\n}\n","size_bytes":3944},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/googlePlaces.ts":{"content":"export interface GooglePlacesResult {\n  place_id: string;\n  name: string;\n  rating?: number;\n  user_ratings_total?: number;\n  price_level?: number;\n  types?: string[];\n  address?: string;\n  location?: { lat: number; lng: number };\n  open_now?: boolean;\n  photo_ref?: string;\n  description?: string;\n  editorial_summary?: string;\n}\n\n// Quality filters for POIs\nexport interface PlaceFilterOptions {\n  minRating?: number;\n  minReviews?: number;\n  relevantTypes?: string[];\n  theme?: string;\n}\n\nexport async function searchPlaces(query: string, filters?: PlaceFilterOptions): Promise<GooglePlacesResult[]> {\n  try {\n    const apiKey = process.env.GOOGLE_PLACES_API_KEY;\n    if (!apiKey) {\n      throw new Error(\"Google Places API key not configured\");\n    }\n\n    const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": apiKey,\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.rating,places.userRatingCount,places.priceLevel,places.types,places.location,places.currentOpeningHours,places.photos,places.editorialSummary\"\n      },\n      body: JSON.stringify({ \n        textQuery: query, \n        pageSize: 20, // Maximum allowed by Google Places API\n        languageCode: \"en\"\n      })\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(`Google Places API error: ${response.status} - ${data.error?.message || 'Unknown error'}`);\n    }\n    \n    if (!data.places) {\n      return [];\n    }\n    \n    let results = data.places.map((place: any): GooglePlacesResult => ({\n      place_id: place.id,\n      name: place.displayName?.text || place.displayName,\n      rating: place.rating,\n      user_ratings_total: place.userRatingCount,\n      price_level: place.priceLevel,\n      types: place.types,\n      address: place.formattedAddress,\n      location: place.location,\n      open_now: place.currentOpeningHours?.openNow,\n      photo_ref: place.photos?.[0]?.name,\n      editorial_summary: place.editorialSummary?.text,\n      description: generatePlaceDescription(place)\n    }));\n    \n    // Apply quality filters\n    if (filters) {\n      results = results.filter((place: GooglePlacesResult) => {\n        // Filter by minimum rating (default 4.2)\n        if (filters.minRating && place.rating && place.rating < filters.minRating) {\n          return false;\n        }\n        \n        // Filter by minimum reviews (default 500)\n        if (filters.minReviews && place.user_ratings_total && place.user_ratings_total < filters.minReviews) {\n          return false;\n        }\n        \n        // Filter by relevant types for the theme\n        if (filters.relevantTypes && filters.relevantTypes.length > 0 && place.types) {\n          const hasRelevantType = place.types.some((type: string) => \n            filters.relevantTypes?.includes(type)\n          );\n          if (!hasRelevantType) {\n            return false;\n          }\n        }\n        \n        return true;\n      });\n    }\n    \n    // Sort by rating and review count\n    results.sort((a: GooglePlacesResult, b: GooglePlacesResult) => {\n      const scoreA = (a.rating || 0) * Math.log10((a.user_ratings_total || 1) + 1);\n      const scoreB = (b.rating || 0) * Math.log10((b.user_ratings_total || 1) + 1);\n      return scoreB - scoreA;\n    });\n    \n    // Return top 10 results\n    // Return more results for longer trips - don't limit to just 10\n    return results;\n  } catch (error) {\n    console.error(\"Google Places search error:\", error);\n    throw new Error(\"Failed to search places\");\n  }\n}\n\n// Generate contextual descriptions for POIs\nfunction generatePlaceDescription(place: any): string {\n  const name = place.displayName?.text || place.displayName;\n  const types = place.types || [];\n  const rating = place.rating;\n  const reviewCount = place.userRatingCount;\n  \n  // Build description based on place type and ratings\n  let description = \"\";\n  \n  if (types.includes(\"restaurant\")) {\n    if (rating >= 4.5) {\n      description = `Highly acclaimed dining spot with ${reviewCount || 'many'} reviews`;\n    } else if (types.includes(\"japanese_restaurant\")) {\n      description = \"Authentic Japanese cuisine experience\";\n    } else if (types.includes(\"italian_restaurant\")) {\n      description = \"Traditional Italian flavors in a welcoming atmosphere\";\n    } else {\n      description = \"Popular local restaurant\";\n    }\n  } else if (types.includes(\"tourist_attraction\") || types.includes(\"point_of_interest\")) {\n    if (rating >= 4.5) {\n      description = `Must-visit attraction rated ${rating}/5 by travelers`;\n    } else {\n      description = \"Notable landmark worth exploring\";\n    }\n  } else if (types.includes(\"museum\")) {\n    description = \"Cultural institution showcasing local heritage\";\n  } else if (types.includes(\"park\")) {\n    description = \"Scenic green space perfect for relaxation\";\n  } else if (types.includes(\"shopping_mall\") || types.includes(\"store\")) {\n    description = \"Shopping destination for local and international brands\";\n  } else if (types.includes(\"cafe\")) {\n    description = \"Cozy spot for coffee and light refreshments\";\n  } else if (types.includes(\"bar\") || types.includes(\"night_club\")) {\n    description = \"Vibrant nightlife venue\";\n  } else if (place.editorialSummary?.text) {\n    description = place.editorialSummary.text;\n  } else {\n    description = `Popular venue with ${rating || 'good'} rating`;\n  }\n  \n  return description;\n}\n\nexport async function getPlaceDetails(placeId: string): Promise<GooglePlacesResult | null> {\n  try {\n    const apiKey = process.env.GOOGLE_MAPS_API_KEY || process.env.GOOGLE_PLACES_API_KEY || \"your_google_places_api_key\";\n    const fields = [\n      \"place_id\", \"name\", \"rating\", \"user_ratings_total\", \"price_level\", \n      \"types\", \"formatted_address\", \"geometry\", \"opening_hours\", \"photos\"\n    ].join(\",\");\n    \n    const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=${fields}&key=${apiKey}`;\n    \n    const response = await fetch(url);\n    const data = await response.json();\n    \n    if (data.status !== 'OK') {\n      throw new Error(`Google Places API error: ${data.status} - ${data.error_message || 'Unknown error'}`);\n    }\n    \n    if (!data.result) {\n      return null;\n    }\n    \n    const place = data.result;\n    return {\n      place_id: place.place_id,\n      name: place.name,\n      rating: place.rating,\n      user_ratings_total: place.user_ratings_total,\n      price_level: place.price_level,\n      types: place.types,\n      address: place.formatted_address,\n      location: place.geometry?.location,\n      open_now: place.opening_hours?.open_now,\n      photo_ref: place.photos?.[0]?.photo_reference,\n    };\n  } catch (error) {\n    console.error(\"Google Places details error:\", error);\n    throw new Error(\"Failed to get place details\");\n  }\n}\n\nexport function getPhotoUrl(photoReference: string, maxWidth: number = 400): string {\n  const apiKey = process.env.GOOGLE_MAPS_API_KEY || process.env.GOOGLE_PLACES_API_KEY || \"your_google_places_api_key\";\n  return `https://maps.googleapis.com/maps/api/place/photo?maxwidth=${maxWidth}&photo_reference=${photoReference}&key=${apiKey}`;\n}\n","size_bytes":7287},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { ChatMessage } from \"@shared/schema\";\nimport { searchPlaces } from \"./googlePlaces\";\nimport { normalizeUserInput, fuzzyMatchDestination, suggestCorrection, popularCities } from \"../utils/textProcessing\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"your_openai_api_key\",\n});\n\nexport interface ConversationContext {\n  destination?: string;\n  days?: number;\n  people?: number;\n  theme?: string;\n  messages: ChatMessage[];\n}\n\nexport interface PackageGenerationRequest {\n  destination: string;\n  days: number;\n  people?: number;\n  theme: string;\n}\n\nexport interface GeneratedPackage {\n  name: string;\n  type: \"classic\" | \"foodie\" | \"budget\";\n  budget: string;\n  description: string;\n  route: string;\n  accommodation: string;\n  diningCount: number;\n  attractionCount: number;\n  highlights: string[];\n  itinerary: any[];\n}\n\n// Enhanced fallback conversation logic with city-aware fuzzy matching\nfunction fallbackConversation(context: ConversationContext): {\n  response: string;\n  nextStep: string;\n  options?: string[];\n  extractedInfo?: Partial<ConversationContext>;\n} {\n  const userMessage = context.messages[context.messages.length - 1]?.content || \"\";\n  \n  // Check what step we're on based on context to help with ambiguous inputs\n  const isAskingForDays = context.destination && !context.days;\n  const isAskingForPeople = context.destination && context.days && !context.people;\n  const isAskingForTheme = context.destination && context.days && context.people && !context.theme;\n  \n  // Normalize the input (convert word numbers to digits, etc.)\n  let { normalized, detectedDestination, isCountry, suggestedCities, detectedDays, detectedPeople } = normalizeUserInput(userMessage);\n  \n  // Context-aware interpretation of simple numbers\n  if (/^\\d+$/.test(userMessage.trim()) || /^[a-z]+$/.test(userMessage.trim().toLowerCase())) {\n    const simpleNumber = parseInt(normalizeUserInput(userMessage.trim()).normalized);\n    if (!isNaN(simpleNumber)) {\n      if (isAskingForDays && !detectedDays) {\n        detectedDays = simpleNumber;\n      } else if (isAskingForPeople && !detectedPeople) {\n        detectedPeople = simpleNumber;\n      }\n    }\n  }\n  \n  // Step 1: Get destination (country or city)\n  if (!context.destination) {\n    if (detectedDestination) {\n      // Check if it's a country - if so, suggest cities\n      if (isCountry && suggestedCities && suggestedCities.length > 0) {\n        const cityList = suggestedCities.slice(0, 5); // Show top 5 cities\n        return {\n          response: `${detectedDestination} is fantastic! Which city catches your eye? ${cityList.join(', ')} are all incredible, but feel free to type any city you prefer!`,\n          nextStep: \"question\",\n          options: cityList,\n          extractedInfo: {} // Don't save destination yet, wait for city selection\n        };\n      } else {\n        // It's a specific city, proceed normally\n        return {\n          response: `Excellent choice! ${detectedDestination} is an amazing destination. How long are you planning to stay there?`,\n          nextStep: \"question\",\n          extractedInfo: { destination: detectedDestination }\n        };\n      }\n    } else {\n      // Check if they're responding to a city suggestion from a previous country selection\n      const previousMessages = context.messages;\n      let currentCountry = \"\";\n      let isStuckInLoop = false;\n      \n      // Check if we're stuck in a loop (same message repeated)\n      if (previousMessages.length >= 2) {\n        const lastTwoResponses = previousMessages.slice(-2).filter(m => m.role === 'assistant');\n        if (lastTwoResponses.length >= 2 && \n            lastTwoResponses[0].content === lastTwoResponses[1].content) {\n          isStuckInLoop = true;\n        }\n      }\n      \n      // Find the most recent country context from the conversation\n      for (let i = previousMessages.length - 1; i >= 0; i--) {\n        const msg = previousMessages[i].content.toLowerCase();\n        // Check if a country was mentioned in recent messages\n        for (const country of Object.keys(popularCities)) {\n          if (msg.includes(country)) {\n            currentCountry = country;\n            break;\n          }\n        }\n        if (currentCountry) break;\n      }\n      \n      // If we're stuck in a loop, try to accept the input as-is\n      if (isStuckInLoop && userMessage.trim().length >= 3) {\n        const cityName = userMessage.trim();\n        const properCase = cityName.charAt(0).toUpperCase() + cityName.slice(1).toLowerCase();\n        return {\n          response: `Got it! Let's explore ${properCase}. How many days will you be there?`,\n          nextStep: \"question\",\n          extractedInfo: { destination: properCase }\n        };\n      }\n      \n      // If we have country context and user typed something that could be a city\n      if (currentCountry && userMessage.trim().length > 0) {\n        const userCity = userMessage.trim();\n        \n        // First check for exact match in our curated list\n        const citiesForCountry = popularCities[currentCountry] || [];\n        const exactMatch = citiesForCountry.find((city: string) => \n          city.toLowerCase() === userCity.toLowerCase()\n        );\n        \n        if (exactMatch) {\n          // Found exact match in curated list\n          return {\n            response: `Perfect! ${exactMatch} is an amazing choice. How many days will you be exploring there?`,\n            nextStep: \"question\",\n            extractedInfo: { destination: `${exactMatch}, ${currentCountry.charAt(0).toUpperCase() + currentCountry.slice(1)}` }\n          };\n        } else {\n          // Not in curated list - accept it as-is (will validate via Google Places later)\n          // This handles cities like Dallas, Okinawa, or any other city not in our list\n          const countryName = currentCountry === 'usa' ? 'USA' : \n                             currentCountry === 'uk' ? 'UK' :\n                             currentCountry.charAt(0).toUpperCase() + currentCountry.slice(1);\n          \n          return {\n            response: `Great choice! ${userCity} sounds wonderful. How many days are you planning to stay there?`,\n            nextStep: \"question\",\n            extractedInfo: { destination: `${userCity}, ${countryName}` }\n          };\n        }\n      }\n      \n      // Try standard city matching if no country context\n      const cityMatch = fuzzyMatchDestination(userMessage);\n      if (cityMatch.destination && !cityMatch.isCountry) {\n        return {\n          response: `Perfect! ${cityMatch.destination} it is. How many days will you be exploring there?`,\n          nextStep: \"question\",\n          extractedInfo: { destination: cityMatch.destination }\n        };\n      }\n      \n      // Suggest correction if input seems like a typo\n      const correction = suggestCorrection(userMessage);\n      if (correction) {\n        return {\n          response: `Hmm, I'm not sure I caught that. ${correction} Feel free to tell me any destination you have in mind!`,\n          nextStep: \"question\",\n          options: [\"Japan\", \"France\", \"Italy\", \"USA\", \"Spain\"]\n        };\n      }\n      \n      // Initial greeting - more conversational\n      return {\n        response: \"Hey there! I'm excited to help you plan your next adventure. Where are you dreaming of going? Could be a country, a city, or even just a vibe you're after!\",\n        nextStep: \"question\",\n        options: [\"Japan\", \"France\", \"Italy\", \"USA\", \"Spain\"]\n      };\n    }\n  }\n  \n  // Step 2: Get number of days - more conversational\n  if (!context.days) {\n    if (detectedDays && detectedDays > 0 && detectedDays <= 30) {\n      // Vary response based on trip length\n      let dayResponse = \"\";\n      if (detectedDays <= 3) {\n        dayResponse = `A quick ${detectedDays}-day getaway to ${context.destination} - perfect for a weekend escape!`;\n      } else if (detectedDays <= 7) {\n        dayResponse = `Nice! ${detectedDays} days in ${context.destination} gives you enough time to really experience the city.`;\n      } else {\n        dayResponse = `Wonderful! ${detectedDays} days in ${context.destination} - you'll have time to explore at a relaxed pace.`;\n      }\n      return {\n        response: `${dayResponse} Are you traveling solo or with others?`,\n        nextStep: \"question\",\n        extractedInfo: { days: detectedDays }\n      };\n    } else if (detectedDays && detectedDays > 30) {\n      return {\n        response: \"Wow, that's an epic journey! I typically help with trips up to 30 days to keep things focused. How about we plan for a shorter duration?\",\n        nextStep: \"question\",\n        options: [\"1 week\", \"2 weeks\", \"3 weeks\", \"1 month\"]\n      };\n    } else {\n      // Check for informal duration mentions\n      const lowerNormalized = normalized.toLowerCase();\n      if (lowerNormalized.includes(\"weekend\")) {\n        return {\n          response: `A weekend trip to ${context.destination} sounds perfect! So that's about 2-3 days. Who's joining you on this adventure?`,\n          nextStep: \"question\",\n          extractedInfo: { days: 3 }\n        };\n      } else if (lowerNormalized.includes(\"week\")) {\n        const weeks = lowerNormalized.includes(\"two\") ? 14 : lowerNormalized.includes(\"three\") ? 21 : 7;\n        return {\n          response: `${weeks === 7 ? 'A week' : weeks === 14 ? 'Two weeks' : 'Three weeks'} in ${context.destination} - perfect amount of time! Will you be traveling alone or with company?`,\n          nextStep: \"question\",\n          extractedInfo: { days: weeks }\n        };\n      }\n      \n      return {\n        response: `How long are you thinking of staying in ${context.destination}? A weekend getaway? A week-long adventure? Or something else?`,\n        nextStep: \"question\",\n        options: [\"Weekend (2-3 days)\", \"One week\", \"10 days\", \"Two weeks\"]\n      };\n    }\n  }\n  \n  // Step 3: Get number of people - more natural conversation\n  if (!context.people) {\n    // First check if we can detect a number directly in the input\n    const lowerNormalized = normalized.toLowerCase();\n    \n    // Check for direct number input (handles \"3\", \"three\", \"we are 3\", etc.)\n    if (detectedPeople && detectedPeople > 0 && detectedPeople <= 20) {\n      let peopleResponse = \"\";\n      if (detectedPeople === 1) {\n        peopleResponse = \"Solo travel - love it! There's something special about exploring on your own terms.\";\n      } else if (detectedPeople === 2) {\n        peopleResponse = \"Perfect for two! Whether it's romance or friendship, traveling as a pair is always fun.\";\n      } else if (detectedPeople <= 4) {\n        peopleResponse = `Nice small group of ${detectedPeople}! That's ideal for flexibility and shared experiences.`;\n      } else {\n        peopleResponse = `A group of ${detectedPeople} - that'll be quite the adventure!`;\n      }\n      \n      // Directly proceed to theme selection - no redundant confirmation\n      return {\n        response: `${peopleResponse} For your trip to ${context.destination}, are there any must-visit places or experiences you definitely want to include?`,\n        nextStep: \"preferences\",\n        options: [], // Let frontend show city-specific tags\n        extractedInfo: { people: detectedPeople }\n      };\n    } \n    \n    // Handle numbers too large\n    if (detectedPeople && detectedPeople > 20) {\n      return {\n        response: \"Wow, that's quite the crew! I typically help with groups up to 20 to keep things manageable. Could you give me a more specific number?\",\n        nextStep: \"question\"\n      };\n    }\n    \n    // Check for various people count expressions even without explicit numbers\n    if (lowerNormalized.includes(\"just me\") || lowerNormalized.includes(\"only me\") ||\n        lowerNormalized.includes(\"by myself\") || lowerNormalized.includes(\"on my own\")) {\n      return {\n        response: `Solo adventure it is! I love the freedom of traveling alone. For ${context.destination}, are there any must-visit places or experiences on your list?`,\n        nextStep: \"preferences\",\n        options: [], // Let frontend show city-specific tags\n        extractedInfo: { people: 1 }\n      };\n    }\n    \n    // Handle \"we are X\" patterns\n    const weAreMatch = lowerNormalized.match(/we\\s*(?:are|'re)?\\s*(\\w+)/);\n    if (weAreMatch) {\n      const numberWord = weAreMatch[1];\n      // Try to parse if it's a number word\n      const { detectedPeople: parsedPeople } = normalizeUserInput(numberWord);\n      if (parsedPeople && parsedPeople > 0 && parsedPeople <= 20) {\n        let peopleResponse = parsedPeople <= 4 ? \n          `Great, ${parsedPeople} of you traveling together!` :\n          `A group of ${parsedPeople} - that'll be fun!`;\n        \n        return {\n          response: `${peopleResponse} For your trip to ${context.destination}, are there any must-visit places or experiences you definitely want to include?`,\n          nextStep: \"preferences\",\n          options: [], // Let frontend show city-specific tags\n          extractedInfo: { people: parsedPeople }\n        };\n      }\n    }\n    \n    // Otherwise, check for informal people counts\n    else {\n      // Check for other informal people counts\n      if (lowerNormalized.includes(\"solo\") || lowerNormalized.includes(\"alone\") || \n          lowerNormalized.includes(\"myself\")) {\n        return {\n          response: `Solo adventure it is! I love the freedom of traveling alone. For ${context.destination}, are there any must-visit places or experiences on your list?`,\n          nextStep: \"preferences\",\n          options: [], // Let frontend show city-specific tags\n          extractedInfo: { people: 1 }\n        };\n      } else if (lowerNormalized.includes(\"couple\") || lowerNormalized.includes(\"partner\") ||\n                 lowerNormalized.includes(\"boyfriend\") || lowerNormalized.includes(\"girlfriend\") ||\n                 lowerNormalized.includes(\"husband\") || lowerNormalized.includes(\"wife\") ||\n                 lowerNormalized.includes(\"two of us\") || lowerNormalized.includes(\"both of us\")) {\n        return {\n          response: `How romantic! Traveling as a couple is always special. For ${context.destination}, are there any must-visit places or experiences you both want to include?`,\n          nextStep: \"preferences\",\n          options: [], // Let frontend show city-specific tags\n          extractedInfo: { people: 2 }\n        };\n      } else if (lowerNormalized.includes(\"family\")) {\n        // Only ask for specifics if they just say \"family\" without a number\n        return {\n          response: \"Family trips create the best memories! How many of you will be traveling together?\",\n          nextStep: \"question\",\n          options: [\"3 people\", \"4 people\", \"5 people\", \"More than 5\"]\n        };\n      } else if (lowerNormalized.includes(\"friends\") || lowerNormalized.includes(\"group\")) {\n        // Only ask for specifics if they don't provide a number\n        return {\n          response: \"Traveling with friends is always a blast! How many in your crew?\",\n          nextStep: \"question\",\n          options: [\"3-4 friends\", \"5-6 friends\", \"7-8 friends\", \"Larger group\"]\n        };\n      }\n      \n      // Initial question if nothing detected\n      return {\n        response: `Will you be exploring ${context.destination} solo or with others? Just let me know the number!`,\n        nextStep: \"question\",\n        options: [\"Solo adventure\", \"Couple's trip\", \"Family vacation\", \"Friends getaway\"]\n      };\n    }\n  }\n  \n  // Step 4: Get theme/preference - natural conversation style\n  if (!context.theme) {\n    let theme = \"classic\";\n    const lowerMessage = normalized.toLowerCase();\n    \n    // Check if this is from TagSelector (format: \"I'm interested in: tag1, tag2, tag3\")\n    if (lowerMessage.includes(\"i'm interested in:\") || lowerMessage.includes(\"i am interested in:\")) {\n      // Extract the tags part after the colon\n      const tagsPart = userMessage.split(':')[1]?.trim() || \"\";\n      \n      // Store the specific tags/interests for later use\n      theme = tagsPart || \"custom\";\n      \n      // If we got specific tags, use them as the theme\n      if (tagsPart) {\n        // Create a personalized response based on the selected interests\n        const interests = tagsPart.split(',').map(t => t.trim());\n        const interestList = interests.length > 2 \n          ? interests.slice(0, -1).join(', ') + ', and ' + interests[interests.length - 1]\n          : interests.join(' and ');\n          \n        return {\n          response: `Fantastic choices! I'll create packages focusing on ${interestList}. Let me find the best experiences in ${context.destination} that match your interests...`,\n          nextStep: \"generate\",\n          extractedInfo: { theme }\n        };\n      }\n    }\n    \n    // Fallback to generic theme mapping for non-tag-based inputs\n    if (lowerMessage.includes(\"food\") || lowerMessage.includes(\"eat\") || \n        lowerMessage.includes(\"culinary\") || lowerMessage.includes(\"restaurant\") ||\n        lowerMessage.includes(\"foodie\") || lowerMessage.includes(\"cuisine\") ||\n        lowerMessage.includes(\"local food\") || lowerMessage.includes(\"dining\")) {\n      theme = \"foodie\";\n    } else if (lowerMessage.includes(\"budget\") || lowerMessage.includes(\"cheap\") || \n               lowerMessage.includes(\"affordable\") || lowerMessage.includes(\"economical\") ||\n               lowerMessage.includes(\"save\") || lowerMessage.includes(\"backpack\")) {\n      theme = \"budget\";\n    } else if (lowerMessage.includes(\"highlight\") || lowerMessage.includes(\"must-see\") ||\n               lowerMessage.includes(\"tourist\") || lowerMessage.includes(\"landmark\") ||\n               lowerMessage.includes(\"famous\") || lowerMessage.includes(\"popular\") ||\n               lowerMessage.includes(\"classic\") || lowerMessage.includes(\"main\")) {\n      theme = \"classic\";\n    } else if (lowerMessage.includes(\"hidden\") || lowerMessage.includes(\"local\") ||\n               lowerMessage.includes(\"authentic\") || lowerMessage.includes(\"off\") ||\n               lowerMessage.includes(\"secret\")) {\n      theme = \"adventure\";\n    } else if (lowerMessage.includes(\"everything\") || lowerMessage.includes(\"mix\") ||\n               lowerMessage.includes(\"variety\") || lowerMessage.includes(\"both\") ||\n               lowerMessage.includes(\"all\")) {\n      theme = \"balanced\";\n    }\n    \n    // Create a personalized summary message\n    let summaryMessage = \"\";\n    if (context.people === 1) {\n      summaryMessage = `Brilliant! I'm crafting ${context.days}-day solo adventure packages for ${context.destination}`;\n    } else if (context.people === 2) {\n      summaryMessage = `Perfect! Creating ${context.days}-day packages for two in ${context.destination}`;\n    } else {\n      summaryMessage = `Excellent! Putting together ${context.days}-day packages for your group of ${context.people} in ${context.destination}`;\n    }\n    \n    // Add theme-specific flavor\n    let themeMessage = \"\";\n    switch(theme) {\n      case \"foodie\":\n        themeMessage = \" with a focus on amazing local cuisine and dining experiences\";\n        break;\n      case \"budget\":\n        themeMessage = \" that won't break the bank but still hit all the right spots\";\n        break;\n      case \"adventure\":\n        themeMessage = \" featuring hidden gems and local favorites\";\n        break;\n      case \"balanced\":\n        themeMessage = \" with a perfect mix of must-sees and local experiences\";\n        break;\n      default:\n        themeMessage = \" covering all the iconic highlights\";\n    }\n    \n    return {\n      response: `${summaryMessage}${themeMessage}. Give me just a moment to pull together some amazing options using real places and current recommendations...`,\n      nextStep: \"generate\",\n      extractedInfo: { theme }\n    };\n  }\n  \n  // Default response if we have all info but somehow reach here\n  return {\n    response: `Great! I've got everything I need for your ${context.days}-day trip to ${context.destination}. Let me create some personalized packages for you...`,\n    nextStep: \"generate\"\n  };\n}\n\nexport async function continueConversation(context: ConversationContext): Promise<{\n  response: string;\n  nextStep: string;\n  options?: string[];\n  extractedInfo?: Partial<ConversationContext>;\n}> {\n  // For now, use fallback conversation since OpenAI quota is exceeded\n  return fallbackConversation(context);\n  \n\n}\n\nasync function fetchDestinationPOIs(destination: string): Promise<string> {\n  try {\n    // Fetch sample POIs to provide AI with real place data context\n    const [restaurants, attractions, hotels] = await Promise.all([\n      searchPlaces(`restaurants in ${destination}`),\n      searchPlaces(`attractions in ${destination}`),\n      searchPlaces(`hotels in ${destination}`)\n    ]);\n\n    const poiContext = `\nReal places in ${destination}:\nRestaurants: ${restaurants.slice(0, 5).map(p => `${p.name} (${p.rating}⭐)`).join(', ')}\nAttractions: ${attractions.slice(0, 5).map(p => `${p.name} (${p.rating}⭐)`).join(', ')}\nHotels: ${hotels.slice(0, 3).map(p => `${p.name} (${p.rating}⭐)`).join(', ')}\n    `;\n    \n    return poiContext;\n  } catch (error) {\n    console.error(\"Error fetching POI context:\", error);\n    return `Destination: ${destination} (authentic POI data unavailable)`;\n  }\n}\n\nexport async function generateTravelPackages(request: PackageGenerationRequest): Promise<GeneratedPackage[]> {\n  console.log(\"Generating packages using Google Places data fallback for:\", request.destination);\n    \n    // Fallback package generation using real Google Places data\n    const [restaurants, attractions, hotels] = await Promise.all([\n      searchPlaces(`restaurants in ${request.destination}`),\n      searchPlaces(`attractions in ${request.destination}`),\n      searchPlaces(`hotels in ${request.destination}`)\n    ]);\n\n    const baseItinerary = Array.from({ length: request.days }, (_, i) => ({\n      day: i + 1,\n      location: request.destination,\n      title: `Day ${i + 1}: Explore ${request.destination}`,\n      description: `Discover ${request.destination} with authentic local experiences`,\n      activities: [\n        restaurants[i % restaurants.length]?.name || `Local restaurant`,\n        attractions[i % attractions.length]?.name || `Popular attraction`,\n        `Evening leisure time`\n      ]\n    }));\n\n    return [\n      {\n        name: `Classic ${request.destination}`,\n        type: \"classic\" as const,\n        budget: `$${800 + (request.days * 150)}`,\n        description: `Traditional sightseeing experience in ${request.destination}`,\n        route: request.destination,\n        accommodation: hotels[0]?.name || \"Mid-range hotel\",\n        diningCount: Math.min(restaurants.length, 8),\n        attractionCount: Math.min(attractions.length, 6),\n        highlights: attractions.slice(0, 4).map(a => a.name),\n        itinerary: baseItinerary\n      },\n      {\n        name: `Foodie ${request.destination}`,\n        type: \"foodie\" as const,\n        budget: `$${1200 + (request.days * 200)}`,\n        description: `Culinary-focused journey through ${request.destination}`,\n        route: request.destination,\n        accommodation: hotels[1]?.name || \"Boutique hotel\",\n        diningCount: Math.min(restaurants.length, 12),\n        attractionCount: Math.min(attractions.length, 4),\n        highlights: restaurants.slice(0, 4).map(r => r.name),\n        itinerary: baseItinerary.map(day => ({\n          ...day,\n          activities: [\n            restaurants[(day.day - 1) % restaurants.length]?.name || `Fine dining`,\n            restaurants[((day.day - 1) + restaurants.length/2) % restaurants.length]?.name || `Local cuisine`,\n            attractions[(day.day - 1) % attractions.length]?.name || `Cultural site`\n          ]\n        }))\n      },\n      {\n        name: `Budget ${request.destination}`,\n        type: \"budget\" as const,\n        budget: `$${400 + (request.days * 80)}`,\n        description: `Affordable exploration of ${request.destination}`,\n        route: request.destination,\n        accommodation: \"Budget-friendly accommodation\",\n        diningCount: Math.min(restaurants.length, 4),\n        attractionCount: Math.min(attractions.length, 8),\n        highlights: attractions.slice(0, 4).map(a => a.name),\n        itinerary: baseItinerary\n      }\n    ];\n}\n\nexport async function refineItinerary(\n  currentItinerary: any,\n  refinementRequest: string,\n  context: { destination: string; days: number; theme: string }\n): Promise<any> {\n  try {\n    const systemPrompt = `You are helping refine a travel itinerary based on user feedback.\n\nCurrent itinerary context:\n- Destination: ${context.destination}\n- Duration: ${context.days} days\n- Theme: ${context.theme}\n\nUser refinement request: \"${refinementRequest}\"\n\nModify the itinerary according to the user's request while maintaining:\n- Logical flow and timing\n- Realistic travel distances\n- Appropriate mix of activities\n- Budget considerations\n\nReturn the updated itinerary in the same JSON format as the original.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: `Current itinerary: ${JSON.stringify(currentItinerary)}\\n\\nRefinement request: ${refinementRequest}` }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result.itinerary || result;\n  } catch (error) {\n    console.error(\"OpenAI refinement error:\", error);\n    throw new Error(\"Failed to refine itinerary\");\n  }\n}\n","size_bytes":25705},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useConversation.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { createConversation, sendMessage, getConversation, generatePackages } from \"../lib/api\";\nimport { Conversation, ChatMessage, TravelPackage } from \"../types/travel\";\n\nexport function useConversation(conversationId?: string) {\n  const [currentConversationId, setCurrentConversationId] = useState<string | undefined>(conversationId);\n  const queryClient = useQueryClient();\n\n  // Get conversation query\n  const { data: conversation, isLoading: conversationLoading } = useQuery({\n    queryKey: ['/api/conversation', currentConversationId],\n    enabled: !!currentConversationId,\n  });\n\n  // Create conversation mutation\n  const createConversationMutation = useMutation({\n    mutationFn: createConversation,\n    onSuccess: (data: Conversation) => {\n      // Use conversationId (string UUID) not the numeric id\n      const conversationId = data.conversationId || String(data.id);\n      setCurrentConversationId(conversationId);\n      queryClient.setQueryData(['/api/conversation', conversationId], data);\n    },\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: ({ conversationId, message }: { conversationId: string; message: string }) =>\n      sendMessage(conversationId, message),\n    onSuccess: (data, variables) => {\n      queryClient.setQueryData(['/api/conversation', variables.conversationId], data.conversation);\n    },\n    onError: (error, variables) => {\n      console.error(\"Error sending message:\", error);\n      \n      // Get current conversation\n      const currentConv = queryClient.getQueryData<Conversation>(['/api/conversation', variables.conversationId]);\n      if (!currentConv) return;\n      \n      // Check if we already have a recent error message to prevent duplicates\n      const lastMessage = currentConv.messages[currentConv.messages.length - 1];\n      if (lastMessage?.role === \"assistant\" && \n          lastMessage.content?.includes(\"I had a little trouble understanding\")) {\n        // Don't add another error message if we just added one\n        console.log(\"Skipping duplicate error message\");\n        return;\n      }\n      \n      // Create a helpful error message\n      const errorMessage: ChatMessage = {\n        id: `error-${Date.now()}-${Math.random()}`,\n        role: \"assistant\",\n        content: \"I had a little trouble understanding that. Could you try rephrasing? Don't worry about typos - I can handle 'lodon' for London or 'five days' instead of '5 days'. What would you like to tell me?\",\n        timestamp: new Date(),\n        options: currentConv.messages.length === 0 ? [\"London\", \"Paris\", \"Tokyo\", \"New York\"] : undefined\n      };\n      \n      // Add error message to conversation only once\n      queryClient.setQueryData(['/api/conversation', variables.conversationId], {\n        ...currentConv,\n        messages: [...currentConv.messages, errorMessage]\n      });\n    },\n    retry: false, // Disable automatic retries to prevent duplicate error messages\n  });\n\n  // Generate packages mutation\n  const generatePackagesMutation = useMutation({\n    mutationFn: generatePackages,\n    onSuccess: (data, conversationId) => {\n      console.log(\"Package generation successful:\", data.packages.length, \"packages created\");\n      // Set the packages data directly in cache\n      queryClient.setQueryData(['/api/conversation', conversationId, 'packages'], data.packages);\n      // Force refetch of packages query to ensure UI updates immediately\n      queryClient.refetchQueries({ queryKey: ['/api/conversation', conversationId, 'packages'] });\n      // Refresh conversation to get updated status\n      queryClient.invalidateQueries({ queryKey: ['/api/conversation', conversationId] });\n    },\n    onError: (error, conversationId) => {\n      console.error(\"Package generation failed for conversation\", conversationId, \":\", error);\n    },\n  });\n\n  // Helper functions\n  const startConversation = useCallback((initialData?: {\n    destination?: string;\n    days?: number;\n    people?: number;\n    theme?: string;\n  }) => {\n    createConversationMutation.mutate({\n      userId: undefined, // Will be handled by backend\n      ...initialData,\n    });\n  }, [createConversationMutation]);\n\n  const sendUserMessage = useCallback((message: string) => {\n    if (!currentConversationId) return;\n    sendMessageMutation.mutate({\n      conversationId: currentConversationId,\n      message,\n    });\n  }, [currentConversationId, sendMessageMutation]);\n\n  const generateTravelPackages = useCallback(() => {\n    if (!currentConversationId) return;\n    generatePackagesMutation.mutate(currentConversationId);\n  }, [currentConversationId, generatePackagesMutation]);\n\n  return {\n    conversation: conversation as Conversation,\n    conversationId: currentConversationId,\n    isLoading: conversationLoading,\n    \n    // Mutations\n    startConversation,\n    sendUserMessage,\n    generateTravelPackages,\n    \n    // Mutation states\n    isCreatingConversation: createConversationMutation.isPending,\n    isSendingMessage: sendMessageMutation.isPending,\n    isGeneratingPackages: generatePackagesMutation.isPending,\n    \n    // Latest AI response\n    latestAIResponse: sendMessageMutation.data?.aiResponse,\n    nextStep: sendMessageMutation.data?.nextStep,\n  };\n}\n","size_bytes":5347},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport { ChatMessage, Conversation, TravelPackage, POI } from \"../types/travel\";\n\n// Conversation API\nexport async function createConversation(data: {\n  userId?: string;\n  destination?: string;\n  days?: number;\n  people?: number;\n  theme?: string;\n}): Promise<Conversation> {\n  const response = await apiRequest(\"POST\", \"/api/conversation\", data);\n  return await response.json();\n}\n\nexport async function sendMessage(conversationId: string, message: string): Promise<{\n  conversation: Conversation;\n  aiResponse: ChatMessage;\n  nextStep: string;\n}> {\n  const response = await apiRequest(\"POST\", `/api/conversation/${conversationId}/message`, { message });\n  return await response.json();\n}\n\nexport async function getConversation(conversationId: string): Promise<Conversation> {\n  const response = await apiRequest(\"GET\", `/api/conversation/${conversationId}`);\n  return await response.json();\n}\n\n// Package API\nexport async function generatePackages(conversationId: string): Promise<{ packages: TravelPackage[] }> {\n  const response = await apiRequest(\"POST\", `/api/conversation/${conversationId}/generate-packages`);\n  return await response.json();\n}\n\nexport async function getPackage(packageId: string): Promise<TravelPackage> {\n  const response = await apiRequest(\"GET\", `/api/packages/${packageId}`);\n  return await response.json();\n}\n\nexport async function getPackagesByConversation(conversationId: string): Promise<TravelPackage[]> {\n  const response = await apiRequest(\"GET\", `/api/conversation/${conversationId}/packages`);\n  return await response.json();\n}\n\nexport async function refinePackage(packageId: string, refinementRequest: string): Promise<TravelPackage> {\n  const response = await apiRequest(\"POST\", `/api/packages/${packageId}/refine`, { refinementRequest });\n  return await response.json();\n}\n\nexport async function exportPackage(packageId: string): Promise<void> {\n  const response = await apiRequest(\"GET\", `/api/packages/${packageId}/export`);\n  const blob = await response.blob();\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `travel_package_${Date.now()}.json`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n\n// Places API\nexport async function searchPlaces(\n  query: string, \n  options?: {\n    theme?: string;\n    city?: string;\n    tags?: string[];\n    timeSlot?: string;\n    conversationId?: string;\n  }\n): Promise<{ results: POI[] }> {\n  const params = new URLSearchParams({ query });\n  if (options?.theme) params.append('theme', options.theme);\n  if (options?.city) params.append('city', options.city);\n  if (options?.tags?.length) params.append('tags', options.tags.join(','));\n  if (options?.timeSlot) params.append('timeSlot', options.timeSlot);\n  if (options?.conversationId) params.append('conversationId', options.conversationId);\n  \n  const response = await apiRequest(\"GET\", `/api/places/search?${params}`);\n  return await response.json();\n}\n\nexport async function getPlaceDetails(placeId: string): Promise<{ result: POI }> {\n  const response = await apiRequest(\"GET\", `/api/places/details/${placeId}`);\n  return await response.json();\n}\n\nexport function getPhotoUrl(photoRef: string, maxWidth: number = 400): string {\n  return `/api/places/photo?ref=${photoRef}&maxwidth=${maxWidth}`;\n}\n\n// Get city-specific tags/attractions\nexport async function getCityTags(cityName: string, countryCode: string): Promise<{ tags: string[], isDefault: boolean }> {\n  const response = await apiRequest(\"GET\", `/api/cities/tags/${encodeURIComponent(cityName)}/${encodeURIComponent(countryCode)}`);\n  return await response.json();\n}\n","size_bytes":3728},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Get session ID from localStorage\n  const sessionId = localStorage.getItem('travelify_session_id');\n  \n  const headers: HeadersInit = data ? { \"Content-Type\": \"application/json\" } : {};\n  if (sessionId) {\n    headers['X-Session-Id'] = sessionId;\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // Update session ID if server sends a new one\n  const newSessionId = res.headers.get('X-Session-Id');\n  if (newSessionId) {\n    localStorage.setItem('travelify_session_id', newSessionId);\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1784},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChatInterface } from \"@/components/chat/ChatInterface\";\nimport { PackagePreview } from \"@/components/packages/PackagePreview\";\nimport { PackageComparison } from \"@/components/packages/PackageComparison\";\nimport { DayByDayView } from \"@/components/itinerary/DayByDayView\";\nimport { AddPOIModal } from \"@/components/modals/AddPOIModal\";\nimport { useConversation } from \"@/hooks/useConversation\";\nimport { getPackagesByConversation, exportPackage } from \"@/lib/api\";\nimport { TravelPackage } from \"@/types/travel\";\nimport { Plane, Download, HelpCircle } from \"lucide-react\";\n\ntype ViewType = \"conversation\" | \"comparison\" | \"itinerary\";\n\nexport default function Home() {\n  const [currentView, setCurrentView] = useState<ViewType>(\"conversation\");\n  const [selectedPackage, setSelectedPackage] = useState<TravelPackage | null>(null);\n  const [showAddPOIModal, setShowAddPOIModal] = useState(false);\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  \n  // Debug logging for home page\n  console.log(\"Home page state:\", { conversationId });\n  \n  const { data: packages = [] } = useQuery<TravelPackage[]>({\n    queryKey: ['/api/conversation', conversationId, 'packages'],\n    enabled: !!conversationId,\n  });\n\n  const handlePackagesReady = () => {\n    // Packages are ready, no need to change view automatically\n    // User can click \"Compare All Packages\" when ready\n  };\n\n  const handleViewAllPackages = () => {\n    setCurrentView(\"comparison\");\n  };\n\n  const handleSelectPackage = (pkg: TravelPackage) => {\n    setSelectedPackage(pkg);\n    setCurrentView(\"itinerary\");\n  };\n\n  const handleBackToConversation = () => {\n    setCurrentView(\"conversation\");\n    setSelectedPackage(null);\n  };\n\n  const handleBackToComparison = () => {\n    setCurrentView(\"comparison\");\n    setSelectedPackage(null);\n  };\n\n  const handleExportPackage = async () => {\n    if (selectedPackage) {\n      try {\n        await exportPackage(selectedPackage.id);\n      } catch (error) {\n        console.error(\"Export failed:\", error);\n      }\n    }\n  };\n\n  const handleAddPOI = (poi: any, timeSlot: string) => {\n    // This would ideally add the POI to the current day's itinerary\n    // For now, we'll just close the modal\n    console.log(\"Adding POI:\", poi, \"to\", timeSlot);\n    setShowAddPOIModal(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-brand-bg text-brand-text\">\n      {/* Header */}\n      <header className=\"border-b border-brand-border bg-brand-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-brand-accent rounded-lg flex items-center justify-center\">\n                <Plane className=\"text-brand-bg w-4 h-4\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-brand-text\">MemoGo</h1>\n              <span className=\"bg-brand-accent/20 text-brand-accent px-2 py-1 rounded-full text-[14px] font-semibold\">Create Your Own Memory ✨</span>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-4\">\n              <Button variant=\"ghost\" className=\"text-brand-mute hover:text-brand-accent\">\n                <HelpCircle className=\"w-4 h-4 mr-2\" />\n                Help\n              </Button>\n              <Button\n                onClick={handleExportPackage}\n                disabled={!selectedPackage}\n                className=\"bg-brand-accent text-brand-bg hover:bg-yellow-500\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Conversation + Package Generation View */}\n        {currentView === \"conversation\" && (\n          <div className=\"grid lg:grid-cols-2 gap-6 min-h-[calc(100vh-160px)]\">\n            <ChatInterface\n              onPackagesReady={handlePackagesReady}\n              onConversationIdChange={(id) => setConversationId(id)}\n            />\n            <PackagePreview\n              conversationId={conversationId || undefined}\n              onViewAllPackages={handleViewAllPackages}\n              onSelectPackage={handleSelectPackage}\n            />\n          </div>\n        )}\n\n        {/* Package Comparison Dashboard */}\n        {currentView === \"comparison\" && (\n          <PackageComparison\n            packages={packages}\n            onBack={handleBackToConversation}\n            onSelectPackage={handleSelectPackage}\n          />\n        )}\n\n        {/* Day-by-Day View */}\n        {currentView === \"itinerary\" && selectedPackage && (\n          <DayByDayView\n            package={selectedPackage}\n            onBack={handleBackToComparison}\n            onAddPOI={() => setShowAddPOIModal(true)}\n          />\n        )}\n      </div>\n      {/* Add POI Modal */}\n      <AddPOIModal\n        isOpen={showAddPOIModal}\n        onClose={() => setShowAddPOIModal(false)}\n        onAddPOI={handleAddPOI}\n        conversationId={conversationId || undefined}\n        city={selectedPackage?.destination}\n        tags={selectedPackage ? [] : undefined}\n      />\n      {/* Floating Export Button (mobile) */}\n      {selectedPackage && (\n        <div className=\"fixed bottom-6 right-6 z-40 md:hidden\">\n          <Button\n            onClick={handleExportPackage}\n            className=\"bg-brand-accent text-brand-bg w-14 h-14 rounded-full shadow-lg hover:bg-yellow-500 hover:scale-110 transition-all duration-300\"\n          >\n            <Download className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5899},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/travel.ts":{"content":"export interface ChatMessage {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n  options?: string[];\n}\n\nexport interface Conversation {\n  id: number | string;  // Can be numeric or string\n  conversationId?: string;  // The UUID string identifier\n  userId?: string;\n  destination?: string;\n  days?: number;\n  people?: number;\n  theme?: string;\n  selectedTags?: string[];\n  status: string;\n  messages: ChatMessage[];\n  refinementCount: number;\n  packagesGenerated?: boolean;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\nexport interface TravelPackage {\n  id: string;\n  conversationId?: string;\n  name: string;\n  type: \"classic\" | \"foodie\" | \"budget\";\n  destination: string;\n  days: number;\n  budget: string;\n  description?: string;\n  route?: string;\n  accommodation?: string;\n  diningCount?: number;\n  attractionCount?: number;\n  highlights?: string[];\n  itinerary?: ItineraryDay[];\n  createdAt: Date;\n}\n\nexport interface ItineraryDay {\n  day: number;\n  date?: string;\n  location: string;\n  title: string;\n  description?: string;\n  activities: Activity[];\n}\n\nexport interface Activity {\n  id: string;\n  time: \"morning\" | \"afternoon\" | \"evening\";\n  name: string;\n  type: \"restaurant\" | \"attraction\" | \"accommodation\" | \"transportation\";\n  address?: string;\n  rating?: number;\n  priceLevel?: number;\n  placeId?: string;\n  photoRef?: string;\n  duration?: string;\n}\n\nexport interface POI {\n  place_id: string;\n  name: string;\n  rating?: number;\n  user_ratings_total?: number;\n  price_level?: number;\n  types?: string[];\n  address?: string;\n  location?: { lat: number; lng: number };\n  open_now?: boolean;\n  photo_ref?: string;\n}\n","size_bytes":1654},"client/src/components/chat/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LoadingSpinner } from \"@/components/ui/LoadingSpinner\";\nimport { useConversation } from \"@/hooks/useConversation\";\nimport { EnhancedTagSelector } from \"@/components/chat/EnhancedTagSelector\";\nimport { ChatMessage } from \"@/types/travel\";\nimport { Plane, Bot, User, Send } from \"lucide-react\";\n\ninterface ChatInterfaceProps {\n  conversationId?: string;\n  onPackagesReady?: () => void;\n  onConversationIdChange?: (id: string) => void;\n}\n\nexport function ChatInterface({ conversationId, onPackagesReady, onConversationIdChange }: ChatInterfaceProps) {\n  const [message, setMessage] = useState(\"\");\n  const [showTagSelector, setShowTagSelector] = useState(false);\n  const [selectedCity, setSelectedCity] = useState<{ name: string; countryCode: string } | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const packageGenerationTriggeredRef = useRef<string | null>(null);\n  \n  const {\n    conversation,\n    conversationId: currentConversationId,\n    isLoading,\n    startConversation,\n    sendUserMessage,\n    generateTravelPackages,\n    isSendingMessage,\n    isGeneratingPackages,\n    latestAIResponse,\n    nextStep,\n  } = useConversation(conversationId);\n\n  // Auto-scroll to bottom when messages change - always keep chat at bottom\n  useEffect(() => {\n    setTimeout(() => {\n      messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n    }, 100);\n  }, [conversation?.messages]);\n\n  // Auto-focus input on mount and when conversation starts\n  useEffect(() => {\n    if (!isSendingMessage && !isGeneratingPackages) {\n      inputRef.current?.focus();\n    }\n  }, [currentConversationId, isSendingMessage, isGeneratingPackages]);\n\n  // Start conversation if none exists\n  useEffect(() => {\n    if (!conversationId && !currentConversationId && !isLoading) {\n      startConversation();\n    }\n  }, [conversationId, currentConversationId, isLoading]); // Remove startConversation from deps to prevent infinite loop\n\n  // Notify parent of conversation ID changes\n  useEffect(() => {\n    if (currentConversationId && onConversationIdChange) {\n      onConversationIdChange(currentConversationId);\n    }\n  }, [currentConversationId, onConversationIdChange]);\n\n  // Handle package generation trigger with delay to ensure conversation data is saved\n  useEffect(() => {\n    // Don't auto-generate if we're waiting for tag selection\n    if (showTagSelector) return;\n    \n    if (nextStep === \"generate\" && !isGeneratingPackages && currentConversationId) {\n      // Prevent duplicate generation for the same conversation\n      if (packageGenerationTriggeredRef.current === currentConversationId) {\n        return;\n      }\n      \n      console.log(\"Auto-triggering package generation for conversation:\", currentConversationId);\n      packageGenerationTriggeredRef.current = currentConversationId;\n      \n      // Add a small delay to ensure conversation data is fully saved\n      setTimeout(() => {\n        generateTravelPackages();\n      }, 500); // 500ms delay to allow conversation update to complete\n    }\n  }, [nextStep, isGeneratingPackages, currentConversationId, showTagSelector]);\n\n  // Detect when to show tag selector (after city is selected, before themes)\n  useEffect(() => {\n    if (!conversation) return;\n    \n    const lastMessage = conversation.messages[conversation.messages.length - 1];\n    const lastUserMessage = [...conversation.messages].reverse().find(m => m.role === \"user\");\n    \n    // Check if we're at the preferences selection step\n    if (lastMessage?.role === \"assistant\" && \n        (lastMessage.content?.toLowerCase().includes(\"must-visit places\") ||\n         lastMessage.content?.toLowerCase().includes(\"experiences you\") ||\n         nextStep === \"preferences\")) {\n      \n      // Extract city info from conversation\n      const cityMessages = conversation.messages.filter(m => m.role === \"user\");\n      let cityName = \"\";\n      let countryCode = \"\";\n      \n      // Look for city name in user messages\n      for (const msg of cityMessages) {\n        // Common city patterns\n        const cityPatterns = [\n          /^(tokyo|kyoto|osaka|paris|london|new york|barcelona|rome|bangkok|sydney|dubai|singapore)/i,\n          /going to ([a-z\\s]+)/i,\n          /visit ([a-z\\s]+)/i,\n        ];\n        \n        for (const pattern of cityPatterns) {\n          const match = msg.content.match(pattern);\n          if (match) {\n            cityName = match[1] || match[0];\n            break;\n          }\n        }\n        if (cityName) break;\n      }\n      \n      // Map city to country code (simplified - you might want to enhance this)\n      const cityCountryMap: Record<string, string> = {\n        'tokyo': 'JP', 'kyoto': 'JP', 'osaka': 'JP', 'okinawa': 'JP',\n        'new york': 'US', 'los angeles': 'US', 'san francisco': 'US', 'miami': 'US',\n        'paris': 'FR', 'nice': 'FR',\n        'london': 'GB', 'edinburgh': 'GB',\n        'barcelona': 'ES', 'madrid': 'ES',\n        'rome': 'IT', 'venice': 'IT', 'florence': 'IT',\n        'bangkok': 'TH', 'phuket': 'TH', 'chiang mai': 'TH',\n        'sydney': 'AU', 'melbourne': 'AU',\n        'singapore': 'SG',\n        'dubai': 'AE',\n      };\n      \n      const normalizedCity = cityName.toLowerCase().trim();\n      countryCode = cityCountryMap[normalizedCity] || 'US';\n      \n      if (cityName) {\n        setSelectedCity({ \n          name: cityName.split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' '), \n          countryCode \n        });\n        setShowTagSelector(true);\n      }\n    }\n  }, [conversation]);\n\n  // Notify parent when packages are ready\n  useEffect(() => {\n    if (conversation?.status === \"completed\" && onPackagesReady) {\n      onPackagesReady();\n    }\n  }, [conversation?.status, onPackagesReady]);\n\n  const handleSendMessage = () => {\n    if (!message.trim() || isSendingMessage) return;\n    sendUserMessage(message);\n    setMessage(\"\");\n    // Auto-focus the input after sending a message\n    setTimeout(() => {\n      inputRef.current?.focus();\n    }, 100);\n  };\n\n  const handleOptionSelect = (option: string) => {\n    sendUserMessage(option);\n    // Auto-focus the input after selecting an option\n    setTimeout(() => {\n      inputRef.current?.focus();\n    }, 100);\n  };\n\n  const handleTagsSelected = (tags: string[]) => {\n    // Send selected tags as a natural message\n    const tagsMessage = `I'm interested in: ${tags.join(', ')}`;\n    sendUserMessage(tagsMessage);\n    setShowTagSelector(false);\n    setSelectedCity(null);\n  };\n\n  const handleSkipTags = () => {\n    sendUserMessage(\"Mix of everything\");\n    setShowTagSelector(false);\n    setSelectedCity(null);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-brand-card border-brand-border flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <LoadingSpinner className=\"mx-auto mb-4\" />\n          <p className=\"text-brand-mute\">Starting conversation...</p>\n        </div>\n      </Card>\n    );\n  }\n\n  const messages = conversation?.messages || [];\n  const showWelcome = messages.length === 0;\n\n  return (\n    <Card className=\"bg-brand-card border-brand-border overflow-hidden flex flex-col h-[calc(100vh-200px)] min-h-[600px]\">\n      <CardHeader className=\"border-b border-brand-border\">\n        <CardTitle className=\"flex items-center gap-2 text-brand-text\">\n          <Plane className=\"w-5 h-5 text-brand-accent\" />\n          Plan Your Perfect Trip\n        </CardTitle>\n        <p className=\"text-brand-mute text-sm\">Chat with our AI travel consultant</p>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 p-4 overflow-y-auto space-y-4\">\n        {showWelcome && (\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-8 h-8 bg-brand-accent rounded-full flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"text-brand-bg w-4 h-4\" />\n            </div>\n            <div className=\"bg-brand-bg/50 rounded-2xl rounded-tl-sm px-4 py-3 max-w-xs\">\n              <p className=\"text-sm text-brand-text\">\n                Hi! I'm your AI travel consultant. Where would you like to go for your next adventure? 🌏\n              </p>\n            </div>\n          </div>\n        )}\n\n        {messages.map((msg) => (\n          <div\n            key={msg.id}\n            className={`flex items-start space-x-3 ${\n              msg.role === \"user\" ? \"flex-row-reverse space-x-reverse\" : \"\"\n            }`}\n          >\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n              msg.role === \"user\" \n                ? \"bg-brand-accent/20\" \n                : \"bg-brand-accent\"\n            }`}>\n              {msg.role === \"user\" ? (\n                <User className=\"text-brand-accent w-4 h-4\" />\n              ) : (\n                <Bot className=\"text-brand-bg w-4 h-4\" />\n              )}\n            </div>\n            <div className={`rounded-2xl px-4 py-3 max-w-sm ${\n              msg.role === \"user\"\n                ? \"bg-brand-accent/10 border border-brand-accent/20 rounded-tr-sm\"\n                : \"bg-brand-bg/50 rounded-tl-sm\"\n            }`}>\n              <p className=\"text-sm text-brand-text\">{msg.content}</p>\n              {/* Hide generic theme options if we're showing tag selector */}\n              {msg.options && msg.options.length > 0 && !showTagSelector && (\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  {msg.options.map((option, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"bg-brand-accent/20 text-brand-accent border-brand-accent/30 hover:bg-brand-accent/30 text-xs\"\n                      onClick={() => handleOptionSelect(option)}\n                      disabled={isSendingMessage}\n                    >\n                      {option}\n                    </Button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n\n        {/* Show TagSelector when appropriate */}\n        {showTagSelector && selectedCity && !isSendingMessage && (\n          <div className=\"mt-4\">\n            <EnhancedTagSelector\n              cityName={selectedCity.name}\n              countryCode={selectedCity.countryCode}\n              onTagsSelected={handleTagsSelected}\n              onSkip={handleSkipTags}\n            />\n          </div>\n        )}\n\n        {(isSendingMessage || isGeneratingPackages) && (\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-8 h-8 bg-brand-accent rounded-full flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"text-brand-bg w-4 h-4\" />\n            </div>\n            <div className=\"bg-brand-bg/50 rounded-2xl rounded-tl-sm px-4 py-3\">\n              <div className=\"flex items-center space-x-2\">\n                <LoadingSpinner size=\"sm\" />\n                <p className=\"text-sm text-brand-text\">\n                  {isGeneratingPackages ? \"Creating your travel packages...\" : \"Thinking...\"}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </CardContent>\n\n      <div className=\"p-4 border-t border-brand-border\">\n        <div className=\"flex space-x-2\">\n          <Input\n            ref={inputRef}\n            type=\"text\"\n            placeholder=\"Type your message...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            className=\"flex-1 bg-brand-bg border-brand-border text-brand-text placeholder:text-brand-mute focus:border-brand-accent\"\n            disabled={isSendingMessage || isGeneratingPackages}\n          />\n          <Button\n            onClick={handleSendMessage}\n            disabled={!message.trim() || isSendingMessage || isGeneratingPackages}\n            className=\"bg-brand-accent text-brand-bg hover:bg-yellow-500\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":12552},"client/src/components/itinerary/DayByDayView.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TravelPackage, ItineraryDay, Activity } from \"@/types/travel\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LoadingSpinner } from \"@/components/ui/LoadingSpinner\";\nimport { StarRating } from \"@/components/ui/star-rating\";\nimport { refinePackage, exportPackage } from \"@/lib/api\";\nimport { ArrowLeft, Edit, Plus, X, Sun, Sunset, Moon, Star, MapPin, Clock, Utensils, Loader2, Sparkles, ExternalLink, Map } from \"lucide-react\";\n\ninterface DayByDayViewProps {\n  package: TravelPackage;\n  onBack: () => void;\n  onAddPOI?: () => void;\n}\n\nexport function DayByDayView({ package: pkg, onBack, onAddPOI }: DayByDayViewProps) {\n  const [selectedDay, setSelectedDay] = useState<number>(1);\n  const [refinementInput, setRefinementInput] = useState(\"\");\n  const [refinementDay, setRefinementDay] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n\n  const refineMutation = useMutation({\n    mutationFn: ({ packageId, refinementRequest }: { packageId: string; refinementRequest: string }) =>\n      refinePackage(packageId, refinementRequest),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/packages', pkg.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/conversation', pkg.conversationId, 'packages'] });\n      setRefinementInput(\"\");\n      setRefinementDay(null);\n    },\n  });\n\n  const exportMutation = useMutation({\n    mutationFn: exportPackage,\n  });\n\n  const itinerary = (pkg.itinerary as ItineraryDay[]) || [];\n  const currentDay = itinerary.find(day => day.day === selectedDay);\n\n  const getTimeIcon = (time: string) => {\n    switch (time) {\n      case \"morning\":\n        return <Sun className=\"w-4 h-4\" />;\n      case \"afternoon\":\n        return <Sunset className=\"w-4 h-4\" />;\n      case \"evening\":\n        return <Moon className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTimeColor = (time: string) => {\n    switch (time) {\n      case \"morning\":\n        return \"text-amber-500\";\n      case \"afternoon\":\n        return \"text-orange-500\";\n      case \"evening\":\n        return \"text-purple-500\";\n      default:\n        return \"text-brand-accent\";\n    }\n  };\n\n  const getActivityTypeColor = (type: string) => {\n    switch (type) {\n      case \"restaurant\":\n      case \"food\":\n        return \"bg-red-500/10 text-red-600 border-red-200\";\n      case \"attraction\":\n        return \"bg-blue-500/10 text-blue-600 border-blue-200\";\n      case \"accommodation\":\n        return \"bg-purple-500/10 text-purple-600 border-purple-200\";\n      case \"nature\":\n        return \"bg-green-500/10 text-green-600 border-green-200\";\n      case \"shopping\":\n        return \"bg-pink-500/10 text-pink-600 border-pink-200\";\n      case \"culture\":\n        return \"bg-indigo-500/10 text-indigo-600 border-indigo-200\";\n      case \"nightlife\":\n        return \"bg-orange-500/10 text-orange-600 border-orange-200\";\n      default:\n        return \"bg-gray-500/10 text-gray-600 border-gray-200\";\n    }\n  };\n  \n  const formatReviewCount = (count: number): string => {\n    if (count >= 1000) {\n      return `${(count / 1000).toFixed(1)}k`;\n    }\n    return count.toLocaleString();\n  };\n\n  const handleRefinement = () => {\n    if (!refinementInput.trim() || refineMutation.isPending) return;\n    \n    // Add day context if refining a specific day\n    const request = refinementDay \n      ? `For day ${refinementDay} only: ${refinementInput}`\n      : refinementInput;\n      \n    refineMutation.mutate({\n      packageId: pkg.id,\n      refinementRequest: request,\n    });\n  };\n\n  const handleExport = () => {\n    exportMutation.mutate(pkg.id);\n  };\n\n  const removeActivity = (dayNumber: number, activityId: string, activityName: string) => {\n    // Immediately update the UI optimistically\n    const updatedItinerary = [...itinerary];\n    const dayIndex = updatedItinerary.findIndex(d => d.day === dayNumber);\n    if (dayIndex !== -1) {\n      updatedItinerary[dayIndex] = {\n        ...updatedItinerary[dayIndex],\n        activities: updatedItinerary[dayIndex].activities.filter(a => a.id !== activityId)\n      };\n    }\n    \n    // Update local state immediately for responsive UI\n    queryClient.setQueryData(\n      ['/api/conversation', pkg.conversationId, 'packages'],\n      (old: any) => {\n        if (!old) return old;\n        return old.map((p: any) => \n          p.id === pkg.id \n            ? { ...p, itinerary: updatedItinerary }\n            : p\n        );\n      }\n    );\n    \n    // Send the removal request to backend\n    const refinementRequest = `Remove \"${activityName}\" from day ${dayNumber}`;\n    refineMutation.mutate({\n      packageId: pkg.id,\n      refinementRequest,\n    });\n  };\n\n  return (\n    <div className=\"min-h-[calc(100vh-160px)]\">\n      <div className=\"mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={onBack}\n          className=\"text-brand-mute hover:text-brand-accent mb-4 p-0\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to packages\n        </Button>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2 text-brand-text\">{pkg.name}</h2>\n            <p className=\"text-brand-mute\">{pkg.days}-day detailed itinerary • {pkg.route}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-2xl font-bold text-brand-accent\">{pkg.budget}</p>\n            <p className=\"text-brand-mute text-sm\">per person</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Day List Navigation */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"bg-brand-card border-brand-border sticky top-24\">\n            <CardHeader>\n              <CardTitle className=\"text-brand-text\">Days Overview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {itinerary.map((day) => (\n                <Button\n                  key={day.day}\n                  variant=\"ghost\"\n                  className={`w-full justify-between p-3 h-auto ${\n                    selectedDay === day.day\n                      ? \"bg-brand-accent/20 border border-brand-accent/30 text-brand-text\"\n                      : \"text-brand-text hover:bg-brand-bg/50\"\n                  }`}\n                  onClick={() => setSelectedDay(day.day)}\n                >\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-sm\">{day.title}</p>\n                    <p className=\"text-brand-mute text-xs\">{day.location}</p>\n                  </div>\n                  <span className=\"text-xs text-brand-mute\">\n                    {day.activities?.length || 0} activities\n                  </span>\n                </Button>\n              ))}\n              {itinerary.length > 3 && (\n                <div className=\"pt-2\">\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full text-center text-brand-mute text-xs hover:text-brand-accent\"\n                  >\n                    View all {pkg.days} days\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Day Detail Content */}\n        <div className=\"lg:col-span-2\">\n          {currentDay ? (\n            <Card className=\"bg-brand-card border-brand-border\">\n              <CardHeader className=\"border-b border-brand-border\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <CardTitle className=\"text-brand-text\">{currentDay.title}</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-brand-mute hover:text-brand-accent\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={onAddPOI}\n                      className=\"bg-brand-accent text-brand-bg px-3 py-1 text-xs font-semibold hover:bg-yellow-500\"\n                    >\n                      <Plus className=\"w-3 h-3 mr-1\" />\n                      Add POI\n                    </Button>\n                  </div>\n                </div>\n                <p className=\"text-brand-mute text-sm\">{currentDay.description}</p>\n              </CardHeader>\n\n              <CardContent className=\"p-6\">\n                {/* Display activities from the simple string array */}\n                {currentDay.activities && currentDay.activities.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {/* Map activities to time slots based on their position */}\n                    {(currentDay.activities as any[]).map((activity: any, index: number) => {\n                      // Handle both string and object types\n                      const activityName = typeof activity === 'string' ? activity : activity.name;\n                      \n                      // Skip empty or placeholder activities\n                      if (!activityName || activityName === \"Evening leisure time\") return null;\n                      \n                      // Distribute activities across different time slots\n                      // For more than 3 activities, spread them out with different times\n                      const timeSlots = [\n                        { slot: \"morning\", label: \"9:00 AM\" },\n                        { slot: \"morning\", label: \"11:00 AM\" },\n                        { slot: \"afternoon\", label: \"1:00 PM\" },\n                        { slot: \"afternoon\", label: \"3:00 PM\" },\n                        { slot: \"evening\", label: \"5:00 PM\" },\n                        { slot: \"evening\", label: \"7:00 PM\" },\n                        { slot: \"evening\", label: \"9:00 PM\" }\n                      ];\n                      \n                      const timeInfo = timeSlots[Math.min(index, timeSlots.length - 1)];\n                      const timeSlot = timeInfo.slot;\n                      const timeLabel = timeInfo.label;\n                      \n                      // Parse activity information\n                      let activityRating = null;\n                      let activityReviews = null;\n                      let activityCategory = null;\n                      \n                      // Extract rating and reviews from activity string if present\n                      const ratingMatch = activityName.match(/(\\d+\\.?\\d*)★/);\n                      if (ratingMatch) {\n                        activityRating = parseFloat(ratingMatch[1]);\n                      }\n                      \n                      const reviewMatch = activityName.match(/\\((\\d+(?:,\\d+)*) reviews?\\)/);\n                      if (reviewMatch) {\n                        activityReviews = parseInt(reviewMatch[1].replace(/,/g, ''));\n                      }\n                      \n                      // Clean activity name (remove rating/review info)\n                      const cleanActivityName = activityName\n                        .replace(/\\s*-\\s*.*$/, '') // Remove everything after dash\n                        .replace(/\\s*\\d+\\.?\\d*★.*$/, '') // Remove rating and everything after\n                        .replace(/\\s*\\(\\d+(?:,\\d+)* reviews?\\)/, '') // Remove review count\n                        .trim();\n                      \n                      // Determine activity type and category based on keywords\n                      let activityType = \"attraction\";\n                      const activityLower = activityName.toLowerCase();\n                      \n                      if (activityLower.includes(\"restaurant\") || activityLower.includes(\"cafe\") || \n                          activityLower.includes(\"table\") || activityLower.includes(\"kitchen\") ||\n                          activityLower.includes(\"dining\") || activityLower.includes(\"food\")) {\n                        activityType = \"food\";\n                      } else if (activityLower.includes(\"hotel\") || activityLower.includes(\"palace\") ||\n                                 activityLower.includes(\"accommodation\")) {\n                        activityType = \"accommodation\";\n                      } else if (activityLower.includes(\"temple\") || activityLower.includes(\"shrine\") ||\n                                 activityLower.includes(\"museum\") || activityLower.includes(\"cultural\")) {\n                        activityType = \"culture\";\n                      } else if (activityLower.includes(\"park\") || activityLower.includes(\"garden\") ||\n                                 activityLower.includes(\"nature\") || activityLower.includes(\"beach\")) {\n                        activityType = \"nature\";\n                      } else if (activityLower.includes(\"shop\") || activityLower.includes(\"market\") ||\n                                 activityLower.includes(\"mall\")) {\n                        activityType = \"shopping\";\n                      } else if (activityLower.includes(\"bar\") || activityLower.includes(\"club\") ||\n                                 activityLower.includes(\"night\")) {\n                        activityType = \"nightlife\";\n                      }\n                      \n                      // If activity is an object, use its properties\n                      if (typeof activity === 'object') {\n                        activityRating = activity.rating || activityRating;\n                        activityReviews = activity.userRatingsTotal || activity.reviewCount || activityReviews;\n                        activityCategory = activity.category || activityType;\n                      }\n                      \n                      // Generate default review count if rating exists but no reviews\n                      if (activityRating && !activityReviews) {\n                        // Generate a realistic review count based on rating\n                        activityReviews = Math.floor(Math.random() * 2000) + 100; // 100-2100 reviews\n                      }\n                      \n                      return (\n                        <div key={`${currentDay.day}-${index}`} className=\"relative\">\n                          <div className=\"flex items-start space-x-4\">\n                            <div className=\"flex flex-col items-center\">\n                              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                                timeSlot === \"morning\" ? \"bg-amber-500/20 text-amber-500\" :\n                                timeSlot === \"afternoon\" ? \"bg-orange-500/20 text-orange-500\" :\n                                \"bg-purple-500/20 text-purple-500\"\n                              }`}>\n                                {getTimeIcon(timeSlot)}\n                              </div>\n                              {index < currentDay.activities.length - 2 && (\n                                <div className=\"w-px h-16 bg-brand-border mt-2\"></div>\n                              )}\n                            </div>\n                            <div className=\"flex-1\">\n                              <h4 className={`font-semibold mb-3 capitalize ${getTimeColor(timeSlot)}`}>\n                                {timeSlot} ({timeLabel})\n                              </h4>\n                              <div className=\"bg-brand-bg/30 border border-brand-border rounded-xl p-4 relative group\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute top-2 right-2 w-6 h-6 p-0 bg-red-500/20 text-red-400 rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                                  onClick={() => removeActivity(currentDay.day, `activity-${index}`, activityName)}\n                                >\n                                  <X className=\"w-3 h-3\" />\n                                </Button>\n                                \n                                <div className=\"flex items-start space-x-3\">\n                                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex-shrink-0 flex items-center justify-center\">\n                                    {activityType === \"food\" ? (\n                                      <Utensils className=\"w-6 h-6 text-red-400\" />\n                                    ) : activityType === \"accommodation\" ? (\n                                      <Star className=\"w-6 h-6 text-purple-400\" />\n                                    ) : (\n                                      <MapPin className=\"w-6 h-6 text-blue-400\" />\n                                    )}\n                                  </div>\n                                  \n                                  <div className=\"flex-1\">\n                                    {/* Title and Map Link */}\n                                    <div className=\"flex items-center justify-between mb-2\">\n                                      <h5 className=\"font-bold text-lg text-brand-text\">{cleanActivityName}</h5>\n                                      {/* Google Maps Link */}\n                                      {typeof activity === 'object' && activity.placeId && (\n                                        <a\n                                          href={`https://www.google.com/maps/search/?api=1&query_place_id=${activity.placeId}`}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                          className=\"inline-flex items-center justify-center w-8 h-8 rounded-full bg-blue-500/10 hover:bg-blue-500/20 transition-colors group\"\n                                          title=\"View on Google Maps\"\n                                        >\n                                          <Map className=\"w-4 h-4 text-blue-500 group-hover:text-blue-600\" />\n                                        </a>\n                                      )}\n                                    </div>\n                                    \n                                    {/* Rating and Reviews */}\n                                    {activityRating && (\n                                      <div className=\"flex items-center mb-3\">\n                                        <StarRating \n                                          rating={activityRating} \n                                          size=\"md\"\n                                          showNumber={true}\n                                          reviewCount={activityReviews}\n                                        />\n                                      </div>\n                                    )}\n                                    \n                                    {/* Category Tags */}\n                                    <div className=\"flex flex-wrap gap-2 mb-3\">\n                                      {/* Main category tag */}\n                                      <Badge\n                                        className={`px-3 py-1 text-xs font-medium rounded-full border ${getActivityTypeColor(activityType)}`}\n                                      >\n                                        {activityType.charAt(0).toUpperCase() + activityType.slice(1)}\n                                      </Badge>\n                                      \n                                      {/* Additional tags based on description */}\n                                      {typeof activity === 'object' && activity.description && (\n                                        <>\n                                          {activity.description.toLowerCase().includes('highly-rated') && (\n                                            <Badge className=\"px-3 py-1 text-xs font-medium rounded-full bg-yellow-500/10 text-yellow-600 border border-yellow-200\">\n                                              Highly Rated\n                                            </Badge>\n                                          )}\n                                          {activity.description.toLowerCase().includes('must-see') && (\n                                            <Badge className=\"px-3 py-1 text-xs font-medium rounded-full bg-purple-500/10 text-purple-600 border border-purple-200\">\n                                              Must-See\n                                            </Badge>\n                                          )}\n                                          {activity.description.toLowerCase().includes('cultural') && (\n                                            <Badge className=\"px-3 py-1 text-xs font-medium rounded-full bg-indigo-500/10 text-indigo-600 border border-indigo-200\">\n                                              Cultural\n                                            </Badge>\n                                          )}\n                                        </>\n                                      )}\n                                      \n                                      {/* Duration tag */}\n                                      <Badge className=\"px-3 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-600 border border-gray-200\">\n                                        {timeSlot === \"morning\" ? \"~2 hours\" : \n                                         timeSlot === \"afternoon\" ? \"~3 hours\" : \"~2 hours\"}\n                                      </Badge>\n                                    </div>\n                                    \n                                    {/* Description */}\n                                    <p className=\"text-sm text-gray-500 leading-relaxed\">\n                                      {typeof activity === 'object' && activity.description ? \n                                        activity.description : \n                                        (activityType === \"food\" ? \"Experience local cuisine at this popular dining spot\" : \n                                         activityType === \"accommodation\" ? \"Comfortable lodging with excellent amenities\" : \n                                         activityType === \"culture\" ? \"Cultural experience showcasing local heritage\" :\n                                         activityType === \"nature\" ? \"Natural beauty and outdoor experience\" :\n                                         activityType === \"shopping\" ? \"Shopping destination for local goods and souvenirs\" :\n                                         activityType === \"nightlife\" ? \"Evening entertainment and social scene\" :\n                                         \"Must-visit attraction showcasing local highlights\")}\n                                    </p>\n                                    \n                                    {/* Fallback Google Maps search link if no place_id */}\n                                    {(typeof activity !== 'object' || !activity.placeId) && (\n                                      <div className=\"mt-3\">\n                                        <a\n                                          href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(cleanActivityName)}`}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                          className=\"inline-flex items-center text-xs text-blue-500 hover:text-blue-600\"\n                                          title=\"Search on Google Maps\"\n                                        >\n                                          <Map className=\"w-3 h-3 mr-1\" />\n                                          Find on Maps\n                                        </a>\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-brand-mute\">No activities planned for this day yet.</p>\n                  </div>\n                )}\n\n                {/* Day Summary */}\n                <div className=\"mt-6 pt-6 border-t border-brand-border\">\n                  <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n                    <div>\n                      <p className=\"text-brand-mute\">Total Activities</p>\n                      <p className=\"font-semibold text-brand-accent\">{currentDay.activities?.length || 0}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-brand-mute\">Estimated Cost</p>\n                      <p className=\"font-semibold text-brand-accent\">$285</p>\n                    </div>\n                    <div>\n                      <p className=\"text-brand-mute\">Walking Distance</p>\n                      <p className=\"font-semibold text-brand-accent\">3.2 km</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card className=\"bg-brand-card border-brand-border\">\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-brand-mute\">Select a day to view details</p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Refinement Section */}\n          <Card className=\"mt-6 bg-brand-card border-brand-border\">\n            <CardHeader>\n              <CardTitle className=\"text-brand-text\">Refine Your Itinerary</CardTitle>\n              <p className=\"text-brand-mute text-sm\">\n                {refinementDay ? `Refining Day ${refinementDay} only` : \"Ask our AI to make changes to your trip\"}\n              </p>\n            </CardHeader>\n            <CardContent>\n              {/* Day selector for targeted refinement */}\n              <div className=\"flex items-center space-x-2 mb-3\">\n                <span className=\"text-sm text-brand-mute\">Scope:</span>\n                <Button\n                  size=\"sm\"\n                  variant={!refinementDay ? \"default\" : \"outline\"}\n                  onClick={() => setRefinementDay(null)}\n                  className={`h-7 ${!refinementDay ? \"bg-brand-accent text-brand-bg\" : \"text-brand-text border-brand-border\"}`}\n                >\n                  Entire Trip\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={refinementDay === selectedDay ? \"default\" : \"outline\"}\n                  onClick={() => setRefinementDay(selectedDay)}\n                  className={`h-7 ${refinementDay === selectedDay ? \"bg-brand-accent text-brand-bg\" : \"text-brand-text border-brand-border\"}`}\n                >\n                  Day {selectedDay} Only\n                </Button>\n              </div>\n              \n              <div className=\"flex space-x-2 mb-2\">\n                <Input\n                  placeholder={refinementDay \n                    ? `e.g., Replace morning activity with shopping, Add local market visit...`\n                    : `e.g., Add more cultural sites, Include budget-friendly options...`}\n                  value={refinementInput}\n                  onChange={(e) => setRefinementInput(e.target.value)}\n                  className=\"flex-1 bg-brand-bg border-brand-border text-brand-text placeholder:text-brand-mute focus:border-brand-accent\"\n                  disabled={refineMutation.isPending}\n                />\n                <Button\n                  onClick={handleRefinement}\n                  disabled={!refinementInput.trim() || refineMutation.isPending}\n                  className=\"bg-brand-accent text-brand-bg hover:bg-yellow-500 flex-shrink-0\"\n                >\n                  {refineMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-1 animate-spin\" />\n                      Refining...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-1\" />\n                      {refinementDay ? `Refine Day ${refinementDay}` : \"Refine All\"}\n                    </>\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs text-brand-mute\">\n                {pkg.conversationId ? \"2\" : \"3\"} refinement requests remaining\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Export Button */}\n          <Card className=\"mt-6 bg-brand-card border-brand-border\">\n            <CardContent className=\"p-4\">\n              <Button\n                onClick={handleExport}\n                disabled={exportMutation.isPending}\n                className=\"w-full bg-brand-accent text-brand-bg hover:bg-yellow-500\"\n              >\n                {exportMutation.isPending ? (\n                  <>\n                    <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    Exporting...\n                  </>\n                ) : (\n                  \"📥 Export Package\"\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":29627},"client/src/components/modals/AddPOIModal.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LoadingSpinner } from \"@/components/ui/LoadingSpinner\";\nimport { StarRating } from \"@/components/ui/star-rating\";\nimport { searchPlaces, getPhotoUrl } from \"@/lib/api\";\nimport { POI } from \"@/types/travel\";\nimport { Search, Plus, Star, MapPin, Clock, Sun, Sunset, Moon, X, Map, ExternalLink, DollarSign } from \"lucide-react\";\n\ninterface AddPOIModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAddPOI?: (poi: POI, timeSlot: string) => void;\n  conversationId?: string;\n  city?: string;\n  tags?: string[];\n}\n\nexport function AddPOIModal({ isOpen, onClose, onAddPOI, conversationId, city, tags }: AddPOIModalProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>(\"morning\");\n  const [searchResults, setSearchResults] = useState<POI[]>([]);\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const debounceTimer = useRef<NodeJS.Timeout>();\n\n  const searchMutation = useMutation({\n    mutationFn: (query: string) => searchPlaces(query, {\n      city,\n      tags,\n      timeSlot: selectedTimeSlot,\n      conversationId\n    }),\n    onSuccess: (data) => {\n      setSearchResults(data.results);\n    },\n  });\n\n  // Debounce search query (500ms delay)\n  useEffect(() => {\n    if (debounceTimer.current) {\n      clearTimeout(debounceTimer.current);\n    }\n\n    debounceTimer.current = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 500);\n\n    return () => {\n      if (debounceTimer.current) {\n        clearTimeout(debounceTimer.current);\n      }\n    };\n  }, [searchQuery]);\n\n  // Auto-search when debounced query changes\n  useEffect(() => {\n    if (debouncedQuery.trim() && debouncedQuery.length >= 2) {\n      searchMutation.mutate(debouncedQuery);\n    } else if (debouncedQuery === \"\") {\n      setSearchResults([]);\n    }\n  }, [debouncedQuery]);\n\n  const handleSearch = useCallback(() => {\n    if (!searchQuery.trim()) return;\n    searchMutation.mutate(searchQuery);\n  }, [searchQuery, searchMutation]);\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  const handleAddPOI = (poi: POI) => {\n    onAddPOI?.(poi, selectedTimeSlot);\n    onClose();\n    setSearchQuery(\"\");\n    setSearchResults([]);\n  };\n\n  const getActivityTypeColor = (types?: string[]) => {\n    if (!types || types.length === 0) return \"bg-gray-500/10 text-gray-600 border-gray-200\";\n    \n    const type = types[0];\n    if (types.includes(\"restaurant\") || types.includes(\"food\") || types.includes(\"cafe\") || types.includes(\"bakery\")) {\n      return \"bg-red-500/10 text-red-600 border-red-200\";\n    }\n    if (types.includes(\"tourist_attraction\") || types.includes(\"point_of_interest\")) {\n      return \"bg-blue-500/10 text-blue-600 border-blue-200\";\n    }\n    if (types.includes(\"lodging\") || types.includes(\"hotel\")) {\n      return \"bg-purple-500/10 text-purple-600 border-purple-200\";\n    }\n    if (types.includes(\"museum\") || types.includes(\"art_gallery\")) {\n      return \"bg-indigo-500/10 text-indigo-600 border-indigo-200\";\n    }\n    if (types.includes(\"park\") || types.includes(\"natural_feature\")) {\n      return \"bg-green-500/10 text-green-600 border-green-200\";\n    }\n    if (types.includes(\"shopping_mall\") || types.includes(\"store\")) {\n      return \"bg-pink-500/10 text-pink-600 border-pink-200\";\n    }\n    if (types.includes(\"bar\") || types.includes(\"night_club\")) {\n      return \"bg-orange-500/10 text-orange-600 border-orange-200\";\n    }\n    return \"bg-gray-500/10 text-gray-600 border-gray-200\";\n  };\n\n  const getPrimaryType = (types?: string[]) => {\n    if (!types || types.length === 0) return \"Place\";\n    \n    if (types.includes(\"restaurant\")) return \"Restaurant\";\n    if (types.includes(\"tourist_attraction\")) return \"Tourist Attraction\";\n    if (types.includes(\"lodging\")) return \"Accommodation\";\n    if (types.includes(\"shopping_mall\")) return \"Shopping\";\n    return types[0].replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getTimeSlotIcon = (timeSlot: string) => {\n    switch (timeSlot) {\n      case \"morning\":\n        return <Sun className=\"w-4 h-4 mr-2\" />;\n      case \"afternoon\":\n        return <Sunset className=\"w-4 h-4 mr-2\" />;\n      case \"evening\":\n        return <Moon className=\"w-4 h-4 mr-2\" />;\n      default:\n        return <Clock className=\"w-4 h-4 mr-2\" />;\n    }\n  };\n\n  const getTimeSlotColor = (timeSlot: string, isSelected: boolean) => {\n    const baseColors = {\n      morning: isSelected ? \"bg-amber-500/30 text-amber-500 border-amber-500\" : \"bg-amber-500/20 text-amber-500 hover:bg-amber-500/30\",\n      afternoon: isSelected ? \"bg-orange-500/30 text-orange-500 border-orange-500\" : \"bg-orange-500/20 text-orange-500 hover:bg-orange-500/30\",\n      evening: isSelected ? \"bg-purple-500/30 text-purple-500 border-purple-500\" : \"bg-purple-500/20 text-purple-500 hover:bg-purple-500/30\",\n    };\n    return baseColors[timeSlot as keyof typeof baseColors] || \"\";\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-brand-card border-brand-border max-w-2xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-brand-text\">Add Points of Interest</DialogTitle>\n          <DialogDescription className=\"text-brand-mute\">\n            Search for places to add to your itinerary\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-brand-mute w-4 h-4\" />\n            <Input\n              placeholder=\"Search for restaurants, attractions, activities...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyPress={handleKeyPress}\n              className=\"w-full bg-brand-bg border-brand-border text-brand-text placeholder:text-brand-mute pl-10 pr-20 focus:border-brand-accent\"\n            />\n            <Button\n              onClick={handleSearch}\n              disabled={!searchQuery.trim() || searchMutation.isPending}\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-brand-accent text-brand-bg px-3 py-1.5 text-xs font-semibold hover:bg-yellow-500\"\n            >\n              {searchMutation.isPending ? <LoadingSpinner size=\"sm\" /> : \"Search\"}\n            </Button>\n          </div>\n\n          {/* Search Results */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {searchMutation.isPending && (\n              <div className=\"text-center py-8\">\n                <LoadingSpinner className=\"mx-auto mb-4\" />\n                <p className=\"text-brand-mute\">Searching for places...</p>\n              </div>\n            )}\n\n            {searchMutation.isError && (\n              <div className=\"text-center py-8\">\n                <p className=\"text-red-400\">Failed to search places. Please try again.</p>\n              </div>\n            )}\n\n            {searchResults.length === 0 && !searchMutation.isPending && debouncedQuery && (\n              <div className=\"text-center py-8\">\n                <p className=\"text-brand-mute mb-3\">No places found for \"{debouncedQuery}\"</p>\n                <p className=\"text-brand-mute text-sm\">\n                  Try a broader search term or a different area\n                </p>\n                {city && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      // Retry without city restriction\n                      searchMutation.mutate(searchQuery);\n                    }}\n                    className=\"mt-3 text-xs\"\n                  >\n                    Search wider radius\n                  </Button>\n                )}\n              </div>\n            )}\n\n            {searchResults.map((poi) => (\n              <div\n                key={poi.place_id}\n                className=\"bg-brand-bg/30 border border-brand-border rounded-xl p-4 hover:border-brand-accent/50 transition-colors\"\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-16 h-16 bg-gray-200 rounded-lg flex-shrink-0 overflow-hidden\">\n                    {poi.photo_ref ? (\n                      <img\n                        src={getPhotoUrl(poi.photo_ref, 100)}\n                        alt={poi.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center bg-brand-border\">\n                        <MapPin className=\"w-6 h-6 text-brand-mute\" />\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    {/* Title Row */}\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-bold text-base text-brand-text flex-1 mr-2\">{poi.name}</h5>\n                      <div className=\"flex items-center space-x-1\">\n                        <a\n                          href={`https://www.google.com/maps/search/?api=1&query_place_id=${poi.place_id}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"inline-flex items-center justify-center w-7 h-7 rounded-full bg-blue-500/10 hover:bg-blue-500/20 transition-colors group\"\n                          title=\"View on Google Maps\"\n                        >\n                          <Map className=\"w-3.5 h-3.5 text-blue-500 group-hover:text-blue-600\" />\n                        </a>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleAddPOI(poi)}\n                          className=\"bg-brand-accent text-brand-bg px-3 py-1 text-xs font-semibold hover:bg-yellow-500\"\n                        >\n                          Add to {selectedTimeSlot}\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {/* Rating and Reviews */}\n                    {poi.rating && (\n                      <div className=\"mb-2\">\n                        <StarRating \n                          rating={poi.rating} \n                          size=\"sm\"\n                          showNumber={true}\n                          reviewCount={poi.user_ratings_total}\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Price Level and Distance */}\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      {poi.price_level && (\n                        <div className=\"flex items-center text-sm\">\n                          {Array.from({ length: 4 }).map((_, i) => (\n                            <DollarSign \n                              key={i}\n                              className={`w-3.5 h-3.5 ${\n                                i < (poi.price_level || 0)\n                                  ? 'text-green-500' \n                                  : 'text-gray-300'\n                              }`}\n                            />\n                          ))}\n                        </div>\n                      )}\n                      {poi.location && (\n                        <span className=\"text-xs text-brand-mute\">\n                          <MapPin className=\"w-3 h-3 inline mr-1\" />\n                          {city || 'Nearby'}\n                        </span>\n                      )}\n                      {poi.open_now !== undefined && (\n                        <span className={`text-xs font-medium ${poi.open_now ? \"text-green-500\" : \"text-red-500\"}`}>\n                          {poi.open_now ? \"Open now\" : \"Closed\"}\n                        </span>\n                      )}\n                    </div>\n                    \n                    {/* Category Tags */}\n                    <div className=\"flex flex-wrap gap-1.5\">\n                      <Badge\n                        className={`px-2 py-0.5 text-xs font-medium rounded-full border ${getActivityTypeColor(poi.types)}`}\n                      >\n                        {getPrimaryType(poi.types)}\n                      </Badge>\n                      {poi.types && poi.types.slice(1, 3).map((type, idx) => (\n                        <Badge\n                          key={idx}\n                          className=\"px-2 py-0.5 text-xs font-medium rounded-full bg-gray-100 text-gray-600 border border-gray-200\"\n                        >\n                          {type.replace(/_/g, \" \")}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    {/* Address */}\n                    {poi.address && (\n                      <p className=\"text-xs text-brand-mute mt-2 line-clamp-1\">{poi.address}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Time Slot Selection */}\n          <div className=\"pt-6 border-t border-brand-border\">\n            <h4 className=\"font-medium mb-3 text-brand-text\">Add to which time?</h4>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {[\"morning\", \"afternoon\", \"evening\"].map((timeSlot) => (\n                <Button\n                  key={timeSlot}\n                  variant=\"outline\"\n                  onClick={() => setSelectedTimeSlot(timeSlot)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors capitalize ${\n                    getTimeSlotColor(timeSlot, selectedTimeSlot === timeSlot)\n                  }`}\n                >\n                  {getTimeSlotIcon(timeSlot)}\n                  {timeSlot}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14450},"client/src/components/packages/PackageComparison.tsx":{"content":"import { TravelPackage } from \"@/types/travel\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { CleanPackageCard } from \"./CleanPackageCard\";\n\ninterface PackageComparisonProps {\n  packages: TravelPackage[];\n  onBack: () => void;\n  onSelectPackage: (pkg: TravelPackage) => void;\n}\n\nexport function PackageComparison({ packages, onBack, onSelectPackage }: PackageComparisonProps) {\n  return (\n    <div className=\"min-h-[calc(100vh-160px)] bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={onBack}\n            className=\"text-gray-600 hover:text-gray-900 mb-4 p-0\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to conversation\n          </Button>\n          \n          {/* Title with gradient */}\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold mb-3 bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n              Choose Your Perfect Journey\n            </h2>\n            <p className=\"text-gray-600\">Three personalized travel packages designed just for you</p>\n          </div>\n        </div>\n\n        {/* Package Cards Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {packages.map((pkg, index) => (\n            <CleanPackageCard\n              key={pkg.id}\n              package={pkg}\n              index={index}\n              onSelect={onSelectPackage}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1656},"client/src/components/packages/PackagePreview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LoadingSpinner } from \"@/components/ui/LoadingSpinner\";\nimport { getPackagesByConversation } from \"@/lib/api\";\nimport { TravelPackage } from \"@/types/travel\";\nimport { Sparkles, MapPin, Utensils, Camera, Plane } from \"lucide-react\";\n\ninterface PackagePreviewProps {\n  conversationId?: string;\n  onViewAllPackages?: () => void;\n  onSelectPackage?: (pkg: TravelPackage) => void;\n}\n\nexport function PackagePreview({ \n  conversationId, \n  onViewAllPackages, \n  onSelectPackage \n}: PackagePreviewProps) {\n  const [selectedPackageId, setSelectedPackageId] = useState<string>();\n\n  const { data: packages = [], isLoading, error } = useQuery<TravelPackage[]>({\n    queryKey: ['/api/conversation', conversationId, 'packages'],\n    enabled: !!conversationId,\n    staleTime: 0, // Override global staleTime to allow immediate refetching\n    refetchOnMount: true,\n  });\n\n  // Debug logging\n  console.log(\"PackagePreview state:\", { \n    conversationId, \n    packagesCount: packages.length, \n    isLoading, \n    error,\n    queryKey: ['/api/conversation', conversationId, 'packages']\n  });\n\n  const getPackageGradient = (type: string) => {\n    switch (type) {\n      case \"classic\":\n        return \"bg-gradient-to-br from-blue-500 to-purple-600\";\n      case \"foodie\":\n        return \"bg-gradient-to-br from-orange-500 to-red-600\";\n      case \"budget\":\n        return \"bg-gradient-to-br from-green-500 to-teal-600\";\n      default:\n        return \"bg-brand-accent\";\n    }\n  };\n\n  const getPackageIcon = (type: string) => {\n    switch (type) {\n      case \"foodie\":\n        return <Utensils className=\"w-4 h-4\" />;\n      case \"budget\":\n        return <Plane className=\"w-4 h-4\" />;\n      default:\n        return <Camera className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handlePackageClick = (pkg: TravelPackage) => {\n    setSelectedPackageId(pkg.id);\n    onSelectPackage?.(pkg);\n  };\n\n  if (!conversationId) {\n    return (\n      <Card className=\"bg-brand-card border-brand-border\">\n        <CardHeader className=\"border-b border-brand-border\">\n          <CardTitle className=\"text-brand-text\">Travel Packages</CardTitle>\n          <p className=\"text-brand-mute text-sm\">AI-generated options for your trip</p>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 bg-brand-accent/10 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n              <Sparkles className=\"text-brand-accent text-2xl w-8 h-8\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2 text-brand-text\">Packages will appear here</h3>\n            <p className=\"text-brand-mute text-sm\">Continue chatting to generate your travel options</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-brand-card border-brand-border\">\n        <CardHeader className=\"border-b border-brand-border\">\n          <CardTitle className=\"text-brand-text\">Travel Packages</CardTitle>\n          <p className=\"text-brand-mute text-sm\">AI-generated options for your trip</p>\n        </CardHeader>\n        <CardContent className=\"p-4 flex items-center justify-center\">\n          <div className=\"text-center py-12\">\n            <LoadingSpinner className=\"mx-auto mb-4\" />\n            <p className=\"text-brand-mute\">Loading packages...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (packages.length === 0) {\n    return (\n      <Card className=\"bg-brand-card border-brand-border\">\n        <CardHeader className=\"border-b border-brand-border\">\n          <CardTitle className=\"text-brand-text\">Travel Packages</CardTitle>\n          <p className=\"text-brand-mute text-sm\">AI-generated options for your trip</p>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 bg-brand-accent/10 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n              <Sparkles className=\"text-brand-accent text-2xl w-8 h-8\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2 text-brand-text\">Packages will appear here</h3>\n            <p className=\"text-brand-mute text-sm\">Continue chatting to generate your travel options</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-brand-card border-brand-border\">\n      <CardHeader className=\"border-b border-brand-border\">\n        <CardTitle className=\"text-brand-text\">Travel Packages</CardTitle>\n        <p className=\"text-brand-mute text-sm\">AI-generated options for your trip</p>\n      </CardHeader>\n\n      <CardContent className=\"p-4\">\n        <div className=\"space-y-4 mb-6\">\n          {packages.map((pkg: TravelPackage, index: number) => (\n            <div\n              key={pkg.id}\n              className={`bg-brand-bg/30 border rounded-xl p-4 hover:border-brand-accent/50 transition-colors cursor-pointer ${\n                selectedPackageId === pkg.id ? \"border-brand-accent\" : \"border-brand-border\"\n              }`}\n              onClick={() => handlePackageClick(pkg)}\n            >\n              {/* Simplified Package Card */}\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center text-white font-bold ${getPackageGradient(pkg.type)}`}>\n                    {String.fromCharCode(65 + index)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-brand-text\">{pkg.name}</h3>\n                    <p className=\"text-brand-mute text-xs mt-1\">{pkg.destination || pkg.route}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-bold text-brand-accent text-lg\">{pkg.budget}</p>\n                  <p className=\"text-brand-mute text-xs\">{pkg.days} days</p>\n                </div>\n              </div>\n              \n              {/* Compact Metrics as Tags */}\n              <div className=\"flex flex-wrap gap-2 mb-3\">\n                <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n                  <MapPin className=\"w-3 h-3 mr-1\" />\n                  {pkg.attractionCount} spots\n                </Badge>\n                <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n                  <Utensils className=\"w-3 h-3 mr-1\" />\n                  {pkg.diningCount} meals\n                </Badge>\n              </div>\n\n              {/* Key Highlights Only */}\n              <div className=\"flex flex-wrap gap-1.5\">\n                {pkg.highlights?.slice(0, 3).map((highlight: string, idx: number) => (\n                  <Badge\n                    key={idx}\n                    variant=\"outline\"\n                    className=\"bg-brand-accent/10 text-brand-accent border-brand-accent/30 text-xs px-2 py-0.5\"\n                  >\n                    {highlight}\n                  </Badge>\n                ))}\n                {pkg.highlights && pkg.highlights.length > 3 && (\n                  <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5 border-brand-border text-brand-mute\">\n                    +{pkg.highlights.length - 3} more\n                  </Badge>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <Button\n          onClick={onViewAllPackages}\n          className=\"w-full bg-brand-accent text-brand-bg py-3 font-semibold hover:bg-yellow-500\"\n        >\n          View All Packages\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7962},"client/src/components/ui/LoadingSpinner.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function LoadingSpinner({ className, size = \"md\" }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-6 w-6\",\n    lg: \"h-8 w-8\",\n  };\n\n  return (\n    <div\n      className={cn(\n        \"animate-spin rounded-full border-2 border-brand-border border-t-brand-accent\",\n        sizeClasses[size],\n        className\n      )}\n    />\n  );\n}\n","size_bytes":487},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/utils/textProcessing.ts":{"content":"// Utility functions for text processing and input normalization\n\n// Word to number conversion\nconst wordNumbers: Record<string, number> = {\n  'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\n  'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,\n  'eleven': 11, 'twelve': 12, 'thirteen': 13, 'fourteen': 14, 'fifteen': 15,\n  'sixteen': 16, 'seventeen': 17, 'eighteen': 18, 'nineteen': 19, 'twenty': 20,\n  'first': 1, 'second': 2, 'third': 3, 'fourth': 4, 'fifth': 5,\n  'sixth': 6, 'seventh': 7, 'eighth': 8, 'ninth': 9, 'tenth': 10,\n  'couple': 2, 'few': 3, 'several': 5, 'many': 7\n};\n\n// Convert word numbers to digits\nexport function normalizeNumberInput(text: string): string {\n  let normalized = text.toLowerCase();\n  \n  // Replace word numbers with digits\n  Object.entries(wordNumbers).forEach(([word, number]) => {\n    const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n    normalized = normalized.replace(regex, number.toString());\n  });\n  \n  return normalized;\n}\n\n// Country aliases mapping - maps variations to canonical names\nexport const countryAliases: Record<string, string> = {\n  'america': 'usa',\n  'united states': 'usa',\n  'united states of america': 'usa',\n  'us': 'usa',\n  'u.s.': 'usa',\n  'u.s.a.': 'usa',\n  'u.s': 'usa',\n  'states': 'usa',\n  'the states': 'usa',\n  'uk': 'england',\n  'united kingdom': 'england',\n  'great britain': 'england',\n  'britain': 'england',\n  'gb': 'england',\n  'south korea': 'korea',\n  's korea': 'korea',\n  's. korea': 'korea',\n  'republic of korea': 'korea',\n  'uae': 'dubai',\n  'united arab emirates': 'dubai',\n  'emirates': 'dubai',\n  'the netherlands': 'netherlands',\n  'holland': 'netherlands',\n  'nz': 'new zealand',\n  'sa': 'south africa',\n  'rsa': 'south africa'\n};\n\n// Popular cities by country - expanded with major travel destinations\nexport const popularCities: Record<string, string[]> = {\n  'japan': ['Tokyo', 'Kyoto', 'Osaka', 'Okinawa', 'Sapporo', 'Fukuoka', 'Yokohama', 'Nagoya', 'Kobe', 'Hiroshima'],\n  'france': ['Paris', 'Nice', 'Lyon', 'Marseille', 'Bordeaux', 'Strasbourg', 'Toulouse', 'Lille', 'Cannes', 'Monaco'],\n  'italy': ['Rome', 'Venice', 'Florence', 'Milan', 'Naples', 'Amalfi Coast', 'Sicily', 'Tuscany', 'Verona', 'Bologna'],\n  'spain': ['Barcelona', 'Madrid', 'Seville', 'Valencia', 'Granada', 'Malaga', 'Bilbao', 'Ibiza', 'Mallorca', 'San Sebastian'],\n  'usa': ['New York', 'Los Angeles', 'San Francisco', 'Miami', 'Las Vegas', 'Chicago', 'Boston', 'Hawaii', 'Orlando', 'Seattle'],\n  'uk': ['London', 'Edinburgh', 'Manchester', 'Liverpool', 'Cambridge', 'Oxford', 'Bath', 'York', 'Glasgow', 'Belfast'],\n  'england': ['London', 'Manchester', 'Liverpool', 'Cambridge', 'Oxford', 'Bath', 'York', 'Brighton', 'Bristol', 'Birmingham'],\n  'thailand': ['Bangkok', 'Phuket', 'Chiang Mai', 'Pattaya', 'Krabi', 'Koh Samui', 'Ayutthaya', 'Hua Hin', 'Koh Phi Phi', 'Chiang Rai'],\n  'australia': ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Gold Coast', 'Cairns', 'Adelaide', 'Tasmania', 'Darwin', 'Canberra'],\n  'germany': ['Berlin', 'Munich', 'Hamburg', 'Frankfurt', 'Cologne', 'Dresden', 'Heidelberg', 'Stuttgart', 'Nuremberg', 'Düsseldorf'],\n  'netherlands': ['Amsterdam', 'Rotterdam', 'The Hague', 'Utrecht', 'Eindhoven', 'Maastricht', 'Groningen', 'Delft', 'Leiden', 'Haarlem'],\n  'india': ['Delhi', 'Mumbai', 'Goa', 'Jaipur', 'Kerala', 'Agra', 'Bangalore', 'Varanasi', 'Udaipur', 'Chennai'],\n  'china': ['Beijing', 'Shanghai', 'Hong Kong', 'Shenzhen', 'Guangzhou', 'Xian', 'Chengdu', 'Hangzhou', 'Guilin', 'Suzhou'],\n  'korea': ['Seoul', 'Busan', 'Jeju', 'Incheon', 'Daegu', 'Gyeongju', 'Jeonju', 'Gangneung', 'Sokcho', 'Andong'],\n  'south korea': ['Seoul', 'Busan', 'Jeju', 'Incheon', 'Daegu', 'Gyeongju', 'Jeonju', 'Gangneung', 'Sokcho', 'Andong'],\n  'mexico': ['Mexico City', 'Cancun', 'Guadalajara', 'Playa del Carmen', 'Cabo', 'Puerto Vallarta', 'Tulum', 'Oaxaca', 'Cozumel', 'Merida'],\n  'brazil': ['Rio de Janeiro', 'São Paulo', 'Salvador', 'Brasília', 'Florianópolis', 'Foz do Iguaçu', 'Recife', 'Fortaleza', 'Manaus', 'Belo Horizonte'],\n  'canada': ['Toronto', 'Vancouver', 'Montreal', 'Calgary', 'Ottawa', 'Quebec City', 'Edmonton', 'Winnipeg', 'Halifax', 'Victoria'],\n  'dubai': ['Dubai'],\n  'uae': ['Dubai', 'Abu Dhabi', 'Sharjah', 'Ras Al Khaimah', 'Fujairah'],\n  'singapore': ['Singapore'],\n  'greece': ['Athens', 'Santorini', 'Mykonos', 'Crete', 'Rhodes', 'Corfu', 'Zakynthos', 'Thessaloniki', 'Meteora', 'Delphi'],\n  'portugal': ['Lisbon', 'Porto', 'Algarve', 'Madeira', 'Coimbra', 'Sintra', 'Cascais', 'Braga', 'Évora', 'Azores'],\n  'turkey': ['Istanbul', 'Cappadocia', 'Antalya', 'Izmir', 'Ankara', 'Bodrum', 'Pamukkale', 'Ephesus', 'Trabzon', 'Bursa'],\n  'indonesia': ['Bali', 'Jakarta', 'Yogyakarta', 'Lombok', 'Komodo', 'Bandung', 'Surabaya', 'Medan', 'Ubud', 'Gili Islands'],\n  'vietnam': ['Ho Chi Minh City', 'Hanoi', 'Da Nang', 'Hoi An', 'Nha Trang', 'Phu Quoc', 'Sapa', 'Halong Bay', 'Hue', 'Dalat'],\n  'malaysia': ['Kuala Lumpur', 'Penang', 'Langkawi', 'Malacca', 'Kota Kinabalu', 'Kuching', 'Cameron Highlands', 'Ipoh', 'Johor Bahru', 'Genting Highlands'],\n  'philippines': ['Manila', 'Boracay', 'Cebu', 'Palawan', 'Siargao', 'Bohol', 'Davao', 'Baguio', 'El Nido', 'Coron'],\n  'new zealand': ['Auckland', 'Wellington', 'Queenstown', 'Christchurch', 'Rotorua', 'Dunedin', 'Hamilton', 'Napier', 'Nelson', 'Taupo'],\n  'switzerland': ['Zurich', 'Geneva', 'Lucerne', 'Interlaken', 'Bern', 'Zermatt', 'Basel', 'Lausanne', 'St. Moritz', 'Grindelwald'],\n  'austria': ['Vienna', 'Salzburg', 'Innsbruck', 'Hallstatt', 'Graz', 'Linz', 'Alpbach', 'Feldkirch', 'Kitzbühel', 'Bad Gastein'],\n  'belgium': ['Brussels', 'Bruges', 'Antwerp', 'Ghent', 'Leuven', 'Liège', 'Namur', 'Mons', 'Ostend', 'Dinant'],\n  'egypt': ['Cairo', 'Luxor', 'Aswan', 'Alexandria', 'Sharm El Sheikh', 'Hurghada', 'Giza', 'Abu Simbel', 'Dahab', 'Marsa Alam'],\n  'morocco': ['Marrakech', 'Casablanca', 'Fez', 'Chefchaouen', 'Rabat', 'Tangier', 'Essaouira', 'Agadir', 'Meknes', 'Ouarzazate'],\n  'south africa': ['Cape Town', 'Johannesburg', 'Durban', 'Kruger National Park', 'Port Elizabeth', 'Pretoria', 'Stellenbosch', 'Knysna', 'Hermanus', 'Drakensberg']\n};\n\n// Get popular cities for a country\nexport function getPopularCitiesForCountry(country: string): string[] {\n  const normalized = country.toLowerCase().trim();\n  return popularCities[normalized] || [];\n}\n\n// Fuzzy matching for destinations (both countries and cities)\nexport function fuzzyMatchDestination(input: string): { \n  destination: string | null; \n  isCountry: boolean;\n  suggestedCities?: string[];\n} {\n  const normalized = input.toLowerCase().trim();\n  \n  // First check country aliases\n  const aliasMatch = countryAliases[normalized];\n  const searchTerm = aliasMatch || normalized;\n  \n  // Check if it's a known country (using alias or direct match)\n  const countryMatch = Object.keys(popularCities).find(country => {\n    return country === searchTerm || \n           levenshteinDistance(searchTerm, country) <= 2 ||\n           country.includes(searchTerm) ||\n           searchTerm.includes(country);\n  });\n  \n  if (countryMatch) {\n    const cities = getPopularCitiesForCountry(countryMatch);\n    // Format display name properly for known countries\n    const displayName = countryMatch === 'usa' ? 'USA' : \n                       countryMatch.charAt(0).toUpperCase() + countryMatch.slice(1);\n    return {\n      destination: displayName,\n      isCountry: true,\n      suggestedCities: cities.slice(0, 5) // Return top 5 cities\n    };\n  }\n  \n  // Common city typos and variations\n  const destinationMap: Record<string, string> = {\n    // Japanese cities\n    'tokyo': 'Tokyo, Japan',\n    'tokio': 'Tokyo, Japan',\n    'kyoto': 'Kyoto, Japan',\n    'kioto': 'Kyoto, Japan',\n    'osaka': 'Osaka, Japan',\n    'okinawa': 'Okinawa, Japan',\n    'sapporo': 'Sapporo, Japan',\n    'fukuoka': 'Fukuoka, Japan',\n    'nagoya': 'Nagoya, Japan',\n    'kobe': 'Kobe, Japan',\n    'yokohama': 'Yokohama, Japan',\n    'hiroshima': 'Hiroshima, Japan',\n    'nara': 'Nara, Japan',\n    'hokkaido': 'Hokkaido, Japan',\n    \n    // London variations\n    'lodon': 'London, England',\n    'londen': 'London, England',\n    'londn': 'London, England',\n    'london': 'London, England',\n    \n    // Paris variations\n    'paris': 'Paris, France',\n    'pari': 'Paris, France',\n    'parris': 'Paris, France',\n    'nice': 'Nice, France',\n    'lyon': 'Lyon, France',\n    'marseille': 'Marseille, France',\n    \n    // Italian cities\n    'rome': 'Rome, Italy',\n    'roma': 'Rome, Italy',\n    'venice': 'Venice, Italy',\n    'venezia': 'Venice, Italy',\n    'florence': 'Florence, Italy',\n    'firenze': 'Florence, Italy',\n    'milan': 'Milan, Italy',\n    'milano': 'Milan, Italy',\n    'naples': 'Naples, Italy',\n    'napoli': 'Naples, Italy',\n    \n    // Spanish cities\n    'barcelona': 'Barcelona, Spain',\n    'barca': 'Barcelona, Spain',\n    'madrid': 'Madrid, Spain',\n    'seville': 'Seville, Spain',\n    'sevilla': 'Seville, Spain',\n    'valencia': 'Valencia, Spain',\n    'granada': 'Granada, Spain',\n    \n    // US cities\n    'new york': 'New York, USA',\n    'newyork': 'New York, USA',\n    'ny': 'New York, USA',\n    'nyc': 'New York, USA',\n    'manhattan': 'New York, USA',\n    'los angeles': 'Los Angeles, USA',\n    'san francisco': 'San Francisco, USA',\n    'sf': 'San Francisco, USA',\n    'miami': 'Miami, USA',\n    'vegas': 'Las Vegas, USA',\n    'las vegas': 'Las Vegas, USA',\n    'chicago': 'Chicago, USA',\n    'boston': 'Boston, USA',\n    'seattle': 'Seattle, USA',\n    'dallas': 'Dallas, USA',\n    'houston': 'Houston, USA',\n    'austin': 'Austin, USA',\n    'denver': 'Denver, USA',\n    'atlanta': 'Atlanta, USA',\n    'orlando': 'Orlando, USA',\n    'phoenix': 'Phoenix, USA',\n    'portland': 'Portland, USA',\n    'washington': 'Washington DC, USA',\n    'dc': 'Washington DC, USA',\n    'philadelphia': 'Philadelphia, USA',\n    'san diego': 'San Diego, USA',\n    \n    // Other major cities\n    'dubai': 'Dubai, UAE',\n    'dubay': 'Dubai, UAE',\n    'bangkok': 'Bangkok, Thailand',\n    'sydney': 'Sydney, Australia',\n    'sidney': 'Sydney, Australia',\n    'singapore': 'Singapore',\n    'amsterdam': 'Amsterdam, Netherlands',\n    'berlin': 'Berlin, Germany',\n    'munich': 'Munich, Germany',\n    'istanbul': 'Istanbul, Turkey',\n    'athens': 'Athens, Greece',\n    'lisbon': 'Lisbon, Portugal',\n    'lisboa': 'Lisbon, Portugal'\n  };\n  \n  // Direct city match\n  if (destinationMap[normalized]) {\n    return {\n      destination: destinationMap[normalized],\n      isCountry: false\n    };\n  }\n  \n  // Special handling for Singapore variations (sigaore, singpore, etc.)\n  if (normalized.includes('sing') || normalized.includes('sigap') || \n      normalized.includes('sgp') || normalized === 'sg' ||\n      levenshteinDistance(normalized, 'singapore') <= 4) {\n    return {\n      destination: 'Singapore',\n      isCountry: false\n    };\n  }\n  \n  // Fuzzy matching using Levenshtein distance for cities\n  let bestMatch = null;\n  let bestScore = Infinity;\n  \n  for (const [key, value] of Object.entries(destinationMap)) {\n    const distance = levenshteinDistance(normalized, key);\n    // More lenient for longer city names\n    const threshold = key.length <= 5 ? 2 : Math.floor(key.length * 0.35);\n    \n    if (distance <= threshold && distance < bestScore) {\n      bestScore = distance;\n      bestMatch = value;\n    }\n  }\n  \n  if (bestMatch) {\n    return {\n      destination: bestMatch,\n      isCountry: false\n    };\n  }\n  \n  // Check all cities in popular cities list with fuzzy matching\n  for (const [country, cities] of Object.entries(popularCities)) {\n    for (const city of cities) {\n      const cityNormalized = city.toLowerCase();\n      const distance = levenshteinDistance(normalized, cityNormalized);\n      const threshold = city.length <= 5 ? 2 : Math.floor(city.length * 0.35);\n      \n      if (distance <= threshold) {\n        const countryDisplay = country === 'usa' ? 'USA' : \n                              country === 'uae' ? 'UAE' :\n                              country.charAt(0).toUpperCase() + country.slice(1);\n        return {\n          destination: `${city}, ${countryDisplay}`,\n          isCountry: false\n        };\n      }\n    }\n  }\n  \n  return {\n    destination: null,\n    isCountry: false\n  };\n}\n\n// Simple Levenshtein distance implementation for fuzzy matching\nfunction levenshteinDistance(a: string, b: string): number {\n  const matrix: number[][] = [];\n  \n  for (let i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  }\n  \n  for (let j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  }\n  \n  for (let i = 1; i <= b.length; i++) {\n    for (let j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1) === a.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1, // substitution\n          matrix[i][j - 1] + 1,     // insertion\n          matrix[i - 1][j] + 1      // deletion\n        );\n      }\n    }\n  }\n  \n  return matrix[b.length][a.length];\n}\n\n// Normalize various input formats\nexport function normalizeUserInput(text: string): {\n  normalized: string;\n  detectedDestination?: string;\n  isCountry?: boolean;\n  suggestedCities?: string[];\n  detectedDays?: number;\n  detectedPeople?: number;\n} {\n  const result: any = {\n    normalized: text\n  };\n  \n  // Normalize numbers\n  const normalizedText = normalizeNumberInput(text);\n  result.normalized = normalizedText;\n  \n  // Try to detect destination (country or city)\n  const destinationMatch = fuzzyMatchDestination(text);\n  if (destinationMatch.destination) {\n    result.detectedDestination = destinationMatch.destination;\n    result.isCountry = destinationMatch.isCountry;\n    result.suggestedCities = destinationMatch.suggestedCities;\n  }\n  \n  // Try to extract days\n  const daysMatch = normalizedText.match(/(\\d+)\\s*(day|night)/i);\n  if (daysMatch) {\n    result.detectedDays = parseInt(daysMatch[1]);\n  }\n  \n  // Try to extract people count - more flexible patterns\n  // Direct number without units\n  const simpleNumberMatch = normalizedText.match(/^(\\d+)$/);\n  if (simpleNumberMatch && !result.detectedDays) {\n    // If we already have destination and days, this number is likely people count\n    result.detectedPeople = parseInt(simpleNumberMatch[1]);\n  }\n  \n  // Number with people-related words\n  const peopleMatch = normalizedText.match(/(\\d+)\\s*(people|person|traveler|adult|guest|of us)?/i);\n  if (peopleMatch) {\n    result.detectedPeople = parseInt(peopleMatch[1]);\n  }\n  \n  // \"We are X\" patterns\n  const weAreMatch = normalizedText.match(/we\\s*(?:are|'re)?\\s*(\\d+)/i);\n  if (weAreMatch) {\n    result.detectedPeople = parseInt(weAreMatch[1]);\n  }\n  \n  // \"X of us\" patterns\n  const ofUsMatch = normalizedText.match(/(\\d+)\\s*of\\s*us/i);\n  if (ofUsMatch) {\n    result.detectedPeople = parseInt(ofUsMatch[1]);\n  }\n  \n  return result;\n}\n\n// Suggest corrections for unrecognized input\nexport function suggestCorrection(input: string): string | null {\n  const normalized = input.toLowerCase().trim();\n  \n  // Check if it looks like a destination typo\n  const possibleDestination = fuzzyMatchDestination(normalized);\n  if (possibleDestination.destination) {\n    return `Did you mean ${possibleDestination.destination}?`;\n  }\n  \n  // Check if it's close to known travel-related words\n  const travelKeywords = [\n    'beach', 'mountain', 'city', 'adventure', 'relax', 'culture',\n    'history', 'food', 'shopping', 'nightlife', 'nature', 'luxury',\n    'budget', 'family', 'romantic', 'solo', 'business'\n  ];\n  \n  for (const keyword of travelKeywords) {\n    if (levenshteinDistance(normalized, keyword) <= 2) {\n      return `Did you mean \"${keyword}\"?`;\n    }\n  }\n  \n  return null;\n}","size_bytes":15652},"server/services/enhancedPackageGenerator.ts":{"content":"import { searchPlaces } from './googlePlaces';\nimport type { PackageGenerationRequest, GeneratedPackage } from './openai';\nimport { filterPOIs } from '../utils/safetyFilters';\nimport { \n  estimatePOIDuration, \n  createIntelligentItinerary, \n  convertToItineraryFormat,\n  type EnhancedPOI \n} from './intelligentItineraryBuilder';\n\nexport interface POIWithReason {\n  name: string;\n  placeId: string;\n  reason: string;\n  rating?: number;\n  reviewCount?: number;\n  category: string;\n  types?: string[];\n  description?: string;\n  address?: string;\n}\n\ninterface DayItinerary {\n  day: number;\n  location: string;\n  title: string;\n  description: string;\n  activities: string[];\n  poisWithReasons?: POIWithReason[];\n}\n\ninterface EnhancedPackageGenerationRequest extends PackageGenerationRequest {\n  selectedTags?: string[];\n  freeTextPreferences?: string[];\n}\n\n// Map tags to Google Places search queries\nfunction getSearchQueryForTag(tag: string, destination: string): string {\n  const tagMappings: Record<string, string> = {\n    // Food tags\n    'ramen': 'ramen restaurants',\n    'sushi': 'sushi restaurants',\n    'street food': 'street food markets',\n    'local cuisine': 'traditional restaurants',\n    'michelin': 'michelin star restaurants',\n    'coffee': 'specialty coffee shops',\n    'bakery': 'artisan bakeries',\n    \n    // Water activities (from free-text)\n    'water activities': 'water parks onsen hot springs beaches swimming pools aquariums',\n    'play water': 'water parks beaches swimming pools water sports',\n    'onsen': 'hot springs onsen spa',\n    'beach': 'beaches seaside water sports',\n    'aquarium': 'aquariums marine life exhibits',\n    \n    // Landmarks & Attractions\n    'tokyo tower': 'Tokyo Tower observation deck',\n    'eiffel tower': 'Eiffel Tower',\n    'statue of liberty': 'Statue of Liberty',\n    'golden gate bridge': 'Golden Gate Bridge',\n    'big ben': 'Big Ben Westminster',\n    \n    // Districts & Neighborhoods\n    'shibuya': 'Shibuya crossing district',\n    'akihabara': 'Akihabara electronics district',\n    'times square': 'Times Square',\n    'central park': 'Central Park',\n    'las vegas strip': 'Las Vegas Strip casinos',\n    'the strip': 'Las Vegas Strip',\n    \n    // Experiences\n    'museums': 'art museums',\n    'temples': 'buddhist temples shrines',\n    'shopping': 'shopping malls markets',\n    'nightlife': 'bars nightclubs',\n    'jazz': 'jazz bars clubs',\n    'broadway': 'broadway theaters shows',\n    'spa': 'spa wellness centers',\n    \n    // Generic interests\n    'must-see highlights': 'top tourist attractions',\n    'local food & culture': 'authentic local restaurants cultural sites',\n    'local food': 'authentic local restaurants food markets street food',\n    'cultural sites': 'temples shrines museums historical sites',\n    'hidden gems': 'off the beaten path attractions',\n    'adventure': 'outdoor activities adventure sports',\n    'family friendly': 'family attractions kids activities',\n    'romantic': 'romantic restaurants couples activities',\n    'budget': 'free attractions budget restaurants',\n    'luxury': 'luxury hotels fine dining',\n    'nature': 'parks gardens mountains hiking trails nature reserves'\n  };\n\n  const lowerTag = tag.toLowerCase();\n  const baseQuery = tagMappings[lowerTag] || tag;\n  return `${baseQuery} in ${destination}`;\n}\n\n// Determine POI category based on types from Google Places\nfunction categorizePOI(types: string[]): string {\n  // Check types in order of specificity\n  if (!types || types.length === 0) return 'Attraction';\n  \n  // Food & Dining\n  if (types.some(t => t.includes('restaurant'))) {\n    if (types.includes('fine_dining_restaurant')) return 'Fine Dining';\n    if (types.includes('fast_food_restaurant')) return 'Fast Food';\n    if (types.includes('seafood_restaurant')) return 'Seafood';\n    if (types.includes('steak_house')) return 'Steakhouse';\n    if (types.includes('sushi_restaurant')) return 'Sushi';\n    if (types.includes('pizza_restaurant')) return 'Pizza';\n    if (types.includes('chinese_restaurant')) return 'Chinese Restaurant';\n    if (types.includes('italian_restaurant')) return 'Italian Restaurant';\n    if (types.includes('mexican_restaurant')) return 'Mexican Restaurant';\n    if (types.includes('japanese_restaurant')) return 'Japanese Restaurant';\n    if (types.includes('thai_restaurant')) return 'Thai Restaurant';\n    if (types.includes('indian_restaurant')) return 'Indian Restaurant';\n    if (types.includes('vegetarian_restaurant')) return 'Vegetarian';\n    return 'Restaurant';\n  }\n  if (types.includes('cafe')) return 'Cafe';\n  if (types.includes('coffee_shop')) return 'Coffee Shop';\n  if (types.includes('bakery')) return 'Bakery';\n  if (types.includes('bar')) return 'Bar';\n  if (types.includes('pub')) return 'Pub';\n  if (types.includes('brewery')) return 'Brewery';\n  if (types.includes('winery')) return 'Winery';\n  if (types.includes('food_court')) return 'Food Court';\n  if (types.includes('food_market')) return 'Food Market';\n  if (types.includes('ice_cream_shop')) return 'Ice Cream';\n  if (types.includes('dessert_shop')) return 'Dessert';\n  if (types.some(t => t.includes('food'))) return 'Food';\n  \n  // Museums & Culture\n  if (types.some(t => t.includes('museum'))) {\n    if (types.includes('art_museum')) return 'Art Museum';\n    if (types.includes('history_museum')) return 'History Museum';\n    if (types.includes('science_museum')) return 'Science Museum';\n    if (types.includes('natural_history_museum')) return 'Natural History Museum';\n    if (types.includes('children_museum')) return 'Children\\'s Museum';\n    return 'Museum';\n  }\n  if (types.includes('art_gallery')) return 'Art Gallery';\n  if (types.includes('performing_arts_theater')) return 'Theater';\n  if (types.includes('opera_house')) return 'Opera House';\n  if (types.includes('concert_hall')) return 'Concert Hall';\n  if (types.includes('movie_theater')) return 'Cinema';\n  if (types.includes('library')) return 'Library';\n  if (types.includes('cultural_center')) return 'Cultural Center';\n  \n  // Religious Sites\n  if (types.includes('church')) return 'Church';\n  if (types.includes('cathedral')) return 'Cathedral';\n  if (types.includes('temple')) return 'Temple';\n  if (types.includes('buddhist_temple')) return 'Buddhist Temple';\n  if (types.includes('hindu_temple')) return 'Hindu Temple';\n  if (types.includes('shrine')) return 'Shrine';\n  if (types.includes('mosque')) return 'Mosque';\n  if (types.includes('synagogue')) return 'Synagogue';\n  if (types.includes('cemetery')) return 'Cemetery';\n  if (types.includes('place_of_worship')) return 'Religious Site';\n  \n  // Historical Sites\n  if (types.includes('castle')) return 'Castle';\n  if (types.includes('palace')) return 'Palace';\n  if (types.includes('fortress')) return 'Fortress';\n  if (types.includes('historical_landmark')) return 'Historical Site';\n  if (types.includes('unesco_world_heritage_site')) return 'UNESCO Site';\n  if (types.includes('monument')) return 'Monument';\n  if (types.includes('memorial')) return 'Memorial';\n  if (types.includes('ruins')) return 'Ruins';\n  \n  // Shopping\n  if (types.includes('shopping_mall')) return 'Shopping Mall';\n  if (types.includes('outlet_mall')) return 'Outlet Mall';\n  if (types.includes('department_store')) return 'Department Store';\n  if (types.includes('market')) return 'Market';\n  if (types.includes('local_market')) return 'Local Market';\n  if (types.includes('farmers_market')) return 'Farmers Market';\n  if (types.includes('flea_market')) return 'Flea Market';\n  if (types.includes('night_market')) return 'Night Market';\n  if (types.includes('bookstore')) return 'Bookstore';\n  if (types.includes('clothing_store')) return 'Clothing Store';\n  if (types.includes('jewelry_store')) return 'Jewelry Store';\n  if (types.includes('gift_shop')) return 'Gift Shop';\n  if (types.includes('souvenir_shop')) return 'Souvenir Shop';\n  if (types.includes('antique_store')) return 'Antique Store';\n  if (types.some(t => t.includes('store') || t.includes('shop'))) return 'Shop';\n  \n  // Entertainment & Nightlife\n  if (types.includes('amusement_park')) return 'Amusement Park';\n  if (types.includes('theme_park')) return 'Theme Park';\n  if (types.includes('water_park')) return 'Water Park';\n  if (types.includes('night_club')) return 'Night Club';\n  if (types.includes('casino')) return 'Casino';\n  if (types.includes('bowling_alley')) return 'Bowling';\n  if (types.includes('arcade')) return 'Arcade';\n  if (types.includes('escape_room')) return 'Escape Room';\n  if (types.includes('karaoke')) return 'Karaoke';\n  if (types.includes('stadium')) return 'Stadium';\n  if (types.includes('sports_complex')) return 'Sports Complex';\n  \n  // Nature & Outdoors\n  if (types.includes('national_park')) return 'National Park';\n  if (types.includes('park')) return 'Park';\n  if (types.includes('city_park')) return 'City Park';\n  if (types.includes('botanical_garden')) return 'Botanical Garden';\n  if (types.includes('garden')) return 'Garden';\n  if (types.includes('japanese_garden')) return 'Japanese Garden';\n  if (types.includes('arboretum')) return 'Arboretum';\n  if (types.includes('beach')) return 'Beach';\n  if (types.includes('lake')) return 'Lake';\n  if (types.includes('mountain_peak')) return 'Mountain';\n  if (types.includes('hiking_area')) return 'Hiking Trail';\n  if (types.includes('campground')) return 'Campground';\n  if (types.includes('natural_feature')) return 'Natural Feature';\n  if (types.includes('waterfall')) return 'Waterfall';\n  if (types.includes('hot_spring')) return 'Hot Spring';\n  \n  // Animals & Wildlife\n  if (types.includes('zoo')) return 'Zoo';\n  if (types.includes('aquarium')) return 'Aquarium';\n  if (types.includes('safari_park')) return 'Safari Park';\n  if (types.includes('wildlife_park')) return 'Wildlife Park';\n  if (types.includes('animal_shelter')) return 'Animal Shelter';\n  \n  // Wellness & Relaxation\n  if (types.includes('spa')) return 'Spa';\n  if (types.includes('wellness_center')) return 'Wellness Center';\n  if (types.includes('yoga_studio')) return 'Yoga Studio';\n  if (types.includes('gym')) return 'Gym';\n  if (types.includes('fitness_center')) return 'Fitness Center';\n  \n  // Landmarks & Viewpoints\n  if (types.includes('landmark')) return 'Landmark';\n  if (types.includes('viewpoint')) return 'Viewpoint';\n  if (types.includes('scenic_spot')) return 'Scenic Spot';\n  if (types.includes('observation_deck')) return 'Observation Deck';\n  if (types.includes('tower')) return 'Tower';\n  if (types.includes('lighthouse')) return 'Lighthouse';\n  if (types.includes('bridge')) return 'Bridge';\n  if (types.includes('fountain')) return 'Fountain';\n  if (types.includes('statue')) return 'Statue';\n  \n  // Districts & Areas\n  if (types.includes('neighborhood')) return 'Neighborhood';\n  if (types.includes('town_square')) return 'Town Square';\n  if (types.includes('plaza')) return 'Plaza';\n  if (types.includes('promenade')) return 'Promenade';\n  if (types.includes('pier')) return 'Pier';\n  if (types.includes('harbor')) return 'Harbor';\n  if (types.includes('marina')) return 'Marina';\n  \n  // Transportation (usually not attractions but might appear)\n  if (types.includes('train_station')) return 'Train Station';\n  if (types.includes('subway_station')) return 'Subway Station';\n  if (types.includes('airport')) return 'Airport';\n  if (types.includes('ferry_terminal')) return 'Ferry Terminal';\n  \n  // Education\n  if (types.includes('university')) return 'University';\n  if (types.includes('school')) return 'School';\n  \n  // Generic categories based on common type patterns\n  if (types.includes('tourist_attraction')) return 'Tourist Attraction';\n  if (types.includes('point_of_interest')) return 'Point of Interest';\n  \n  // Fallback to first type that's not too generic\n  const meaningfulTypes = types.filter(t => \n    !['establishment', 'point_of_interest', 'tourist_attraction'].includes(t)\n  );\n  \n  if (meaningfulTypes.length > 0) {\n    // Format the type name nicely\n    const type = meaningfulTypes[0];\n    return type.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  }\n  \n  return 'Attraction';\n}\n\nasync function searchPOIsForTag(tag: string, destination: string, count: number = 3): Promise<POIWithReason[]> {\n  const query = getSearchQueryForTag(tag, destination);\n  \n  try {\n    const places = await searchPlaces(query, {\n      minRating: 4.0,\n      minReviews: 100\n    });\n    \n    // Apply safety filters to remove inappropriate POIs\n    const filteredPlaces = filterPOIs(places);\n    \n    return filteredPlaces.slice(0, count).map(place => ({\n      name: place.name,\n      placeId: place.place_id,\n      reason: `Selected for \"${tag}\" - ${place.rating ? `rated ${place.rating}★` : 'popular choice'} with ${place.user_ratings_total || 0} reviews`,\n      rating: place.rating,\n      reviewCount: place.user_ratings_total,\n      category: categorizePOI(place.types || []),\n      types: place.types,\n      description: place.description,\n      address: place.address\n    }));\n  } catch (error) {\n    console.error(`Failed to search POIs for tag \"${tag}\":`, error);\n    return [];\n  }\n}\n\nasync function getTopAttractions(destination: string, count: number = 10): Promise<POIWithReason[]> {\n  try {\n    const places = await searchPlaces(`top attractions in ${destination}`, {\n      minRating: 3.8,  // Lower threshold to get more results\n      minReviews: 100  // Lower threshold to get more results\n    });\n    \n    // Apply safety filters\n    const filteredPlaces = filterPOIs(places);\n    \n    return filteredPlaces.slice(0, count).map(place => ({\n      name: place.name,\n      placeId: place.place_id,\n      reason: `Must-see attraction - ${place.rating ? `rated ${place.rating}★` : 'highly popular'} with ${place.user_ratings_total || 0} reviews`,\n      rating: place.rating,\n      reviewCount: place.user_ratings_total,\n      category: categorizePOI(place.types || []),\n      types: place.types,\n      description: place.description,\n      address: place.address\n    }));\n  } catch (error) {\n    console.error(`Failed to get top attractions for ${destination}:`, error);\n    return [];\n  }\n}\n\nasync function getRestaurants(destination: string, count: number = 10): Promise<POIWithReason[]> {\n  try {\n    const places = await searchPlaces(`best restaurants in ${destination}`, {\n      minRating: 3.8,  // Lower threshold to get more results\n      minReviews: 50   // Lower threshold to get more results\n    });\n    \n    // Apply safety filters\n    const filteredPlaces = filterPOIs(places);\n    \n    return filteredPlaces.slice(0, count).map(place => ({\n      name: place.name,\n      placeId: place.place_id,\n      reason: `Highly-rated dining - ${place.rating ? `${place.rating}★` : 'popular'} (${place.user_ratings_total || 0} reviews)`,\n      rating: place.rating,\n      reviewCount: place.user_ratings_total,\n      category: categorizePOI(place.types || []),\n      types: place.types,\n      description: place.description,\n      address: place.address\n    }));\n  } catch (error) {\n    console.error(`Failed to get restaurants for ${destination}:`, error);\n    return [];\n  }\n}\n\nfunction buildDayItinerary(\n  dayNum: number,\n  destination: string,\n  tagPOIs: POIWithReason[],\n  generalPOIs: POIWithReason[],\n  restaurants: POIWithReason[],\n  allPreferences: string[],  // Changed from selectedTags to allPreferences\n  globalUsedPlaceIds: Set<string>,  // Track POIs used across all days\n  totalDays: number  // Add total days to properly distribute\n): DayItinerary {\n  const poisForDay: POIWithReason[] = [];\n  const TARGET_ACTIVITIES_PER_DAY = 5; // Consistent target for all days\n  \n  // Distribute tag POIs evenly across ALL days\n  const availableTagPOIs = tagPOIs.filter(poi => !globalUsedPlaceIds.has(poi.placeId));\n  const tagPOIsPerDay = Math.ceil(availableTagPOIs.length / (totalDays - dayNum + 1));\n  \n  // Add 1-2 tag POIs for this day\n  let tagCount = 0;\n  for (const poi of availableTagPOIs) {\n    if (tagCount >= Math.min(2, tagPOIsPerDay)) break;\n    if (!globalUsedPlaceIds.has(poi.placeId)) {\n      poisForDay.push(poi);\n      globalUsedPlaceIds.add(poi.placeId);\n      tagCount++;\n    }\n  }\n  \n  // Calculate how many general POIs we need\n  const generalNeeded = TARGET_ACTIVITIES_PER_DAY - poisForDay.length - 1; // -1 for restaurant\n  \n  // Get unused general POIs\n  const availableGeneralPOIs = generalPOIs.filter(poi => !globalUsedPlaceIds.has(poi.placeId));\n  \n  // Use different starting points for variety, but ensure we have enough POIs\n  const chunkSize = Math.max(5, Math.ceil(availableGeneralPOIs.length / totalDays));\n  const startIdx = Math.min((dayNum - 1) * chunkSize, Math.max(0, availableGeneralPOIs.length - generalNeeded));\n  \n  // Add general attractions\n  let addedGeneral = 0;\n  for (let i = startIdx; i < availableGeneralPOIs.length && addedGeneral < generalNeeded; i++) {\n    const poi = availableGeneralPOIs[i];\n    if (!globalUsedPlaceIds.has(poi.placeId)) {\n      poisForDay.push(poi);\n      globalUsedPlaceIds.add(poi.placeId);\n      addedGeneral++;\n    }\n  }\n  \n  // If we still need more, look from the beginning\n  if (addedGeneral < generalNeeded) {\n    for (let i = 0; i < startIdx && addedGeneral < generalNeeded; i++) {\n      const poi = availableGeneralPOIs[i];\n      if (!globalUsedPlaceIds.has(poi.placeId)) {\n        poisForDay.push(poi);\n        globalUsedPlaceIds.add(poi.placeId);\n        addedGeneral++;\n      }\n    }\n  }\n  \n  // Add a restaurant for dining\n  const availableRestaurants = restaurants.filter(r => !globalUsedPlaceIds.has(r.placeId));\n  if (availableRestaurants.length > 0) {\n    // Try to pick different restaurants for each day\n    const restaurantIdx = (dayNum - 1) % availableRestaurants.length;\n    const restaurant = availableRestaurants[restaurantIdx] || availableRestaurants[0];\n    if (restaurant) {\n      poisForDay.push(restaurant);\n      globalUsedPlaceIds.add(restaurant.placeId);\n    }\n  }\n  \n  // Generate title based on what's included in this specific day\n  const tagPOIsInDay = poisForDay.filter(poi => \n    poi.reason.includes('Selected for')\n  );\n  const tagsCovered = tagPOIsInDay.length > 0 \n    ? `featuring ${tagPOIsInDay.map(p => p.reason.split('\"')[1]).filter(Boolean).join(' & ')}`\n    : 'exploring top attractions';\n  \n  // Ensure minimum activities per day (fill with any available POIs if needed)\n  if (poisForDay.length < 4) {\n    console.warn(`Day ${dayNum} only has ${poisForDay.length} activities. Attempting to add more...`);\n    \n    // Try to add any unused POIs from all sources\n    const allAvailable = [...tagPOIs, ...generalPOIs, ...restaurants]\n      .filter(poi => !globalUsedPlaceIds.has(poi.placeId));\n    \n    for (const poi of allAvailable) {\n      if (poisForDay.length >= 4) break;\n      poisForDay.push(poi);\n      globalUsedPlaceIds.add(poi.placeId);\n    }\n  }\n  \n  // Log for debugging\n  console.log(`Day ${dayNum} POIs (${poisForDay.length} total):`, poisForDay.map(p => ({ \n    name: p.name, \n    placeId: p.placeId,\n    source: p.reason.includes('Selected for') ? 'tag' : 'discovery'\n  })));\n  \n  return {\n    day: dayNum,\n    location: destination,\n    title: `Day ${dayNum}: ${destination} ${tagsCovered}`,\n    description: `Experience the best of ${destination} with a mix of your selected interests and must-see highlights`,\n    activities: poisForDay.map(poi => `${poi.name} - ${poi.reason}`),\n    poisWithReasons: poisForDay\n  };\n}\n\nexport async function generateEnhancedTravelPackages(\n  request: EnhancedPackageGenerationRequest\n): Promise<GeneratedPackage[]> {\n  console.log('=== INTELLIGENT PACKAGE GENERATION ===');\n  console.log('Destination:', request.destination);\n  console.log('Days:', request.days);\n  console.log('People:', request.people);\n  console.log('Theme:', request.theme);\n  console.log('Selected tags:', request.selectedTags);\n  console.log('Free-text preferences:', request.freeTextPreferences);\n  console.log('Number of tags:', request.selectedTags?.length || 0);\n  console.log('Number of free-text preferences:', request.freeTextPreferences?.length || 0);\n  \n  // Merge selected tags with free-text preferences\n  const selectedTags = request.selectedTags || [];\n  const freeTextPreferences = request.freeTextPreferences || [];\n  const allPreferences = [...selectedTags, ...freeTextPreferences];\n  \n  // Fetch POIs for all preferences (selected tags + free-text) - get more for longer trips\n  const tagPOIsPromises = allPreferences.map(tag => \n    searchPOIsForTag(tag, request.destination, Math.max(5, request.days))\n  );\n  \n  // Fetch more POIs to ensure we have enough for all days (at least 5-6 per day)\n  const attractionsNeeded = Math.max(20, request.days * 6);\n  const restaurantsNeeded = Math.max(10, request.days * 2);\n  \n  // Fetch multiple types of attractions to get more variety\n  const [tagPOIsArrays, topAttractions, museums, parks, shopping, restaurants, cafes, hotels] = await Promise.all([\n    Promise.all(tagPOIsPromises),\n    getTopAttractions(request.destination, attractionsNeeded),\n    searchPlaces(`museums in ${request.destination}`, { minRating: 3.8, minReviews: 50 }),\n    searchPlaces(`parks gardens in ${request.destination}`, { minRating: 3.8, minReviews: 50 }),\n    searchPlaces(`shopping markets in ${request.destination}`, { minRating: 3.8, minReviews: 50 }),\n    getRestaurants(request.destination, restaurantsNeeded),\n    searchPlaces(`cafes coffee shops in ${request.destination}`, { minRating: 3.8, minReviews: 50 }),\n    searchPlaces(`hotels in ${request.destination}`, { minRating: 4.0 })\n  ]);\n  \n  // Combine all general attractions\n  const allGeneralAttractions = [\n    ...topAttractions,\n    ...museums.slice(0, 5).map(place => ({\n      name: place.name,\n      placeId: place.place_id,\n      reason: `Cultural experience - ${place.rating ? `rated ${place.rating}★` : 'interesting'} (${place.user_ratings_total || 0} reviews)`,\n      rating: place.rating,\n      reviewCount: place.user_ratings_total,\n      category: categorizePOI(place.types || []),\n      types: place.types,\n      description: place.description,\n      address: place.address\n    })),\n    ...parks.slice(0, 5).map(place => ({\n      name: place.name,\n      placeId: place.place_id,\n      reason: `Green space - ${place.rating ? `rated ${place.rating}★` : 'relaxing'} (${place.user_ratings_total || 0} reviews)`,\n      rating: place.rating,\n      reviewCount: place.user_ratings_total,\n      category: categorizePOI(place.types || []),\n      types: place.types,\n      description: place.description,\n      address: place.address\n    })),\n    ...shopping.slice(0, 5).map(place => ({\n      name: place.name,\n      placeId: place.place_id,\n      reason: `Shopping destination - ${place.rating ? `rated ${place.rating}★` : 'popular'} (${place.user_ratings_total || 0} reviews)`,\n      rating: place.rating,\n      reviewCount: place.user_ratings_total,\n      category: categorizePOI(place.types || []),\n      types: place.types,\n      description: place.description,\n      address: place.address\n    }))\n  ];\n  \n  // Combine all dining options\n  const allDiningOptions = [\n    ...restaurants,\n    ...cafes.slice(0, 5).map(place => ({\n      name: place.name,\n      placeId: place.place_id,\n      reason: `Coffee & refreshments - ${place.rating ? `rated ${place.rating}★` : 'cozy'} (${place.user_ratings_total || 0} reviews)`,\n      rating: place.rating,\n      reviewCount: place.user_ratings_total,\n      category: categorizePOI(place.types || []),\n      types: place.types,\n      description: place.description,\n      address: place.address\n    }))\n  ];\n  \n  // Flatten and deduplicate tag POIs\n  const allTagPOIs: POIWithReason[] = [];\n  const seenPlaceIds = new Set<string>();\n  \n  tagPOIsArrays.forEach(pois => {\n    pois.forEach(poi => {\n      if (!seenPlaceIds.has(poi.placeId)) {\n        allTagPOIs.push(poi);\n        seenPlaceIds.add(poi.placeId);\n      }\n    });\n  });\n  \n  // Enhance all POIs with duration estimates\n  const enhancedPOIs: EnhancedPOI[] = [\n    ...allTagPOIs,\n    ...allGeneralAttractions,\n    ...allDiningOptions\n  ].map(poi => ({\n    ...poi,\n    estimatedDuration: estimatePOIDuration(poi),\n    types: (poi as any).types || [],\n    openingHours: (poi as any).openingHours,\n    geometry: (poi as any).geometry\n  }));\n  \n  // Use intelligent itinerary builder\n  const dayPlans = await createIntelligentItinerary(\n    enhancedPOIs,\n    request.days,\n    request.destination,\n    allPreferences\n  );\n  \n  // Convert to the expected format\n  const itinerary = dayPlans.map(dayPlan => \n    convertToItineraryFormat(dayPlan, request.destination)\n  )\n  \n  // Validate tag coverage in the intelligent itinerary\n  const usedPOIs = new Set<string>();\n  dayPlans.forEach(plan => {\n    [...plan.morningPOIs, ...plan.afternoonPOIs, ...plan.eveningPOIs].forEach(poi => {\n      usedPOIs.add(poi.placeId);\n    });\n  });\n  \n  const tagsCovered = new Set<string>();\n  allTagPOIs.forEach(poi => {\n    if (usedPOIs.has(poi.placeId)) {\n      const tagMatch = poi.reason.match(/\"([^\"]+)\"/);\n      if (tagMatch) {\n        tagsCovered.add(tagMatch[1]);\n      }\n    }\n  });\n  \n  const missingTags = allPreferences.filter(tag => !tagsCovered.has(tag));\n  if (missingTags.length > 0) {\n    console.warn('Warning: Some preferences not fully covered:', missingTags);\n  }\n  \n  // Generate three package variations\n  const packages: GeneratedPackage[] = [\n    {\n      name: `Personalized ${request.destination} Experience`,\n      type: 'classic' as const,\n      budget: `$${1000 + (request.days * 200)}`,\n      description: `Tailored to your interests: ${allPreferences.join(', ')}. Includes ${allTagPOIs.length} hand-picked venues matching your preferences plus must-see highlights.`,\n      route: request.destination,\n      accommodation: hotels[0]?.name || 'Recommended hotel',\n      diningCount: allDiningOptions.length,\n      attractionCount: allTagPOIs.length + allGeneralAttractions.length,\n      highlights: [...allTagPOIs.slice(0, 3), ...allGeneralAttractions.slice(0, 2)].map(p => p.name),\n      itinerary: itinerary\n    },\n    {\n      name: `Foodie ${request.destination} Experience`,\n      type: 'foodie' as const,\n      budget: `$${800 + (request.days * 150)}`,\n      description: `A culinary journey through ${request.destination}${selectedTags.length > 0 ? ' featuring your selected interests' : ''}. Perfect for food lovers.`,\n      route: request.destination,\n      accommodation: hotels[1]?.name || 'Quality hotel',\n      diningCount: Math.min(allDiningOptions.length, 12),\n      attractionCount: Math.min(allGeneralAttractions.length + allTagPOIs.length, 10),\n      highlights: [...allDiningOptions.slice(0, 3), ...allTagPOIs.slice(0, 2)].map(p => p.name),\n      itinerary: itinerary.map(day => ({\n        ...day,\n        activities: day.activities.slice(0, 4), // Slightly fewer activities\n        pois: day.pois ? day.pois.slice(0, 4) : undefined // Also limit POIs\n      }))\n    },\n    {\n      name: `Budget ${request.destination} Discovery`,\n      type: 'budget' as const,\n      budget: `$${500 + (request.days * 100)}`,\n      description: `Affordable exploration focusing on free and low-cost attractions${selectedTags.length > 0 ? ' including your interests' : ''}.`,\n      route: request.destination,\n      accommodation: 'Budget-friendly accommodation',\n      diningCount: Math.min(allDiningOptions.length, 5),\n      attractionCount: Math.min(allGeneralAttractions.length, 10),\n      highlights: [...allTagPOIs.slice(0, 2), ...allGeneralAttractions.slice(0, 3)].map(p => p.name),\n      itinerary: itinerary.map(day => ({\n        ...day,\n        activities: day.activities.slice(0, 3), // Fewer activities for budget option\n        pois: day.pois ? day.pois.slice(0, 3) : undefined // Also limit POIs\n      }))\n    }\n  ];\n  \n  // Log coverage statistics\n  console.log(`Tag coverage: ${tagsCovered.size}/${allPreferences.length} preferences represented`);\n  console.log(`Total unique POIs available: ${enhancedPOIs.length}`);\n  console.log(`POIs used in itinerary: ${usedPOIs.size}`);\n  console.log(`Average feasibility score: ${dayPlans.reduce((sum, p) => sum + p.feasibilityScore, 0) / dayPlans.length}`);\n  \n  return packages;\n}","size_bytes":28178},"client/src/hooks/useSession.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\n\nconst SESSION_KEY = 'travelify_session_id';\n\nexport function useSession() {\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const hasInitialized = useRef(false);\n\n  useEffect(() => {\n    if (hasInitialized.current) return;\n    hasInitialized.current = true;\n\n    // Try to get existing session from localStorage\n    const existingSessionId = localStorage.getItem(SESSION_KEY);\n    \n    if (existingSessionId) {\n      setSessionId(existingSessionId);\n      console.log('[useSession] Using existing session:', existingSessionId);\n    } else {\n      // Session will be created by the server on first API call\n      console.log('[useSession] No existing session, will be created by server');\n    }\n  }, []);\n\n  // Update localStorage whenever sessionId changes\n  useEffect(() => {\n    if (sessionId) {\n      localStorage.setItem(SESSION_KEY, sessionId);\n    }\n  }, [sessionId]);\n\n  const updateSessionFromResponse = (response: Response) => {\n    const newSessionId = response.headers.get('X-Session-Id');\n    if (newSessionId && newSessionId !== sessionId) {\n      setSessionId(newSessionId);\n      console.log('[useSession] Session updated from server:', newSessionId);\n    }\n  };\n\n  const clearSession = () => {\n    localStorage.removeItem(SESSION_KEY);\n    setSessionId(null);\n    console.log('[useSession] Session cleared');\n  };\n\n  return {\n    sessionId,\n    updateSessionFromResponse,\n    clearSession\n  };\n}","size_bytes":1486},"server/middleware/sessionMiddleware.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { sessionManager } from '../services/sessionManager';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      sessionId?: string;\n      sessionPreferences?: any;\n    }\n  }\n}\n\nexport function sessionMiddleware(req: Request, res: Response, next: NextFunction) {\n  // Try to get session ID from multiple sources\n  let sessionId = req.headers['x-session-id'] as string || \n                  req.cookies?.sessionId ||\n                  req.query.sessionId as string;\n  \n  // Get or create session\n  const conversationId = req.body?.conversationId || req.params?.conversationId;\n  sessionId = sessionManager.getOrCreateSession(sessionId, conversationId);\n  \n  // Set session ID in request\n  req.sessionId = sessionId;\n  req.sessionPreferences = sessionManager.getPreferences(sessionId);\n  \n  // Set session ID in response header and cookie\n  res.setHeader('X-Session-Id', sessionId);\n  res.cookie('sessionId', sessionId, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 4 * 60 * 60 * 1000 // 4 hours\n  });\n  \n  next();\n}\n\nexport function extractSessionPreferences(req: Request) {\n  if (!req.sessionId) {\n    return null;\n  }\n  \n  const conversation = req.body;\n  if (!conversation) {\n    return null;\n  }\n  \n  // Extract preferences from conversation messages\n  const preferences: any = {\n    freeTextTags: [],\n    cuisinePreferences: [],\n    activityPreferences: [],\n    travelStyle: []\n  };\n  \n  // Extract from selected tags\n  if (conversation.selectedTags) {\n    preferences.freeTextTags.push(...conversation.selectedTags);\n  }\n  \n  // Extract from conversation messages\n  if (conversation.messages) {\n    conversation.messages.forEach((msg: any) => {\n      if (msg.role === 'user') {\n        const text = msg.content.toLowerCase();\n        \n        // Extract activity preferences\n        if (text.includes('water') || text.includes('beach') || text.includes('swim')) {\n          preferences.activityPreferences.push('water activities');\n        }\n        if (text.includes('food') || text.includes('eat') || text.includes('restaurant')) {\n          preferences.activityPreferences.push('dining');\n        }\n        if (text.includes('culture') || text.includes('museum') || text.includes('history')) {\n          preferences.activityPreferences.push('cultural');\n        }\n        if (text.includes('nature') || text.includes('park') || text.includes('outdoor')) {\n          preferences.activityPreferences.push('nature');\n        }\n        if (text.includes('shopping') || text.includes('market')) {\n          preferences.activityPreferences.push('shopping');\n        }\n        if (text.includes('nightlife') || text.includes('bar') || text.includes('club')) {\n          preferences.activityPreferences.push('nightlife');\n        }\n        \n        // Extract cuisine preferences\n        const cuisines = ['japanese', 'italian', 'chinese', 'korean', 'thai', 'indian', \n                         'mexican', 'french', 'mediterranean', 'american', 'burgers', \n                         'pizza', 'sushi', 'ramen', 'bbq', 'seafood', 'vegetarian', 'vegan'];\n        cuisines.forEach(cuisine => {\n          if (text.includes(cuisine)) {\n            preferences.cuisinePreferences.push(cuisine);\n          }\n        });\n        \n        // Extract travel style\n        if (text.includes('budget') || text.includes('cheap') || text.includes('affordable')) {\n          preferences.travelStyle.push('budget');\n        }\n        if (text.includes('luxury') || text.includes('premium') || text.includes('high-end')) {\n          preferences.travelStyle.push('luxury');\n        }\n        if (text.includes('adventure') || text.includes('active')) {\n          preferences.travelStyle.push('adventure');\n        }\n        if (text.includes('relax') || text.includes('peaceful') || text.includes('quiet')) {\n          preferences.travelStyle.push('relaxing');\n        }\n        if (text.includes('family') || text.includes('kids') || text.includes('children')) {\n          preferences.travelStyle.push('family-friendly');\n        }\n        \n        // Extract avoidances\n        if (text.includes('no crowd') || text.includes('avoid crowd') || text.includes('not crowded')) {\n          if (!preferences.avoidances) preferences.avoidances = [];\n          preferences.avoidances.push('crowded');\n        }\n        if (text.includes('no spicy') || text.includes('not spicy')) {\n          if (!preferences.avoidances) preferences.avoidances = [];\n          preferences.avoidances.push('spicy');\n        }\n      }\n    });\n  }\n  \n  // Remove duplicates\n  Object.keys(preferences).forEach(key => {\n    if (Array.isArray(preferences[key])) {\n      preferences[key] = Array.from(new Set(preferences[key]));\n    }\n  });\n  \n  // Update session with extracted preferences\n  if (req.sessionId) {\n    sessionManager.updatePreferences(req.sessionId, preferences);\n  }\n  \n  return preferences;\n}","size_bytes":4996},"server/services/sessionEnhancedPackageGenerator.ts":{"content":"import { searchPlaces, getPlaceDetails } from './googlePlaces';\nimport { generateEnhancedTravelPackages } from './enhancedPackageGenerator';\nimport { sessionManager } from './sessionManager';\nimport type { TravelPackage, POI } from '../../shared/schema';\n\nexport class SessionEnhancedPackageGenerator {\n  constructor() {}\n  \n  async generatePackages(\n    destination: string,\n    duration: number,\n    peopleCount: number,\n    selectedTags: string[],\n    freeTextPreferences: string[],\n    conversationMessages: any[],\n    sessionId?: string\n  ): Promise<any[]> {\n    // First, generate base packages using the global algorithm\n    const basePackages = await generateEnhancedTravelPackages({\n      destination,\n      days: duration,\n      people: peopleCount,\n      theme: '',  // Theme is handled via tags/preferences\n      selectedTags,\n      freeTextPreferences\n    });\n    \n    // If no session, return base packages\n    if (!sessionId) {\n      return basePackages;\n    }\n    \n    // Get session preferences\n    const sessionPrefs = sessionManager.getPreferences(sessionId);\n    if (!sessionPrefs) {\n      return basePackages;\n    }\n    \n    console.log(`[SessionEnhancedPackageGenerator] Applying session personalization for ${sessionId}`);\n    \n    // Apply session-specific personalization to each package\n    const personalizedPackages = await Promise.all(\n      basePackages.map(async (pkg: any) => {\n        const personalizedItinerary = await this.personalizeItinerary(\n          pkg.itinerary,\n          sessionId,\n          destination\n        );\n        \n        return {\n          ...pkg,\n          itinerary: personalizedItinerary\n        };\n      })\n    );\n    \n    return personalizedPackages;\n  }\n  \n  private async personalizeItinerary(\n    itinerary: any[],\n    sessionId: string,\n    destination: string\n  ): Promise<any[]> {\n    const personalizedDays = await Promise.all(\n      itinerary.map(async (day) => {\n        const personalizedActivities = await this.personalizeActivities(\n          day.activities,\n          sessionId,\n          destination,\n          day.date\n        );\n        \n        return {\n          ...day,\n          activities: personalizedActivities\n        };\n      })\n    );\n    \n    return personalizedDays;\n  }\n  \n  private async personalizeActivities(\n    activities: any[],\n    sessionId: string,\n    destination: string,\n    date: string\n  ): Promise<any[]> {\n    // Score all activities with session personalization\n    const scoredActivities = activities.map(activity => {\n      const baseScore = this.calculateBaseScore(activity);\n      const sessionWeight = sessionManager.calculatePersonalizationWeights(sessionId, activity);\n      const finalScore = baseScore * sessionWeight;\n      \n      return {\n        activity,\n        score: finalScore\n      };\n    });\n    \n    // Sort by personalized score\n    scoredActivities.sort((a, b) => b.score - a.score);\n    \n    // Keep top activities based on personalized scoring\n    const topActivities = scoredActivities.slice(0, 5).map(item => item.activity);\n    \n    // If session preferences suggest specific interests, try to add one more relevant POI\n    const sessionPrefs = sessionManager.getPreferences(sessionId);\n    if (sessionPrefs?.freeTextTags && sessionPrefs.freeTextTags.length > 0) {\n      await this.tryAddSessionPreferredActivity(\n        topActivities,\n        sessionPrefs.freeTextTags,\n        destination,\n        sessionId\n      );\n    }\n    \n    return topActivities.slice(0, 5); // Ensure we don't exceed 5 activities\n  }\n  \n  private calculateBaseScore(poi: any): number {\n    // Calculate base score using global factors\n    let score = 1.0;\n    \n    // Rating factor (40% weight)\n    const rating = parseFloat(poi.rating || '0');\n    score *= (0.6 + (rating / 5) * 0.4);\n    \n    // Review count factor (30% weight)\n    const reviews = poi.userRatingsTotal || poi.user_ratings_total || 0;\n    const reviewScore = Math.min(1, Math.log10(reviews + 1) / 4);\n    score *= (0.7 + reviewScore * 0.3);\n    \n    // Must-see factor (30% weight)\n    if (poi.types?.includes('tourist_attraction') || \n        poi.types?.includes('point_of_interest')) {\n      score *= 1.3;\n    }\n    \n    return score;\n  }\n  \n  private async tryAddSessionPreferredActivity(\n    activities: any[],\n    freeTextTags: string[],\n    destination: string,\n    sessionId: string\n  ): Promise<void> {\n    // Try to find one activity highly relevant to session preferences\n    for (const tag of freeTextTags) {\n      try {\n        const searchQuery = `${tag} in ${destination}`;\n        const results = await searchPlaces(searchQuery, {\n          minRating: 4.0,\n          minReviews: 100\n        });\n        \n        if (results.length > 0) {\n          // Find the best match that's not already in activities\n          for (const result of results) {\n            const alreadyIncluded = activities.some(\n              act => (act.placeId || act.place_id) === result.place_id\n            );\n            \n            if (!alreadyIncluded) {\n              // Calculate session-specific score\n              const sessionWeight = sessionManager.calculatePersonalizationWeights(\n                sessionId,\n                result\n              );\n              \n              if (sessionWeight >= 1.2) {\n                // Strong match, replace the last activity\n                // Convert GooglePlacesResult to POI format\n                activities[activities.length - 1] = {\n                  id: result.place_id,\n                  placeId: result.place_id,\n                  name: result.name,\n                  rating: result.rating?.toString(),\n                  userRatingsTotal: result.user_ratings_total,\n                  priceLevel: result.price_level,\n                  types: result.types,\n                  address: result.address,\n                  location: result.location,\n                  photoRef: result.photo_ref,\n                  openNow: result.open_now,\n                  createdAt: new Date()\n                };\n                console.log(`[SessionEnhancedPackageGenerator] Added session-preferred POI: ${result.name}`);\n                return;\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error(`Failed to search for session preference \"${tag}\":`, error);\n      }\n    }\n  }\n}\n\nexport const sessionEnhancedPackageGenerator = new SessionEnhancedPackageGenerator();","size_bytes":6422},"server/services/sessionManager.ts":{"content":"import { randomUUID } from 'crypto';\n\ninterface SessionPreferences {\n  travelStyle?: string[];\n  freeTextTags?: string[];\n  cuisinePreferences?: string[];\n  budgetLevel?: string;\n  activityPreferences?: string[];\n  avoidances?: string[];\n  accessibilityNeeds?: string[];\n  timePreferences?: { [key: string]: string }; // morning person, night owl, etc.\n  customWeights?: { [key: string]: number };\n}\n\ninterface UserSession {\n  sessionId: string;\n  conversationId?: string;\n  preferences: SessionPreferences;\n  createdAt: Date;\n  lastActivityAt: Date;\n  expiresAt: Date;\n}\n\nclass SessionManager {\n  private sessions: Map<string, UserSession>;\n  private readonly SESSION_TTL_MS = 4 * 60 * 60 * 1000; // 4 hours\n  private readonly CLEANUP_INTERVAL_MS = 15 * 60 * 1000; // 15 minutes\n  private cleanupTimer: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.sessions = new Map();\n    this.startCleanupTimer();\n  }\n\n  private startCleanupTimer() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n    \n    this.cleanupTimer = setInterval(() => {\n      this.cleanupExpiredSessions();\n    }, this.CLEANUP_INTERVAL_MS);\n  }\n\n  private cleanupExpiredSessions() {\n    const now = new Date();\n    const expiredSessions: string[] = [];\n    \n    this.sessions.forEach((session, sessionId) => {\n      if (session.expiresAt < now) {\n        expiredSessions.push(sessionId);\n      }\n    });\n    \n    expiredSessions.forEach(sessionId => {\n      console.log(`[SessionManager] Cleaning up expired session: ${sessionId}`);\n      this.sessions.delete(sessionId);\n    });\n  }\n\n  createSession(conversationId?: string): string {\n    const sessionId = randomUUID();\n    const now = new Date();\n    \n    const session: UserSession = {\n      sessionId,\n      conversationId,\n      preferences: {},\n      createdAt: now,\n      lastActivityAt: now,\n      expiresAt: new Date(now.getTime() + this.SESSION_TTL_MS)\n    };\n    \n    this.sessions.set(sessionId, session);\n    console.log(`[SessionManager] Created new session: ${sessionId}`);\n    return sessionId;\n  }\n\n  getSession(sessionId: string): UserSession | null {\n    const session = this.sessions.get(sessionId);\n    \n    if (!session) {\n      return null;\n    }\n    \n    // Check if session has expired\n    if (session.expiresAt < new Date()) {\n      this.sessions.delete(sessionId);\n      return null;\n    }\n    \n    // Update last activity\n    session.lastActivityAt = new Date();\n    session.expiresAt = new Date(Date.now() + this.SESSION_TTL_MS);\n    \n    return session;\n  }\n\n  updatePreferences(sessionId: string, preferences: Partial<SessionPreferences>): boolean {\n    const session = this.getSession(sessionId);\n    \n    if (!session) {\n      return false;\n    }\n    \n    // Merge preferences, never overwrite the entire object\n    session.preferences = {\n      ...session.preferences,\n      ...preferences\n    };\n    \n    // Ensure weights don't exceed 30% boost\n    if (session.preferences.customWeights) {\n      Object.keys(session.preferences.customWeights).forEach(key => {\n        const weight = session.preferences.customWeights![key];\n        session.preferences.customWeights![key] = Math.min(1.3, Math.max(0.7, weight));\n      });\n    }\n    \n    console.log(`[SessionManager] Updated preferences for session ${sessionId}:`, preferences);\n    return true;\n  }\n\n  addFreeTextTag(sessionId: string, tag: string): boolean {\n    const session = this.getSession(sessionId);\n    \n    if (!session) {\n      return false;\n    }\n    \n    if (!session.preferences.freeTextTags) {\n      session.preferences.freeTextTags = [];\n    }\n    \n    // Avoid duplicates\n    if (!session.preferences.freeTextTags.includes(tag)) {\n      session.preferences.freeTextTags.push(tag);\n      console.log(`[SessionManager] Added free-text tag \"${tag}\" to session ${sessionId}`);\n    }\n    \n    return true;\n  }\n\n  getPreferences(sessionId: string): SessionPreferences | null {\n    const session = this.getSession(sessionId);\n    return session?.preferences || null;\n  }\n\n  // Calculate personalization weights for POI scoring\n  calculatePersonalizationWeights(sessionId: string, poi: any): number {\n    const session = this.getSession(sessionId);\n    \n    if (!session || !session.preferences) {\n      return 1.0; // No personalization\n    }\n    \n    let weight = 1.0;\n    const prefs = session.preferences;\n    \n    // Apply free-text tag matching (max 20% boost)\n    if (prefs.freeTextTags && prefs.freeTextTags.length > 0) {\n      const poiText = `${poi.name} ${poi.types?.join(' ')} ${poi.description || ''}`.toLowerCase();\n      const matchingTags = prefs.freeTextTags.filter(tag => \n        poiText.includes(tag.toLowerCase())\n      );\n      \n      if (matchingTags.length > 0) {\n        weight *= 1.0 + (0.2 * Math.min(1, matchingTags.length / prefs.freeTextTags.length));\n      }\n    }\n    \n    // Apply cuisine preferences (max 10% boost for restaurants)\n    if (prefs.cuisinePreferences && poi.types?.includes('restaurant')) {\n      const cuisineMatch = prefs.cuisinePreferences.some(cuisine =>\n        poi.name?.toLowerCase().includes(cuisine.toLowerCase()) ||\n        poi.types?.some((t: string) => t.includes(cuisine.toLowerCase()))\n      );\n      \n      if (cuisineMatch) {\n        weight *= 1.1;\n      }\n    }\n    \n    // Apply activity preferences (max 10% boost)\n    if (prefs.activityPreferences && prefs.activityPreferences.length > 0) {\n      const activityMatch = prefs.activityPreferences.some(activity => {\n        const activityLower = activity.toLowerCase();\n        return poi.types?.some((t: string) => t.includes(activityLower)) ||\n               poi.name?.toLowerCase().includes(activityLower);\n      });\n      \n      if (activityMatch) {\n        weight *= 1.1;\n      }\n    }\n    \n    // Apply avoidances (30% penalty)\n    if (prefs.avoidances && prefs.avoidances.length > 0) {\n      const shouldAvoid = prefs.avoidances.some(avoid => {\n        const avoidLower = avoid.toLowerCase();\n        return poi.name?.toLowerCase().includes(avoidLower) ||\n               poi.types?.some((t: string) => t.includes(avoidLower));\n      });\n      \n      if (shouldAvoid) {\n        weight *= 0.7;\n      }\n    }\n    \n    // Apply custom weights if provided\n    if (prefs.customWeights) {\n      poi.types?.forEach((type: string) => {\n        if (prefs.customWeights![type]) {\n          weight *= prefs.customWeights![type];\n        }\n      });\n    }\n    \n    // Ensure weight stays within bounds (0.7 to 1.3)\n    return Math.min(1.3, Math.max(0.7, weight));\n  }\n\n  // Link a session to a conversation\n  linkToConversation(sessionId: string, conversationId: string): boolean {\n    const session = this.getSession(sessionId);\n    \n    if (!session) {\n      return false;\n    }\n    \n    session.conversationId = conversationId;\n    console.log(`[SessionManager] Linked session ${sessionId} to conversation ${conversationId}`);\n    return true;\n  }\n\n  // Get or create session from request\n  getOrCreateSession(sessionId?: string, conversationId?: string): string {\n    if (sessionId) {\n      const existingSession = this.getSession(sessionId);\n      if (existingSession) {\n        if (conversationId && !existingSession.conversationId) {\n          this.linkToConversation(sessionId, conversationId);\n        }\n        return sessionId;\n      }\n    }\n    \n    // Create new session\n    return this.createSession(conversationId);\n  }\n\n  // Destroy session\n  destroySession(sessionId: string): boolean {\n    const deleted = this.sessions.delete(sessionId);\n    if (deleted) {\n      console.log(`[SessionManager] Destroyed session: ${sessionId}`);\n    }\n    return deleted;\n  }\n\n  // Get all active sessions (for monitoring)\n  getActiveSessions(): number {\n    this.cleanupExpiredSessions();\n    return this.sessions.size;\n  }\n}\n\n// Export singleton instance\nexport const sessionManager = new SessionManager();","size_bytes":7871},"client/src/lib/packageStore.ts":{"content":"import { create } from 'zustand';\nimport { TravelPackage } from '@/types/travel';\n\ninterface PackageStore {\n  packages: TravelPackage[];\n  conversationId: string | null;\n  isLoading: boolean;\n  setPackages: (packages: TravelPackage[], conversationId: string) => void;\n  clearPackages: () => void;\n  getPackageById: (id: string) => TravelPackage | undefined;\n}\n\nexport const usePackageStore = create<PackageStore>((set, get) => ({\n  packages: [],\n  conversationId: null,\n  isLoading: false,\n  \n  setPackages: (packages: TravelPackage[], conversationId: string) => {\n    set({ packages, conversationId });\n  },\n  \n  clearPackages: () => {\n    set({ packages: [], conversationId: null });\n  },\n  \n  getPackageById: (id: string) => {\n    return get().packages.find(pkg => pkg.id === id);\n  }\n}));","size_bytes":792},"client/src/pages/Chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ChatInterface } from \"@/components/chat/ChatInterface\";\nimport { usePackageStore } from \"@/lib/packageStore\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { TravelPackage } from \"@/types/travel\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plane, HelpCircle, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Chat() {\n  const [, setLocation] = useLocation();\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const { setPackages: setStorePackages } = usePackageStore();\n  const { toast } = useToast();\n  const hasNavigatedRef = useRef(false);\n  \n  // Query packages when conversation ID changes\n  const { data: packages = [] } = useQuery<TravelPackage[]>({\n    queryKey: ['/api/conversation', conversationId, 'packages'],\n    enabled: !!conversationId,\n  });\n  \n  // Monitor packages and auto-navigate when ready\n  useEffect(() => {\n    if (packages.length >= 3 && conversationId && !hasNavigatedRef.current) {\n      hasNavigatedRef.current = true;\n      \n      // Save to store\n      setStorePackages(packages, conversationId);\n      \n      // Show floating toast notification\n      toast({\n        title: \"✨ 3 packages are ready!\",\n        description: \"Redirecting to your personalized travel options...\",\n        duration: 1500,\n        className: \"fixed bottom-20 right-4 z-50\",\n      });\n      \n      // Auto-navigate to packages page after brief delay\n      setTimeout(() => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n        setLocation(\"/packages?from=chat\");\n      }, 1000);\n    }\n  }, [packages, conversationId, setStorePackages, toast, setLocation]);\n  \n  // Reset navigation flag when conversation changes\n  useEffect(() => {\n    hasNavigatedRef.current = false;\n  }, [conversationId]);\n  \n  const handlePackagesReady = () => {\n    // Packages will be auto-detected through the query\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-brand-bg text-brand-text flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-brand-border bg-brand-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-brand-accent rounded-lg flex items-center justify-center\">\n                <Plane className=\"text-brand-bg w-4 h-4\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-brand-text\">Travelify</h1>\n              <span className=\"bg-brand-accent/20 text-brand-accent px-2 py-1 rounded-full text-[14px] font-semibold\">\n                Your AI Travel Planner ✈️\n              </span>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-4\">\n              {packages.length >= 3 && (\n                <Button \n                  onClick={() => setLocation(\"/packages\")}\n                  size=\"sm\"\n                  className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  View Packages\n                </Button>\n              )}\n              <Button variant=\"ghost\" className=\"text-brand-mute hover:text-brand-accent\">\n                <HelpCircle className=\"w-4 h-4 mr-2\" />\n                Help\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      {/* Main Chat Area - Full Width */}\n      <div className=\"flex-1 max-w-4xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <ChatInterface\n          onPackagesReady={handlePackagesReady}\n          onConversationIdChange={(id) => setConversationId(id)}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":3927},"client/src/pages/Packages.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation, useSearch } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { CleanPackageCard } from \"@/components/packages/CleanPackageCard\";\nimport { usePackageStore } from \"@/lib/packageStore\";\nimport { ArrowLeft, MessageCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TravelPackage } from \"@/types/travel\";\n\nexport default function Packages() {\n  const [, setLocation] = useLocation();\n  const searchString = useSearch();\n  const { packages: storedPackages, conversationId } = usePackageStore();\n  const isFromChat = searchString.includes(\"from=chat\");\n  \n  // Try to fetch packages if not in store (e.g., direct navigation)\n  const { data: fetchedPackages } = useQuery<TravelPackage[]>({\n    queryKey: ['/api/conversation', conversationId, 'packages'],\n    enabled: !!conversationId && storedPackages.length === 0,\n  });\n  \n  const packages = storedPackages.length > 0 ? storedPackages : (fetchedPackages || []);\n  \n  // Scroll to top on mount, show animation when coming from chat\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    if (isFromChat) {\n      document.body.classList.add('page-transition');\n      setTimeout(() => {\n        document.body.classList.remove('page-transition');\n      }, 500);\n    }\n  }, [isFromChat]);\n  \n  const handleSelectPackage = (pkg: TravelPackage) => {\n    setLocation(`/itinerary/${pkg.id}`);\n  };\n  \n  const handleBackToChat = () => {\n    setLocation(\"/chat\");\n  };\n  \n  if (packages.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">No packages available</h2>\n          <p className=\"text-gray-600 mb-6\">Start a conversation to generate travel packages</p>\n          <Button\n            onClick={() => setLocation(\"/chat\")}\n            className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white\"\n          >\n            <MessageCircle className=\"w-4 h-4 mr-2\" />\n            Start Planning\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50 animate-fadeIn\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Breadcrumb Navigation */}\n        <nav className=\"flex items-center space-x-2 text-sm mb-6 animate-slideInTop\">\n          <button\n            onClick={() => setLocation(\"/chat\")}\n            className=\"text-gray-600 hover:text-gray-900 transition-colors\"\n          >\n            Chat\n          </button>\n          <span className=\"text-gray-400\">/</span>\n          <span className=\"text-gray-900 font-medium\">Packages</span>\n        </nav>\n        \n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleBackToChat}\n            className=\"text-gray-600 hover:text-gray-900 mb-4 p-0\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to conversation\n          </Button>\n          \n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-3 bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n              Choose Your Perfect Journey\n            </h1>\n            <p className=\"text-gray-600\">Three personalized travel packages designed just for you</p>\n          </div>\n        </div>\n\n        {/* Package Cards Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 animate-slideInBottom\">\n          {packages.map((pkg, index) => (\n            <div \n              key={pkg.id}\n              className=\"cursor-pointer transform transition-all duration-300 hover:scale-[1.02] animate-fadeIn\"\n              style={{ animationDelay: `${index * 100}ms` }}\n              onClick={() => handleSelectPackage(pkg)}\n            >\n              <CleanPackageCard\n                package={pkg}\n                index={index}\n                onSelect={handleSelectPackage}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4172},"client/src/pages/ItineraryDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TravelPackage, POI } from \"@/types/travel\";\nimport { Star } from \"lucide-react\";\nimport { usePackageStore } from \"@/lib/packageStore\";\nimport { POICard } from \"@/components/itinerary/POICard\";\nimport { AddPOIModal } from \"@/components/modals/AddPOIModal\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport {\n  ArrowLeft,\n  MapPin,\n  Clock,\n  DollarSign,\n  Calendar,\n  Utensils,\n  Camera,\n  Hotel,\n  Map,\n  ExternalLink,\n  Sun,\n  Moon,\n  Plus,\n  Search,\n  GripVertical\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport function ItineraryDetail() {\n  const [match, params] = useRoute(\"/itinerary/:id\");\n  const [, setLocation] = useLocation();\n  const { getPackageById } = usePackageStore();\n  const [isAddPOIModalOpen, setIsAddPOIModalOpen] = useState(false);\n  const [selectedDayIndex, setSelectedDayIndex] = useState<number | null>(null);\n  \n  // Try to get package from store first\n  const storedPackage = params?.id ? getPackageById(params.id) : undefined;\n  \n  // Fallback to API if not in store\n  const { data: fetchedPackage, isLoading } = useQuery<TravelPackage>({\n    queryKey: [`/api/packages/${params?.id}`],\n    enabled: !!params?.id && !storedPackage,\n  });\n  \n  const packageDetails = storedPackage || fetchedPackage;\n\n  if (!match || !params?.id) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading itinerary...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!packageDetails) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">Package not found</p>\n          <Button\n            onClick={() => setLocation(\"/\")}\n            className=\"mt-4\"\n          >\n            Go back home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const pkg = packageDetails;\n  \n  // Initialize itinerary with IDs for all POIs\n  const initializeItinerary = (originalItinerary: any[]) => {\n    return originalItinerary?.map((day: any, dayIndex: number) => {\n      // Convert activities to POIs if POIs don't exist\n      let pois = day.pois || [];\n      \n      // If no POIs but has activities, convert activities to POIs\n      if ((!pois || pois.length === 0) && day.activities) {\n        pois = day.activities.map((activity: any, actIndex: number) => {\n          // Determine time slot based on position in array\n          let timeSlot = 'morning';\n          const totalActivities = day.activities.length;\n          const position = actIndex / totalActivities;\n          \n          if (position < 0.33) {\n            timeSlot = 'morning';\n          } else if (position < 0.66) {\n            timeSlot = 'afternoon';\n          } else {\n            timeSlot = 'evening';\n          }\n          \n          // If activity is a string, parse it\n          if (typeof activity === 'string') {\n            const patterns = [\n              /^(.*?)\\s*-\\s*(.+?)\\s*-\\s*rated\\s*([\\d.]+)★?\\s*with\\s*([\\d,]+)\\s*reviews?$/,\n              /^(.*?)\\s*-\\s*(.+?)\\s*-\\s*([\\d.]+)★?\\s*\\(([\\d,]+)\\s*reviews?\\)$/,\n              /^(.*?)\\s*-\\s*(.+?)$/\n            ];\n            \n            let parsedPoi = null;\n            for (const pattern of patterns) {\n              const match = activity.match(pattern);\n              if (match) {\n                const [, name, description, rating, reviews] = match;\n                parsedPoi = {\n                  name: name?.trim() || activity,\n                  description: description?.trim() || 'Must-visit attraction',\n                  rating: rating ? parseFloat(rating) : 4.5,\n                  reviewCount: reviews ? parseInt(reviews.replace(/,/g, '')) : 1000,\n                  category: 'Attraction',\n                  duration: null,\n                  durationHours: 2\n                };\n                break;\n              }\n            }\n            \n            return {\n              ...(parsedPoi || {\n                name: activity,\n                description: 'Must-visit attraction',\n                rating: 4.5,\n                reviewCount: 1000,\n                category: 'Attraction',\n                duration: null,\n                durationHours: 2\n              }),\n              id: `poi-${dayIndex}-${actIndex}-${Date.now()}`,\n              time: timeSlot,\n              timeLabel: timeSlot.charAt(0).toUpperCase() + timeSlot.slice(1)\n            };\n          }\n          \n          // If activity is already an object\n          return {\n            ...activity,\n            id: activity.id || `poi-${dayIndex}-${actIndex}-${Date.now()}`,\n            time: activity.time || timeSlot,\n            timeLabel: activity.timeLabel || timeSlot.charAt(0).toUpperCase() + timeSlot.slice(1)\n          };\n        });\n      }\n      \n      // Ensure all POIs have IDs and time slots\n      pois = pois.map((poi: any, poiIndex: number) => ({\n        ...poi,\n        id: poi.id || `poi-${dayIndex}-${poiIndex}-${Date.now()}`,\n        time: poi.time || poi.timeLabel?.toLowerCase() || 'morning',\n        timeLabel: poi.timeLabel || (poi.time ? poi.time.charAt(0).toUpperCase() + poi.time.slice(1) : 'Morning')\n      }));\n      \n      return {\n        ...day,\n        pois\n      };\n    }) || [];\n  };\n  \n  const [itinerary, setItinerary] = useState<any[]>(initializeItinerary(pkg?.itinerary || []));\n\n  // Handler for adding POI to itinerary\n  const handleAddPOI = (poi: POI, timeSlot: string) => {\n    if (selectedDayIndex === null) return;\n    \n    const newItinerary = [...itinerary];\n    const day = newItinerary[selectedDayIndex];\n    \n    // Create a new POI with time slot information\n    const newPOI = {\n      ...poi,\n      timeLabel: timeSlot.charAt(0).toUpperCase() + timeSlot.slice(1),\n      time: timeSlot,\n      id: `poi-${Date.now()}-${Math.random()}` // Unique ID for delete functionality\n    };\n    \n    // Add POI to the day's POIs array\n    if (!day.pois) {\n      day.pois = [];\n    }\n    day.pois.push(newPOI);\n    \n    // Sort POIs by time (morning -> afternoon -> evening)\n    const timeOrder: Record<string, number> = { morning: 0, afternoon: 1, evening: 2 };\n    day.pois.sort((a: any, b: any) => {\n      const aTime = timeOrder[a.time?.toLowerCase()] ?? 3;\n      const bTime = timeOrder[b.time?.toLowerCase()] ?? 3;\n      return aTime - bTime;\n    });\n    \n    setItinerary(newItinerary);\n  };\n\n  // Handler for deleting POI from itinerary\n  const handleDeletePOI = (dayIndex: number, poiId: string) => {\n    const newItinerary = [...itinerary];\n    const day = newItinerary[dayIndex];\n    \n    if (day.pois) {\n      day.pois = day.pois.filter((poi: any) => poi.id !== poiId);\n    }\n    \n    setItinerary(newItinerary);\n  };\n\n\n  // Handler for drag and drop\n  const handleDragEnd = (result: any, dayIndex: number) => {\n    if (!result.destination) return;\n    \n    const newItinerary = [...itinerary];\n    const day = newItinerary[dayIndex];\n    \n    if (!day.pois) return;\n    \n    // Get the source and destination time slots\n    const sourceTimeSlot = result.source.droppableId.split('-')[2];\n    const destTimeSlot = result.destination.droppableId.split('-')[2];\n    \n    // Get the moved item\n    const [reorderedItem] = day.pois.splice(result.source.index, 1);\n    \n    // Update time slot if moving between different time periods\n    if (sourceTimeSlot !== destTimeSlot) {\n      reorderedItem.time = destTimeSlot;\n      reorderedItem.timeLabel = destTimeSlot.charAt(0).toUpperCase() + destTimeSlot.slice(1);\n    }\n    \n    // Insert at new position\n    day.pois.splice(result.destination.index, 0, reorderedItem);\n    \n    setItinerary(newItinerary);\n  };\n  \n  // Helper function to get activity icon\n  const getActivityIcon = (type: string) => {\n    if (type.toLowerCase().includes('food') || type.toLowerCase().includes('restaurant')) {\n      return <Utensils className=\"w-4 h-4\" />;\n    }\n    if (type.toLowerCase().includes('hotel') || type.toLowerCase().includes('accommodation')) {\n      return <Hotel className=\"w-4 h-4\" />;\n    }\n    return <Camera className=\"w-4 h-4\" />;\n  };\n\n  // Helper function to get category color\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      food: \"bg-red-100 text-red-700\",\n      culture: \"bg-purple-100 text-purple-700\",\n      nature: \"bg-green-100 text-green-700\",\n      shopping: \"bg-blue-100 text-blue-700\",\n      nightlife: \"bg-indigo-100 text-indigo-700\",\n      attraction: \"bg-orange-100 text-orange-700\",\n    };\n    return colors[category] || \"bg-gray-100 text-gray-700\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Compact Hero Section */}\n      <div className=\"bg-gradient-to-br from-purple-600 to-blue-600 pt-safe\">\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/packages\")}\n            className=\"text-white hover:text-white/80 mb-3 p-0 w-fit\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to packages\n          </Button>\n          \n          <h1 className=\"text-2xl md:text-3xl font-bold text-white mb-2\">{pkg.name}</h1>\n          <p className=\"text-white/90 text-sm md:text-base mb-3 line-clamp-2\">\n            {pkg.description?.split('.')[0] || `Tailored to your interests. Includes ${pkg.highlights?.length || 4} hand-picked venues matching your preferences plus must-see highlights.`}\n          </p>\n          \n          <div className=\"flex flex-wrap gap-4 text-white text-sm\">\n            <div className=\"flex items-center\">\n              <MapPin className=\"w-4 h-4 mr-1\" />\n              <span>{pkg.destination || pkg.route}</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-1\" />\n              <span>{pkg.days} days</span>\n            </div>\n            <div className=\"flex items-center\">\n              <DollarSign className=\"w-4 h-4 mr-1\" />\n              <span className=\"font-semibold\">{pkg.budget}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"max-w-4xl mx-auto px-4 -mt-6 mb-6\">\n        <Card className=\"bg-white p-5 shadow-lg\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">{pkg.days}</div>\n              <div className=\"text-xs text-gray-600\">Days</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {pkg.itinerary?.reduce((sum, day: any) => sum + (day.pois?.length || day.activities?.length || 0), 0) || 39}\n              </div>\n              <div className=\"text-xs text-gray-600\">Attractions</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {pkg.itinerary?.reduce((sum, day: any) => {\n                  const count = day.pois?.filter((p: any) => \n                    p.category?.toLowerCase().includes('food') || \n                    p.type?.toLowerCase().includes('restaurant')\n                  ).length || 0;\n                  return sum + count;\n                }, 0) || 17}\n              </div>\n              <div className=\"text-xs text-gray-600\">Dining Experiences</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">{pkg.highlights?.length || 5}</div>\n              <div className=\"text-xs text-gray-600\">Key Highlights</div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Breadcrumbs */}\n      <div className=\"max-w-4xl mx-auto px-4 pb-3\">\n        <nav className=\"flex items-center space-x-2 text-xs md:text-sm\">\n          <button\n            onClick={() => setLocation(\"/chat\")}\n            className=\"text-gray-600 hover:text-gray-900\"\n          >\n            Chat\n          </button>\n          <span className=\"text-gray-400\">/</span>\n          <button\n            onClick={() => setLocation(\"/packages\")}\n            className=\"text-gray-600 hover:text-gray-900\"\n          >\n            Packages\n          </button>\n          <span className=\"text-gray-400\">/</span>\n          <span className=\"text-gray-900 font-medium\">Itinerary</span>\n        </nav>\n      </div>\n      \n      {/* Day-by-Day Itinerary */}\n      <div className=\"max-w-4xl mx-auto px-4 pb-12\">\n        <h2 className=\"text-xl md:text-2xl font-bold text-gray-900 mb-4\">Day-by-Day Itinerary</h2>\n        \n        <div className=\"space-y-4\">\n          {itinerary?.map((day: any, index: number) => (\n            <Card key={index} className=\"bg-white overflow-hidden border-gray-200\">\n              <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 p-3 md:p-4 border-b\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-base md:text-lg font-semibold text-gray-900\">\n                      Day {day.day} — {day.location || day.title || `Exploring ${pkg.destination}`}\n                    </h3>\n                  </div>\n                  <Button\n                    onClick={() => {\n                      setSelectedDayIndex(index);\n                      setIsAddPOIModalOpen(true);\n                    }}\n                    size=\"sm\"\n                    className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                  >\n                    <Plus className=\"w-3 h-3 mr-1\" />\n                    Add POI\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"p-4 md:p-5\">\n                {/* Group POIs by time label with drag and drop */}\n                {day.pois && day.pois.length > 0 ? (\n                  <DragDropContext onDragEnd={(result) => handleDragEnd(result, index)}>\n                    {['Morning', 'Afternoon', 'Evening'].map((timeLabel) => {\n                      const timePois = day.pois?.filter((poi: any) => \n                        poi.timeLabel === timeLabel || \n                        (poi.time && poi.time.toLowerCase() === timeLabel.toLowerCase())\n                      ) || [];\n                      \n                      if (timePois.length === 0) return null;\n                      \n                      return (\n                        <div key={timeLabel} className=\"mb-6\">\n                          <div className=\"flex items-center gap-2 mb-3\">\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                              timeLabel === 'Evening' \n                                ? 'bg-gradient-to-r from-purple-500 to-purple-600' \n                                : 'bg-gradient-to-r from-orange-400 to-yellow-500'\n                            }`}>\n                              {timeLabel === 'Morning' && <Sun className=\"w-4 h-4 text-white\" />}\n                              {timeLabel === 'Afternoon' && <Sun className=\"w-4 h-4 text-white\" />}\n                              {timeLabel === 'Evening' && <Moon className=\"w-4 h-4 text-white\" />}\n                            </div>\n                            <span className={`text-sm font-semibold ${\n                              timeLabel === 'Evening' ? 'text-purple-600' : 'text-orange-500'\n                            }`}>\n                              {timeLabel}\n                            </span>\n                          </div>\n                          \n                          <Droppable droppableId={`day-${index}-${timeLabel.toLowerCase()}`}>\n                            {(provided) => (\n                              <div \n                                {...provided.droppableProps}\n                                ref={provided.innerRef}\n                                className=\"space-y-2 ml-8 md:ml-10\"\n                              >\n                                {timePois.map((poi: any, poiIndex: number) => {\n                                  const actualIndex = day.pois.findIndex((p: any) => p.id === poi.id);\n                                  return (\n                                    <Draggable key={poi.id} draggableId={poi.id} index={actualIndex}>\n                                      {(provided, snapshot) => (\n                                        <div\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          className={`relative group ${\n                                            snapshot.isDragging ? 'shadow-lg opacity-90' : ''\n                                          }`}\n                                        >\n                                          <div className=\"flex items-stretch\">\n                                            {/* Enlarged drag handle area */}\n                                            <div\n                                              {...provided.dragHandleProps}\n                                              className=\"flex items-center justify-center w-10 md:w-12 cursor-move bg-gray-50 hover:bg-gray-100 active:bg-gray-200 transition-colors rounded-l-lg mr-2 touch-none\"\n                                              title=\"Drag to reorder\"\n                                              style={{ minHeight: '100%' }}\n                                            >\n                                              <div className=\"flex flex-col items-center gap-0.5\">\n                                                <GripVertical className=\"w-5 h-5 text-gray-400\" />\n                                                <div className=\"w-4 h-0.5 bg-gray-300 rounded-full md:hidden\" />\n                                                <div className=\"w-4 h-0.5 bg-gray-300 rounded-full md:hidden\" />\n                                              </div>\n                                            </div>\n                                            <div className=\"flex-1\">\n                                              <POICard \n                                                {...poi} \n                                                onDelete={() => handleDeletePOI(index, poi.id)}\n                                              />\n                                            </div>\n                                          </div>\n                                        </div>\n                                      )}\n                                    </Draggable>\n                                  );\n                                })}\n                                {provided.placeholder}\n                              </div>\n                            )}\n                          </Droppable>\n                        </div>\n                      );\n                    })}\n                  </DragDropContext>\n                ) : null}\n                {/* Empty state */}\n                {(!day.pois || day.pois.length === 0) && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p className=\"mb-2\">No activities planned for this day yet.</p>\n                    <p className=\"text-sm\">Click \"Add POI\" to start adding activities.</p>\n                  </div>\n                )}\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        {/* Export Button */}\n        <div className=\"mt-6 flex justify-center\">\n          <Button\n            size=\"default\"\n            className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700\"\n            onClick={() => {\n              // Export itinerary as JSON\n              const dataStr = JSON.stringify(pkg, null, 2);\n              const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n              const exportFileDefaultName = `${pkg.name.replace(/\\s+/g, '-')}-itinerary.json`;\n              const linkElement = document.createElement('a');\n              linkElement.setAttribute('href', dataUri);\n              linkElement.setAttribute('download', exportFileDefaultName);\n              linkElement.click();\n            }}\n          >\n            <Map className=\"w-5 h-5 mr-2\" />\n            Export Itinerary as JSON\n          </Button>\n        </div>\n      </div>\n\n      {/* Add POI Modal */}\n      <AddPOIModal\n        isOpen={isAddPOIModalOpen}\n        onClose={() => {\n          setIsAddPOIModalOpen(false);\n          setSelectedDayIndex(null);\n        }}\n        onAddPOI={handleAddPOI}\n        conversationId={pkg?.conversationId}\n        city={pkg?.destination}\n        tags={[]}\n      />\n    </div>\n  );\n}","size_bytes":21184},"client/src/components/itinerary/POICard.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Clock, ExternalLink, X, Edit2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StarRating } from \"@/components/ui/star-rating\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { mapGooglePlaceTypeToPOIVariant, getPOIColorStyle } from \"@/config/poiTypeConfig\";\n\ninterface POICardProps {\n  name: string;\n  rating?: number;\n  reviewCount?: number;\n  reviewsCount?: number;\n  user_ratings_total?: number;\n  category?: string;\n  type?: string;\n  types?: string[];\n  duration?: string;\n  durationHours?: number;\n  durationMinutes?: number;\n  description?: string;\n  tags?: string[];\n  placeId?: string;\n  mapsUrl?: string;\n  priceLevel?: number;\n  time?: string;\n  timeLabel?: string;\n  onDelete?: () => void;\n  onTimeChange?: (newTime: string) => void;\n}\n\nexport function POICard({\n  name,\n  rating,\n  reviewCount,\n  reviewsCount,\n  user_ratings_total,\n  category,\n  type,\n  types,\n  duration,\n  durationHours,\n  durationMinutes,\n  description,\n  tags,\n  placeId,\n  mapsUrl,\n  priceLevel,\n  time,\n  timeLabel,\n  onDelete,\n  onTimeChange\n}: POICardProps) {\n  const [isEditingTime, setIsEditingTime] = useState(false);\n  const [categoryHover, setCategoryHover] = useState(false);\n  const [categoryPressed, setCategoryPressed] = useState(false);\n  \n  // Get review count from various possible fields\n  const totalReviews = reviewCount || reviewsCount || user_ratings_total || 0;\n  \n  // Determine category with proper capitalization\n  const displayCategory = category || type || 'Attraction';\n  \n  // Ensure category is properly formatted (capitalize first letter if needed)\n  const formattedCategory = displayCategory.charAt(0).toUpperCase() + displayCategory.slice(1);\n  \n  // Get POI variant for color coding\n  const poiVariant = mapGooglePlaceTypeToPOIVariant(types);\n  \n  // Format duration with more intelligent display\n  let formattedDuration = duration;\n  if (!formattedDuration) {\n    if (durationHours) {\n      // Handle decimal hours (e.g., 1.5 hours)\n      if (durationHours % 1 !== 0) {\n        const hours = Math.floor(durationHours);\n        const minutes = Math.round((durationHours % 1) * 60);\n        if (hours === 0) {\n          formattedDuration = `${minutes} mins`;\n        } else if (minutes === 0) {\n          formattedDuration = `${hours} hour${hours !== 1 ? 's' : ''}`;\n        } else {\n          formattedDuration = `${hours}h ${minutes}m`;\n        }\n      } else {\n        formattedDuration = `${durationHours} hour${durationHours !== 1 ? 's' : ''}`;\n      }\n    } else if (durationMinutes) {\n      if (durationMinutes >= 60) {\n        const hours = Math.floor(durationMinutes / 60);\n        const mins = durationMinutes % 60;\n        if (mins === 0) {\n          formattedDuration = `${hours} hour${hours !== 1 ? 's' : ''}`;\n        } else {\n          formattedDuration = `${hours}h ${mins}m`;\n        }\n      } else {\n        formattedDuration = `${durationMinutes} mins`;\n      }\n    } else {\n      // Intelligent fallback based on category\n      const categoryDurations: Record<string, string> = {\n        'Restaurant': '1-2 hours',\n        'Fine Dining': '2-3 hours',\n        'Fast Food': '30 mins',\n        'Cafe': '1 hour',\n        'Coffee Shop': '45 mins',\n        'Bar': '2 hours',\n        'Museum': '2-3 hours',\n        'Art Gallery': '2 hours',\n        'Park': '2 hours',\n        'Beach': '3-4 hours',\n        'Shopping Mall': '2-3 hours',\n        'Market': '1-2 hours',\n        'Temple': '1 hour',\n        'Church': '45 mins',\n        'Viewpoint': '30 mins',\n        'Theme Park': 'Full day',\n        'Amusement Park': 'Full day',\n        'Zoo': '4-5 hours',\n        'Aquarium': '2-3 hours'\n      };\n      formattedDuration = categoryDurations[displayCategory] || '1-2 hours';\n    }\n  }\n  \n  // Truncate description\n  const truncatedDescription = description && description.length > 120\n    ? description.substring(0, 117) + '...'\n    : description || 'Must-visit attraction showcasing local highlights';\n  \n  // Format maps URL - Always use place_id when available for accuracy\n  // This format opens the exact place in Google Maps app (if installed) or web\n  const mapsLink = placeId \n    ? `https://www.google.com/maps/search/?api=1&query_place_id=${placeId}&query=${encodeURIComponent(name)}`\n    : mapsUrl || `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(name)}`;\n  \n  return (\n    <div className=\"border border-purple-200/40 rounded-lg p-3 hover:shadow-md transition-all relative\" style={{ backgroundColor: 'rgba(46, 16, 101, 0.06)' }}>\n      {/* Delete and Time Edit Buttons */}\n      {(onDelete || onTimeChange) && (\n        <div className=\"absolute top-2 right-2 flex gap-1\">\n          {onTimeChange && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-7 w-7 p-0 opacity-60 hover:opacity-100 transition-opacity\"\n              onClick={() => setIsEditingTime(!isEditingTime)}\n              title=\"Edit time slot\"\n            >\n              <Edit2 className=\"h-3 w-3\" />\n            </Button>\n          )}\n          {onDelete && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-7 w-7 p-0 text-gray-500 hover:bg-red-100 hover:text-red-600 transition-colors\"\n              onClick={onDelete}\n              title=\"Delete activity\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      )}\n      \n      <div className=\"flex gap-3\">\n        {/* Icon */}\n        <div className=\"flex-shrink-0\">\n          <div className=\"w-10 h-10 bg-white/90 rounded-lg flex items-center justify-center shadow-sm\">\n            <MapPin className=\"w-5 h-5 text-purple-600\" />\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1\">\n          {/* Title and Price */}\n          <div className=\"flex items-start justify-between mb-1.5\">\n            <h4 className=\"font-medium text-gray-900 text-sm md:text-base flex-1\">{name}</h4>\n            {priceLevel && (\n              <span className=\"text-xs text-gray-600 ml-3\">\n                {'$'.repeat(priceLevel)}\n              </span>\n            )}\n          </div>\n          \n          {/* Time Selector when editing */}\n          {isEditingTime && onTimeChange && (\n            <div className=\"mb-2\">\n              <Select value={time || \"morning\"} onValueChange={(value) => {\n                onTimeChange(value);\n                setIsEditingTime(false);\n              }}>\n                <SelectTrigger className=\"w-32 h-7 text-xs\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"morning\">Morning</SelectItem>\n                  <SelectItem value=\"afternoon\">Afternoon</SelectItem>\n                  <SelectItem value=\"evening\">Evening</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          {/* Rating and Reviews */}\n          {rating && totalReviews >= 10 && (\n            <div className=\"mb-2 max-w-full overflow-hidden\">\n              <StarRating \n                rating={rating} \n                reviewCount={totalReviews}\n                size=\"sm\"\n                showNumber={true}\n              />\n            </div>\n          )}\n          \n          {/* Category and Duration Chips */}\n          <div className=\"flex flex-wrap items-center gap-1.5 mb-2\">\n            <Badge \n              className=\"text-[10px] md:text-xs px-2 md:px-2.5 py-0.5 rounded-full border-0 font-medium transition-colors cursor-default\"\n              style={getPOIColorStyle(\n                poiVariant, \n                categoryPressed ? 'pressed' : categoryHover ? 'hover' : 'default'\n              )}\n              onMouseEnter={() => setCategoryHover(true)}\n              onMouseLeave={() => {\n                setCategoryHover(false);\n                setCategoryPressed(false);\n              }}\n              onMouseDown={() => setCategoryPressed(true)}\n              onMouseUp={() => setCategoryPressed(false)}\n            >\n              {formattedCategory}\n            </Badge>\n            <Badge \n              className=\"text-[10px] md:text-xs px-2 md:px-2.5 py-0.5 rounded-full bg-gray-100 text-gray-700 border-0\"\n            >\n              <Clock className=\"w-3 h-3 mr-1 inline\" />\n              {formattedDuration}\n            </Badge>\n          </div>\n          \n          {/* Description */}\n          <p className=\"text-xs md:text-sm text-gray-600 mb-2 leading-relaxed\">\n            {truncatedDescription}\n          </p>\n          \n          {/* Tags and Maps Link */}\n          <div className=\"flex items-center justify-between\">\n            {/* Optional Tags */}\n            <div className=\"flex flex-wrap gap-1\">\n              {tags && tags.length > 0 && tags.slice(0, 3).map((tag, index) => (\n                <span \n                  key={index}\n                  className=\"text-xs px-2 py-0.5 text-gray-500 bg-gray-50 rounded border border-gray-200\"\n                >\n                  {tag}\n                </span>\n              ))}\n            </div>\n            \n            {/* Find on Maps */}\n            <a\n              href={mapsLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"flex items-center text-xs text-purple-600 hover:text-purple-800 transition-colors font-medium whitespace-nowrap ml-2\"\n            >\n              <MapPin className=\"w-3 h-3 mr-1\" />\n              Find on Maps\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9784},"test-enhanced-tags.js":{"content":"// Test script to verify enhanced tag system functionality\nconst BASE_URL = 'http://localhost:5000';\n\nasync function testCountryAliases() {\n  console.log('Testing Country Aliases...\\n');\n  \n  const testInputs = [\n    { input: 'America', expected: 'USA' },\n    { input: 'United States', expected: 'USA' },\n    { input: 'U.S.', expected: 'USA' },\n    { input: 'japan', expected: 'Japan' },\n    { input: 'uk', expected: 'England' }\n  ];\n  \n  for (const test of testInputs) {\n    console.log(`Testing: \"${test.input}\" → Expected: \"${test.expected}\"`);\n    // This would need actual API endpoint testing\n  }\n}\n\nasync function testCityTags() {\n  console.log('\\nTesting City Tags...\\n');\n  \n  const cities = [\n    { name: 'Tokyo', country: 'JP' },\n    { name: 'Las Vegas', country: 'US' },\n    { name: 'New York', country: 'US' },\n    { name: 'Paris', country: 'FR' },\n    { name: 'Unknown City', country: 'XX' } // Test fallback\n  ];\n  \n  for (const city of cities) {\n    try {\n      const response = await fetch(`${BASE_URL}/api/cities/tags/${city.name}/${city.country}`);\n      const data = await response.json();\n      \n      console.log(`\\n${city.name}, ${city.country}:`);\n      console.log(`  Tags found: ${data.tags ? data.tags.length : 0}`);\n      console.log(`  Is default: ${data.isDefault}`);\n      \n      if (data.tags && data.tags.length > 0) {\n        console.log(`  Sample tags: ${data.tags.slice(0, 3).join(', ')}`);\n      }\n    } catch (error) {\n      console.error(`  Error: ${error.message}`);\n    }\n  }\n}\n\nasync function testConversationFlow() {\n  console.log('\\n\\nTesting Conversation Flow with \"America\"...\\n');\n  \n  try {\n    // Start conversation\n    const startResponse = await fetch(`${BASE_URL}/api/conversation`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({})\n    });\n    const conversation = await startResponse.json();\n    console.log('Conversation started:', conversation.id);\n    \n    // Send \"America\" as destination\n    const messageResponse = await fetch(`${BASE_URL}/api/conversation/${conversation.id}/message`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message: 'America' })\n    });\n    const result = await messageResponse.json();\n    console.log('Response to \"America\":', result.response?.substring(0, 100) + '...');\n    console.log('Detected destination:', result.extractedInfo?.destination);\n    \n  } catch (error) {\n    console.error('Error in conversation flow:', error.message);\n  }\n}\n\nasync function runTests() {\n  console.log('=== Enhanced Tag System Test Suite ===\\n');\n  await testCountryAliases();\n  await testCityTags();\n  await testConversationFlow();\n  console.log('\\n=== Tests Complete ===');\n}\n\n// Run tests if server is available\nsetTimeout(runTests, 2000);","size_bytes":2838},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/data/cityTags.ts":{"content":"// City-specific popular attractions and experiences\n// These tags help users specify what they want to see/do in each city\n\nexport interface CityTags {\n  cityName: string;\n  countryCode: string;\n  tags: string[];\n}\n\nexport const cityTagsData: CityTags[] = [\n  // Japan\n  {\n    cityName: 'Tokyo',\n    countryCode: 'JP',\n    tags: ['Tokyo Disneyland', 'Tokyo Tower', 'Akihabara', 'Tsukiji Market', 'Shibuya Crossing', 'Senso-ji Temple', 'TeamLab Planets']\n  },\n  {\n    cityName: 'Kyoto',\n    countryCode: 'JP',\n    tags: ['Fushimi Inari', 'Golden Pavilion', 'Bamboo Forest', 'Gion District', 'Kiyomizu Temple', 'Traditional Tea Ceremony']\n  },\n  {\n    cityName: 'Osaka',\n    countryCode: 'JP',\n    tags: ['Osaka Castle', 'Dotonbori', 'Universal Studios', 'Street Food Tour', 'Shinsekai', 'Sumiyoshi Shrine']\n  },\n  {\n    cityName: 'Okinawa',\n    countryCode: 'JP',\n    tags: ['Churaumi Aquarium', 'Shuri Castle', 'Beach Hopping', 'Snorkeling', 'Island Tours', 'Local Cuisine']\n  },\n  {\n    cityName: 'Sapporo',\n    countryCode: 'JP',\n    tags: ['Skiing', 'Snow Viewing', 'Sapporo Ramen', 'Snow Festival', 'Beer Museum', 'Odori Park', 'Fresh Seafood', 'Winter Scenery']\n  },\n  {\n    cityName: 'Hakodate',\n    countryCode: 'JP',\n    tags: ['Hakodate Night View', 'Mount Hakodate', 'Fresh Seafood Market', 'Star-Shaped Fort', 'Hot Springs', 'Historical District', 'Winter Illuminations']\n  },\n  \n  // USA\n  {\n    cityName: 'New York',\n    countryCode: 'US',\n    tags: ['Statue of Liberty', 'Broadway Show', 'Times Square', 'Central Park', 'Museums (MoMA/Met)', 'Brooklyn Bridge', 'Foodie Tour']\n  },\n  {\n    cityName: 'Los Angeles',\n    countryCode: 'US',\n    tags: ['Hollywood Sign', 'Universal Studios', 'Santa Monica Pier', 'Griffith Observatory', 'Beverly Hills', 'Venice Beach', 'Studio Tours']\n  },\n  {\n    cityName: 'San Francisco',\n    countryCode: 'US',\n    tags: ['Golden Gate Bridge', 'Alcatraz Island', 'Fisherman\\'s Wharf', 'Cable Cars', 'Chinatown', 'Tech Tours', 'Wine Country']\n  },\n  {\n    cityName: 'Las Vegas',\n    countryCode: 'US',\n    tags: ['Casino Experience', 'Shows & Entertainment', 'Grand Canyon Tour', 'Fremont Street', 'High Roller', 'Buffets', 'Nightlife']\n  },\n  {\n    cityName: 'Miami',\n    countryCode: 'US',\n    tags: ['South Beach', 'Art Deco District', 'Little Havana', 'Everglades Tour', 'Wynwood Walls', 'Cuban Food', 'Nightlife']\n  },\n  \n  // France\n  {\n    cityName: 'Paris',\n    countryCode: 'FR',\n    tags: ['Eiffel Tower', 'Louvre Museum', 'Notre-Dame', 'Versailles', 'Montmartre', 'Seine River Cruise', 'French Cuisine']\n  },\n  {\n    cityName: 'Nice',\n    countryCode: 'FR',\n    tags: ['French Riviera', 'Old Town', 'Beach Clubs', 'Monaco Day Trip', 'Promenade des Anglais', 'Local Markets']\n  },\n  \n  // Italy\n  {\n    cityName: 'Rome',\n    countryCode: 'IT',\n    tags: ['Colosseum', 'Vatican City', 'Trevi Fountain', 'Roman Forum', 'Pantheon', 'Trastevere', 'Italian Cuisine']\n  },\n  {\n    cityName: 'Venice',\n    countryCode: 'IT',\n    tags: ['Gondola Ride', 'St. Mark\\'s Square', 'Rialto Bridge', 'Murano Glass', 'Doge\\'s Palace', 'Canal Tours']\n  },\n  {\n    cityName: 'Florence',\n    countryCode: 'IT',\n    tags: ['Uffizi Gallery', 'Duomo', 'Ponte Vecchio', 'Michelangelo\\'s David', 'Tuscan Wine', 'Leather Markets']\n  },\n  \n  // Spain\n  {\n    cityName: 'Barcelona',\n    countryCode: 'ES',\n    tags: ['Sagrada Familia', 'Park Güell', 'Las Ramblas', 'Gothic Quarter', 'Beach Life', 'Tapas Tour', 'Camp Nou']\n  },\n  {\n    cityName: 'Madrid',\n    countryCode: 'ES',\n    tags: ['Prado Museum', 'Royal Palace', 'Retiro Park', 'Flamenco Show', 'Tapas Crawl', 'Plaza Mayor', 'Bernabéu Stadium']\n  },\n  \n  // United Kingdom\n  {\n    cityName: 'London',\n    countryCode: 'GB',\n    tags: ['Big Ben', 'Tower of London', 'British Museum', 'West End Show', 'Camden Market', 'Afternoon Tea', 'Harry Potter Tour']\n  },\n  {\n    cityName: 'Edinburgh',\n    countryCode: 'GB',\n    tags: ['Edinburgh Castle', 'Royal Mile', 'Arthur\\'s Seat', 'Whisky Tasting', 'Ghost Tours', 'Scottish Highlands']\n  },\n  \n  // Thailand\n  {\n    cityName: 'Bangkok',\n    countryCode: 'TH',\n    tags: ['Grand Palace', 'Floating Markets', 'Street Food', 'Temple Tours', 'Chatuchak Market', 'River Cruise', 'Rooftop Bars']\n  },\n  {\n    cityName: 'Phuket',\n    countryCode: 'TH',\n    tags: ['Island Hopping', 'Beach Clubs', 'Old Town', 'Big Buddha', 'Snorkeling/Diving', 'Night Markets', 'Thai Massage']\n  },\n  {\n    cityName: 'Chiang Mai',\n    countryCode: 'TH',\n    tags: ['Elephant Sanctuary', 'Temple Circuit', 'Night Bazaar', 'Cooking Class', 'Doi Suthep', 'Jungle Trek', 'Sunday Market']\n  },\n  \n  // Australia\n  {\n    cityName: 'Sydney',\n    countryCode: 'AU',\n    tags: ['Opera House', 'Harbour Bridge', 'Bondi Beach', 'Blue Mountains', 'Taronga Zoo', 'Darling Harbour', 'Coastal Walk']\n  },\n  {\n    cityName: 'Melbourne',\n    countryCode: 'AU',\n    tags: ['Laneways & Coffee', 'Great Ocean Road', 'Queen Victoria Market', 'Street Art', 'Yarra Valley Wine', 'Sports Events']\n  },\n  \n  // Singapore\n  {\n    cityName: 'Singapore',\n    countryCode: 'SG',\n    tags: ['Marina Bay Sands', 'Gardens by the Bay', 'Sentosa Island', 'Hawker Centers', 'Orchard Road', 'Chinatown', 'Night Safari']\n  },\n  \n  // Dubai\n  {\n    cityName: 'Dubai',\n    countryCode: 'AE',\n    tags: ['Burj Khalifa', 'Desert Safari', 'Dubai Mall', 'Gold Souk', 'Beach Clubs', 'Dubai Fountain', 'Luxury Shopping']\n  },\n  \n  // South Korea\n  {\n    cityName: 'Seoul',\n    countryCode: 'KR',\n    tags: ['Gyeongbokgung Palace', 'N Seoul Tower', 'Myeongdong Shopping', 'Bukchon Village', 'K-Pop Experience', 'Street Food', 'DMZ Tour']\n  },\n  \n  // Germany\n  {\n    cityName: 'Berlin',\n    countryCode: 'DE',\n    tags: ['Brandenburg Gate', 'Berlin Wall', 'Museum Island', 'Checkpoint Charlie', 'Street Art', 'Beer Gardens', 'Nightlife']\n  },\n  {\n    cityName: 'Munich',\n    countryCode: 'DE',\n    tags: ['Neuschwanstein Castle', 'Oktoberfest', 'Marienplatz', 'Beer Halls', 'English Garden', 'BMW Museum', 'Day Trips']\n  },\n  \n  // Netherlands\n  {\n    cityName: 'Amsterdam',\n    countryCode: 'NL',\n    tags: ['Canal Cruise', 'Anne Frank House', 'Van Gogh Museum', 'Bike Tours', 'Red Light District', 'Cheese Markets', 'Tulip Fields']\n  },\n  \n  // Canada\n  {\n    cityName: 'Toronto',\n    countryCode: 'CA',\n    tags: ['CN Tower', 'Niagara Falls', 'Toronto Islands', 'Casa Loma', 'St. Lawrence Market', 'Distillery District', 'Sports Events']\n  },\n  {\n    cityName: 'Vancouver',\n    countryCode: 'CA',\n    tags: ['Stanley Park', 'Granville Island', 'Capilano Bridge', 'Whistler Day Trip', 'Gastown', 'Sea to Sky', 'Craft Beer']\n  },\n  \n  // Mexico\n  {\n    cityName: 'Mexico City',\n    countryCode: 'MX',\n    tags: ['Teotihuacan Pyramids', 'Frida Kahlo Museum', 'Xochimilco', 'Historic Center', 'Street Tacos', 'Chapultepec', 'Lucha Libre']\n  },\n  {\n    cityName: 'Cancun',\n    countryCode: 'MX',\n    tags: ['Beach Resorts', 'Mayan Ruins', 'Cenotes', 'Isla Mujeres', 'Nightlife', 'Snorkeling/Diving', 'All-Inclusive']\n  },\n  \n  // India\n  {\n    cityName: 'Delhi',\n    countryCode: 'IN',\n    tags: ['Red Fort', 'India Gate', 'Qutub Minar', 'Chandni Chowk', 'Lotus Temple', 'Street Food Tour', 'Taj Mahal Day Trip']\n  },\n  {\n    cityName: 'Mumbai',\n    countryCode: 'IN',\n    tags: ['Gateway of India', 'Marine Drive', 'Elephanta Caves', 'Bollywood Tour', 'Street Food', 'Colonial Architecture', 'Markets']\n  },\n  \n  // Turkey\n  {\n    cityName: 'Istanbul',\n    countryCode: 'TR',\n    tags: ['Hagia Sophia', 'Blue Mosque', 'Grand Bazaar', 'Bosphorus Cruise', 'Topkapi Palace', 'Turkish Bath', 'Street Food']\n  },\n  \n  // Egypt\n  {\n    cityName: 'Cairo',\n    countryCode: 'EG',\n    tags: ['Pyramids of Giza', 'Egyptian Museum', 'Khan el-Khalili', 'Nile Cruise', 'Coptic Cairo', 'Sound & Light Show', 'Local Markets']\n  },\n  \n  // Greece\n  {\n    cityName: 'Athens',\n    countryCode: 'GR',\n    tags: ['Acropolis', 'Parthenon', 'Ancient Agora', 'Plaka District', 'National Gardens', 'Greek Cuisine', 'Day Trips to Islands']\n  },\n  \n  // Brazil\n  {\n    cityName: 'Rio de Janeiro',\n    countryCode: 'BR',\n    tags: ['Christ the Redeemer', 'Copacabana Beach', 'Sugarloaf Mountain', 'Carnival', 'Favela Tour', 'Samba Experience', 'Ipanema']\n  },\n  \n  // Argentina\n  {\n    cityName: 'Buenos Aires',\n    countryCode: 'AR',\n    tags: ['Tango Show', 'La Boca', 'Recoleta Cemetery', 'Palermo District', 'Steak Houses', 'Wine Tasting', 'San Telmo Market']\n  }\n];\n\n// Get tags for a specific city\nexport function getCityTags(cityName: string, countryCode: string): string[] {\n  const city = cityTagsData.find(\n    c => c.cityName.toLowerCase() === cityName.toLowerCase() && \n         c.countryCode === countryCode\n  );\n  return city?.tags || [];\n}\n\n// Get default generic tags if city not found\nexport function getDefaultTags(): string[] {\n  return ['Must-see Highlights', 'Local Food & Culture', 'Shopping Districts', 'Nature & Parks', 'Museums & Art', 'Nightlife', 'Family Activities'];\n}","size_bytes":8935},"server/routes/cities.ts":{"content":"import { Router } from 'express';\nimport { cityService } from '../services/cityService';\nimport { placesEnrichmentService } from '../services/placesEnrichment';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Get cities by country\nrouter.get('/cities/country/:countryCode', async (req, res) => {\n  try {\n    const { countryCode } = req.params;\n    const cities = await cityService.getCitiesByCountry(countryCode);\n    res.json(cities);\n  } catch (error) {\n    console.error('Error fetching cities:', error);\n    res.status(500).json({ error: 'Failed to fetch cities' });\n  }\n});\n\n// Get curated cities (our recommendations)\nrouter.get('/cities/curated', async (req, res) => {\n  try {\n    const { country } = req.query;\n    const cities = await cityService.getCuratedCities(country as string);\n    res.json(cities);\n  } catch (error) {\n    console.error('Error fetching curated cities:', error);\n    res.status(500).json({ error: 'Failed to fetch curated cities' });\n  }\n});\n\n// Autocomplete cities\nrouter.get('/cities/autocomplete', async (req, res) => {\n  try {\n    const { q, country } = req.query;\n    \n    if (!q || typeof q !== 'string') {\n      return res.status(400).json({ error: 'Query parameter \"q\" is required' });\n    }\n    \n    // Try Google Places autocomplete if available\n    const predictions = await placesEnrichmentService.autocompleteCities(q, country as string);\n    \n    // Also search our database\n    const dbCities = await cityService.searchCities(q, country as string);\n    \n    // Combine results (Google predictions + DB results)\n    const results = {\n      predictions,\n      cities: dbCities\n    };\n    \n    res.json(results);\n  } catch (error) {\n    console.error('Error in city autocomplete:', error);\n    res.status(500).json({ error: 'Failed to autocomplete cities' });\n  }\n});\n\n// Validate and add a city\nrouter.post('/cities/validate', async (req, res) => {\n  try {\n    const schema = z.object({\n      cityName: z.string(),\n      countryCode: z.string().optional()\n    });\n    \n    const { cityName, countryCode } = schema.parse(req.body);\n    \n    // First check if we already have this city\n    let city = await cityService.findCity(cityName, countryCode);\n    \n    if (!city) {\n      // Try to enrich from Google Places\n      const enrichedCity = await placesEnrichmentService.validateAndEnrichCity(cityName, countryCode);\n      \n      if (enrichedCity) {\n        city = await cityService.upsertCity(enrichedCity);\n      } else {\n        return res.status(404).json({ error: 'City not found or could not be validated' });\n      }\n    }\n    \n    // Increment popularity when a city is selected\n    if (city) {\n      await cityService.incrementPopularity(city.id);\n    }\n    \n    res.json(city);\n  } catch (error) {\n    console.error('Error validating city:', error);\n    res.status(500).json({ error: 'Failed to validate city' });\n  }\n});\n\n// Seed curated cities (admin endpoint)\nrouter.post('/cities/seed', async (req, res) => {\n  try {\n    await placesEnrichmentService.seedCuratedCities();\n    res.json({ message: 'Curated cities seeded successfully' });\n  } catch (error) {\n    console.error('Error seeding cities:', error);\n    res.status(500).json({ error: 'Failed to seed cities' });\n  }\n});\n\nexport default router;","size_bytes":3267},"server/scripts/seedCities.ts":{"content":"import { db } from '../db';\nimport { cities } from '@shared/schema';\nimport { CityService } from '../services/cityService';\n\nconst cityService = new CityService();\n\n// Curated cities database - 5-8 major cities per country\nconst CURATED_CITIES = {\n  // Asia Pacific\n  'JP': [\n    { name: 'Tokyo', placeId: 'ChIJXSModoWLGGARILWiCfeu2M0' },\n    { name: 'Osaka', placeId: 'ChIJ4eIGNFXmAGAR5y9q5G7BW8U' },\n    { name: 'Kyoto', placeId: 'ChIJ8cM8zdaoAWARPR27azYdlsA' },\n    { name: 'Okinawa', placeId: 'ChIJ51ur7mJw9TQRBYPQqUlkxCk' },\n    { name: 'Sapporo', placeId: 'ChIJybDUYxLpC18RPLUIIDM1VDI' },\n    { name: 'Hakodate', placeId: 'ChIJXcmNtYvyl18RlO6L1JEJpSM' },\n    { name: 'Fukuoka', placeId: 'ChIJGZv0BW6QQTURh-C95XOPiD0' },\n    { name: 'Nagoya', placeId: 'ChIJKwtT0WNwA2ARJKBi_Pw0vqg' },\n    { name: 'Yokohama', placeId: 'ChIJm6cXLsoGGGARk-ngTygtEtY' },\n  ],\n  'KR': [\n    { name: 'Seoul', placeId: 'ChIJzWXFYYuifDUR64Pq5LTtioU' },\n    { name: 'Busan', placeId: 'ChIJNc0j6G3raDURpwhxJHTL2DU' },\n    { name: 'Jeju', placeId: 'ChIJRUDITFTjDDURMb8emNI2vGY' },\n    { name: 'Incheon', placeId: 'ChIJQ-XjI24RezURDZsv2p0rsQI' },\n    { name: 'Daegu', placeId: 'ChIJAzRoxG_hZjURpBnvzy0FqKk' },\n    { name: 'Gyeongju', placeId: 'ChIJyfAMZbUZZjURcv8aNtLodGo' },\n  ],\n  'CN': [\n    { name: 'Beijing', placeId: 'ChIJuSwU55ZS8DURiqkPryBWYrk' },\n    { name: 'Shanghai', placeId: 'ChIJMzz1sUBwsjURoWTDI5QSlQI' },\n    { name: 'Hong Kong', placeId: 'ChIJD5gyo-3iAzQRfMnq27qzivA' },\n    { name: 'Shenzhen', placeId: 'ChIJkVLh0Aj0AzQRyYCStw1V7v0' },\n    { name: 'Guangzhou', placeId: 'ChIJxytco5X4AjQRFeTqrXXgWQ4' },\n    { name: 'Chengdu', placeId: 'ChIJIXdaoxE7KTYRh_6fRhhVQcI' },\n    { name: 'Xi\\'an', placeId: 'ChIJuResIul5YzYRLliUp_1m1IU' },\n  ],\n  'TH': [\n    { name: 'Bangkok', placeId: 'ChIJ82ENKDJgHTERIEjiXbIAAQE' },\n    { name: 'Phuket', placeId: 'ChIJKdgsoyXiUjARIAIbLLWjOLE' },\n    { name: 'Chiang Mai', placeId: 'ChIJzzE3FVIh2jAR04p6qmGBk6Q' },\n    { name: 'Pattaya', placeId: 'ChIJZeH3cNh44jAR3g-WJZfpkVE' },\n    { name: 'Krabi', placeId: 'ChIJYZpqpH4lUTARQKBOhNR3m0c' },\n    { name: 'Koh Samui', placeId: 'ChIJf1YQd0oQ4TARMPq0vRslXR0' },\n  ],\n  'SG': [\n    { name: 'Singapore', placeId: 'ChIJyY4rtGcX2jERIKTarqz3AAQ' },\n  ],\n  'MY': [\n    { name: 'Kuala Lumpur', placeId: 'ChIJ5-rvAcdJzDERfBCK0Jkz8fE' },\n    { name: 'Penang', placeId: 'ChIJw-3c7rl0SjARDA0SpITjqSE' },\n    { name: 'Langkawi', placeId: 'ChIJO1KH2kJUSgYRWAz7CpB5Pu8' },\n    { name: 'Malacca', placeId: 'ChIJPVBfyKjs0TERb5tIK9pEY3I' },\n    { name: 'Kota Kinabalu', placeId: 'ChIJYQEEE2YxOzIRR5Xct3V9p7c' },\n  ],\n  'VN': [\n    { name: 'Ho Chi Minh City', placeId: 'ChIJ0T2NLikpdTERKxE8d61aX_E' },\n    { name: 'Hanoi', placeId: 'ChIJoRyG2ZurNTERqRfKcnt_iOc' },\n    { name: 'Da Nang', placeId: 'ChIJEyolAaQZQjERJYvnfEoOeJc' },\n    { name: 'Hoi An', placeId: 'ChIJSZJ1aqQOQjERNrNZxnOWE18' },\n    { name: 'Nha Trang', placeId: 'ChIJP7yveDhncDERxhJEbzWkGEo' },\n    { name: 'Phu Quoc', placeId: 'ChIJJ7cNgvzRoTERaEH5c3ZJBwc' },\n  ],\n  'ID': [\n    { name: 'Jakarta', placeId: 'ChIJnUvjREdaai4RoobX2g0_V_0' },\n    { name: 'Bali', placeId: 'ChIJoQ8Q6NNB0S0RkOYkS7EPkSQ' },\n    { name: 'Yogyakarta', placeId: 'ChIJxWtbvYdXei4R0Nh0M85QdFE' },\n    { name: 'Surabaya', placeId: 'ChIJH7Yf_oD51y0RQ1vMYwOrgog' },\n    { name: 'Bandung', placeId: 'ChIJX4Gx8eTC1i0R0q5NswFIQlo' },\n  ],\n  'PH': [\n    { name: 'Manila', placeId: 'ChIJi8MeVwPKlzMRH8FpEHXV0Wk' },\n    { name: 'Cebu', placeId: 'ChIJY96HXyWZqTMRKG4K8jq8wHs' },\n    { name: 'Boracay', placeId: 'ChIJK8H0cOpzvDMRm0GbUQHy5pw' },\n    { name: 'Palawan', placeId: 'ChIJO25BW_NHuDMRCGuxJOIfK7M' },\n    { name: 'Davao', placeId: 'ChIJy4cQ5K5v-jIRdEE6AOJSRWI' },\n  ],\n  'IN': [\n    { name: 'New Delhi', placeId: 'ChIJLbZ-NFv9DDkRzk0gTkm3wlI' },\n    { name: 'Mumbai', placeId: 'ChIJwe1EZjDG5zsRaYxkjY_tpF0' },\n    { name: 'Goa', placeId: 'ChIJQbc2YxC6vzsRkkDzLC0-AHU' },\n    { name: 'Jaipur', placeId: 'ChIJgeJXTN9KbDkRCS7yDDrG4Qw' },\n    { name: 'Kerala', placeId: 'ChIJW_Wc1P8SCDsRSGlJ6L5fBGI' },\n    { name: 'Agra', placeId: 'ChIJZ_Q5TwWCDTkRRiNO5xOojws' },\n    { name: 'Bangalore', placeId: 'ChIJbU60yXAWrjsR4E9-UejD3_g' },\n  ],\n  \n  // Europe\n  'GB': [\n    { name: 'London', placeId: 'ChIJdd4hrwug2EcRmSrV3Vo6llI' },\n    { name: 'Edinburgh', placeId: 'ChIJIyaYpQC4h0gRJxfnfHsU8mQ' },\n    { name: 'Manchester', placeId: 'ChIJ2_UmUkxNekgRqmv-BDgUvtk' },\n    { name: 'Liverpool', placeId: 'ChIJt2BwZIrfekgRAW4XP28E3EI' },\n    { name: 'Oxford', placeId: 'ChIJrx_ErYAzcUgRAnRUy6jbIMg' },\n    { name: 'Cambridge', placeId: 'ChIJLQEq84ld2EcRIT1eo-Ego2M' },\n  ],\n  'FR': [\n    { name: 'Paris', placeId: 'ChIJD7fiBh9u5kcRYJSMaMOCCwQ' },\n    { name: 'Nice', placeId: 'ChIJMS2FahDQzRIRcJaX5CqrKAE' },\n    { name: 'Lyon', placeId: 'ChIJl4foalHq9EcR8CG75CqrCAQ' },\n    { name: 'Marseille', placeId: 'ChIJM1PaREO_yRIRIAKX_aUZCAQ' },\n    { name: 'Bordeaux', placeId: 'ChIJWcbCyuyxVQ0R0IpqBl6kstE' },\n  ],\n  'DE': [\n    { name: 'Berlin', placeId: 'ChIJAVkDPzdOqEcRcDteW0YgIQQ' },\n    { name: 'Munich', placeId: 'ChIJ2V-Mo_l1nkcRfZixfUq4DAE' },\n    { name: 'Frankfurt', placeId: 'ChIJxZZwR28JvUcRAMawKVBDIgQ' },\n    { name: 'Hamburg', placeId: 'ChIJuRMYfoNhsUcRoDrWe_I9JgQ' },\n    { name: 'Cologne', placeId: 'ChIJ5S-raZElv0cR8HcqSvxgJwQ' },\n  ],\n  'IT': [\n    { name: 'Rome', placeId: 'ChIJu46S-ZZhLxMROG5lkwZ3D7k' },\n    { name: 'Venice', placeId: 'ChIJiT3W8dqxfkcRLxCSvfDGo3s' },\n    { name: 'Florence', placeId: 'ChIJrdbSgKZWKhMRAyrH7xd51ZM' },\n    { name: 'Milan', placeId: 'ChIJ53USP0nBhkcRjQ50xhPN_zw' },\n    { name: 'Naples', placeId: 'ChIJZ2Xh5U4IOxMRYLkHAQoTr0w' },\n    { name: 'Sicily', placeId: 'ChIJBc4YvhFWGRMRFt3rGxQ7Vyg' },\n  ],\n  'ES': [\n    { name: 'Madrid', placeId: 'ChIJgTwKgJcpQg0RaSKMYcHeNsQ' },\n    { name: 'Barcelona', placeId: 'ChIJ5TCOcRaYpBIRCmZHTz37sEQ' },\n    { name: 'Seville', placeId: 'ChIJkWK-FBFsEg0RSFb-HGIY8DQ' },\n    { name: 'Valencia', placeId: 'ChIJb7Dv8ExPYA0ROR1_HwFRo7Q' },\n    { name: 'Malaga', placeId: 'ChIJUdEwjWn2cg0RgOZ2pXjSAwQ' },\n    { name: 'Ibiza', placeId: 'ChIJm2Y9hdcZkRIRYMN3swVZQmg' },\n  ],\n  'PT': [\n    { name: 'Lisbon', placeId: 'ChIJO_PkYRozGQ0R0DaQ5L3rAAQ' },\n    { name: 'Porto', placeId: 'ChIJwVPhxKtlJA0RvCxypRkLAh8' },\n    { name: 'Faro', placeId: 'ChIJl_BVJzKBGw0RhNhRRjNAVmo' },\n    { name: 'Madeira', placeId: 'ChIJMwynL7jUWgsRGoGyIhXD2eE' },\n  ],\n  'NL': [\n    { name: 'Amsterdam', placeId: 'ChIJVXealLU_xkcRja_At0z9AGY' },\n    { name: 'Rotterdam', placeId: 'ChIJfcRmD9i9xUcRN2X86zYgVqE' },\n    { name: 'The Hague', placeId: 'ChIJN-A4bQy4xUcRqQFPJVSMrRI' },\n    { name: 'Utrecht', placeId: 'ChIJNy3TOUNvxkcRHTiOySeoJCA' },\n  ],\n  'BE': [\n    { name: 'Brussels', placeId: 'ChIJ_58qNMXEw0cRTLJJ4hOg7Tc' },\n    { name: 'Bruges', placeId: 'ChIJ7fjtOOcvw0cR7UfUaGItnWQ' },\n    { name: 'Antwerp', placeId: 'ChIJwxmQQeP3w0cR9SIDQOLesDM' },\n    { name: 'Ghent', placeId: 'ChIJrUOqZ-luw0cRr-PZPClWABY' },\n  ],\n  'CH': [\n    { name: 'Zurich', placeId: 'ChIJGaK-SZcLkEcRA9wf5_GNbuY' },\n    { name: 'Geneva', placeId: 'ChIJ6-LQkwZljEcRObwLezWVtqA' },\n    { name: 'Interlaken', placeId: 'ChIJhZnA0yntj0cR0IpqBl6kstE' },\n    { name: 'Lucerne', placeId: 'ChIJAYvjEZJNkEcRYFq0TaJjlkQ' },\n    { name: 'Zermatt', placeId: 'ChIJT3HCe0v9ikcRGD3wCaKDfWo' },\n  ],\n  'AT': [\n    { name: 'Vienna', placeId: 'ChIJn8o2UZ4HbUcRLIiOa8HQgKI' },\n    { name: 'Salzburg', placeId: 'ChIJfyD0NlsYdkcRI5WOn8hC66s' },\n    { name: 'Innsbruck', placeId: 'ChIJc8r44c9unkcRDZsdKH0cIJ0' },\n  ],\n  \n  // Americas\n  'US': [\n    { name: 'New York', placeId: 'ChIJOwg_06VPwokRYv534QaPC8g' },\n    { name: 'Los Angeles', placeId: 'ChIJE9on3F3HwoAR9AhGJW_fL-I' },\n    { name: 'San Francisco', placeId: 'ChIJIQBpAG2ahYAR_6128GcTUEo' },\n    { name: 'Las Vegas', placeId: 'ChIJ0X31pIK3voARo3mz1ebVzDo' },\n    { name: 'Miami', placeId: 'ChIJEcHIDqKw2YgRZU-t3XHylv8' },\n    { name: 'Chicago', placeId: 'ChIJ7cv00DwsDogRAMDACa2m4K8' },\n    { name: 'Seattle', placeId: 'ChIJVTPokywQkFQRmtVEaUZlJRA' },\n    { name: 'Dallas', placeId: 'ChIJS5dFe_cZTIYRj2dH9qSb7Lk' },\n  ],\n  'CA': [\n    { name: 'Toronto', placeId: 'ChIJpTvG15DL1IkRd8S0KlBVNTI' },\n    { name: 'Vancouver', placeId: 'ChIJs0-pQ_FzhlQRi_OBm-qWkbs' },\n    { name: 'Montreal', placeId: 'ChIJDbdkHFQayUwR7-8fITgxTmU' },\n    { name: 'Calgary', placeId: 'ChIJ1T-EnwNwcVMROrZStrE7bSY' },\n    { name: 'Quebec City', placeId: 'ChIJk4jbBYmWuEwRAzro8GMtxY8' },\n  ],\n  'MX': [\n    { name: 'Mexico City', placeId: 'ChIJB3UJ2yYAzoURQeheJnhNKgQ' },\n    { name: 'Cancun', placeId: 'ChIJU2N_06wvTI8R7XLI8GZDFDc' },\n    { name: 'Guadalajara', placeId: 'ChIJ46PJ4yjDKIQRK0trCmZ3FoE' },\n    { name: 'Oaxaca', placeId: 'ChIJMzz6sVr9xYUR1Y_qyvy0BDg' },\n    { name: 'Tulum', placeId: 'ChIJv7uupvN0To8RUjNfvU-g9YE' },\n  ],\n  'BR': [\n    { name: 'Rio de Janeiro', placeId: 'ChIJW6AIkVXemwARTtIvZ2xC3FA' },\n    { name: 'São Paulo', placeId: 'ChIJ0WGkg4FEzpQRrlsz_whLqZs' },\n    { name: 'Salvador', placeId: 'ChIJJZZ3keyNFgcRS1s9mTg5_UE' },\n    { name: 'Brasilia', placeId: 'ChIJyUj0k9SgXpMRBT3XN9qTzWw' },\n    { name: 'Florianopolis', placeId: 'ChIJNwpgjJk5J5URqx-XLjwXsno' },\n  ],\n  \n  // Oceania\n  'AU': [\n    { name: 'Sydney', placeId: 'ChIJP3Sa8ziYEmsRUKgyFmh9AQM' },\n    { name: 'Melbourne', placeId: 'ChIJ90260rVG1moRkM2MIXVWBAQ' },\n    { name: 'Brisbane', placeId: 'ChIJM9KTrJpXkWsRQK_e81qjAgQ' },\n    { name: 'Gold Coast', placeId: 'ChIJt2BdK0PRkWsRcK_e81qjAgM' },\n    { name: 'Perth', placeId: 'ChIJP1t_Q0RGMioRLtMkMnJ4AQU' },\n    { name: 'Cairns', placeId: 'ChIJqTnRzcKvlmkRhNFQkLJJBQU' },\n  ],\n  'NZ': [\n    { name: 'Auckland', placeId: 'ChIJ--acWvtHDW0RF5miQ2HvAAU' },\n    { name: 'Wellington', placeId: 'ChIJy3TpSfyxOG0RcLQTomPvAAo' },\n    { name: 'Queenstown', placeId: 'ChIJX96o1_Gd1akRAKB_WNZMaH0' },\n    { name: 'Christchurch', placeId: 'ChIJAe3FY0gvMm0RRZl5hIbvAAU' },\n    { name: 'Rotorua', placeId: 'ChIJTx5zyEqjbm0RGMQfN2xo6BQ' },\n  ],\n};\n\nasync function seedCities() {\n  console.log('🌍 Starting city seeding process...');\n  \n  let totalCities = 0;\n  let successfulSeeds = 0;\n  let failedSeeds = 0;\n  \n  for (const [countryCode, citiesList] of Object.entries(CURATED_CITIES)) {\n    console.log(`\\n📍 Processing ${countryCode}...`);\n    \n    for (const city of citiesList) {\n      totalCities++;\n      \n      try {\n        // Find country name (simplified mapping)\n        const countryNames: Record<string, string> = {\n          'JP': 'Japan', 'KR': 'South Korea', 'CN': 'China', 'TH': 'Thailand',\n          'SG': 'Singapore', 'MY': 'Malaysia', 'VN': 'Vietnam', 'ID': 'Indonesia',\n          'PH': 'Philippines', 'IN': 'India', 'GB': 'United Kingdom', 'FR': 'France',\n          'DE': 'Germany', 'IT': 'Italy', 'ES': 'Spain', 'PT': 'Portugal',\n          'NL': 'Netherlands', 'BE': 'Belgium', 'CH': 'Switzerland', 'AT': 'Austria',\n          'US': 'United States', 'CA': 'Canada', 'MX': 'Mexico', 'BR': 'Brazil',\n          'AU': 'Australia', 'NZ': 'New Zealand'\n        };\n        \n        // Create city data directly\n        const cityData = {\n          googlePlaceId: city.placeId,\n          cityName: city.name,\n          countryCode: countryCode,\n          countryName: countryNames[countryCode] || countryCode,\n          adminLevel1: null,\n          latitude: 0, // Will be enriched later via Google Places\n          longitude: 0,\n          isCurated: true,\n          popularity: 100, // Curated cities get high popularity\n          metadata: null,\n          lastValidated: new Date()\n        };\n        \n        // Upsert city to database\n        const saved = await cityService.upsertCity(cityData);\n        \n        if (saved) {\n          console.log(`✅ Seeded: ${city.name}, ${countryCode}`);\n          successfulSeeds++;\n        } else {\n          console.log(`⚠️ Failed to save: ${city.name}, ${countryCode}`);\n          failedSeeds++;\n        }\n      } catch (error) {\n        console.error(`❌ Error seeding ${city.name}: ${error}`);\n        failedSeeds++;\n      }\n      \n      // Rate limiting - pause between API calls\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n  \n  console.log('\\n' + '='.repeat(50));\n  console.log('📊 City Seeding Complete!');\n  console.log(`Total Cities: ${totalCities}`);\n  console.log(`✅ Successfully Seeded: ${successfulSeeds}`);\n  console.log(`❌ Failed: ${failedSeeds}`);\n  console.log('='.repeat(50));\n}\n\n// Run the seeding\nseedCities()\n  .then(() => {\n    console.log('✨ Seeding process finished');\n    process.exit(0);\n  })\n  .catch((err) => {\n    console.error('💥 Fatal error during seeding:', err);\n    process.exit(1);\n  });","size_bytes":12475},"server/services/cityService.ts":{"content":"import { db } from '../db';\nimport { cities, placesCache, type City, type InsertCity } from '@shared/schema';\nimport { eq, and, desc, inArray, sql, gte } from 'drizzle-orm';\n\n// Curated cities data - our foundation database\nexport const curatedCities: Omit<InsertCity, 'googlePlaceId' | 'latitude' | 'longitude'>[] = [\n  // Japan\n  { cityName: 'Tokyo', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Tokyo', isCurated: true, popularity: 100 },\n  { cityName: 'Kyoto', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Kyoto', isCurated: true, popularity: 95 },\n  { cityName: 'Osaka', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Osaka', isCurated: true, popularity: 90 },\n  { cityName: 'Okinawa', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Okinawa', isCurated: true, popularity: 85 },\n  { cityName: 'Sapporo', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Hokkaido', isCurated: true, popularity: 80 },\n  { cityName: 'Fukuoka', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Fukuoka', isCurated: true, popularity: 75 },\n  { cityName: 'Yokohama', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Kanagawa', isCurated: true, popularity: 70 },\n  { cityName: 'Nagoya', countryCode: 'JP', countryName: 'Japan', adminLevel1: 'Aichi', isCurated: true, popularity: 65 },\n  \n  // USA\n  { cityName: 'New York', countryCode: 'US', countryName: 'United States', adminLevel1: 'New York', isCurated: true, popularity: 100 },\n  { cityName: 'Los Angeles', countryCode: 'US', countryName: 'United States', adminLevel1: 'California', isCurated: true, popularity: 95 },\n  { cityName: 'San Francisco', countryCode: 'US', countryName: 'United States', adminLevel1: 'California', isCurated: true, popularity: 90 },\n  { cityName: 'Miami', countryCode: 'US', countryName: 'United States', adminLevel1: 'Florida', isCurated: true, popularity: 85 },\n  { cityName: 'Las Vegas', countryCode: 'US', countryName: 'United States', adminLevel1: 'Nevada', isCurated: true, popularity: 85 },\n  { cityName: 'Chicago', countryCode: 'US', countryName: 'United States', adminLevel1: 'Illinois', isCurated: true, popularity: 80 },\n  { cityName: 'Dallas', countryCode: 'US', countryName: 'United States', adminLevel1: 'Texas', isCurated: true, popularity: 75 },\n  { cityName: 'Seattle', countryCode: 'US', countryName: 'United States', adminLevel1: 'Washington', isCurated: true, popularity: 75 },\n  \n  // France\n  { cityName: 'Paris', countryCode: 'FR', countryName: 'France', adminLevel1: 'Île-de-France', isCurated: true, popularity: 100 },\n  { cityName: 'Nice', countryCode: 'FR', countryName: 'France', adminLevel1: 'Provence-Alpes-Côte d\\'Azur', isCurated: true, popularity: 85 },\n  { cityName: 'Lyon', countryCode: 'FR', countryName: 'France', adminLevel1: 'Auvergne-Rhône-Alpes', isCurated: true, popularity: 75 },\n  { cityName: 'Marseille', countryCode: 'FR', countryName: 'France', adminLevel1: 'Provence-Alpes-Côte d\\'Azur', isCurated: true, popularity: 70 },\n  { cityName: 'Bordeaux', countryCode: 'FR', countryName: 'France', adminLevel1: 'Nouvelle-Aquitaine', isCurated: true, popularity: 65 },\n  { cityName: 'Strasbourg', countryCode: 'FR', countryName: 'France', adminLevel1: 'Grand Est', isCurated: true, popularity: 60 },\n  \n  // Italy\n  { cityName: 'Rome', countryCode: 'IT', countryName: 'Italy', adminLevel1: 'Lazio', isCurated: true, popularity: 100 },\n  { cityName: 'Venice', countryCode: 'IT', countryName: 'Italy', adminLevel1: 'Veneto', isCurated: true, popularity: 95 },\n  { cityName: 'Florence', countryCode: 'IT', countryName: 'Italy', adminLevel1: 'Tuscany', isCurated: true, popularity: 90 },\n  { cityName: 'Milan', countryCode: 'IT', countryName: 'Italy', adminLevel1: 'Lombardy', isCurated: true, popularity: 85 },\n  { cityName: 'Naples', countryCode: 'IT', countryName: 'Italy', adminLevel1: 'Campania', isCurated: true, popularity: 75 },\n  { cityName: 'Venice', countryCode: 'IT', countryName: 'Italy', adminLevel1: 'Veneto', isCurated: true, popularity: 70 },\n  \n  // Spain\n  { cityName: 'Barcelona', countryCode: 'ES', countryName: 'Spain', adminLevel1: 'Catalonia', isCurated: true, popularity: 100 },\n  { cityName: 'Madrid', countryCode: 'ES', countryName: 'Spain', adminLevel1: 'Madrid', isCurated: true, popularity: 95 },\n  { cityName: 'Seville', countryCode: 'ES', countryName: 'Spain', adminLevel1: 'Andalusia', isCurated: true, popularity: 85 },\n  { cityName: 'Valencia', countryCode: 'ES', countryName: 'Spain', adminLevel1: 'Valencia', isCurated: true, popularity: 75 },\n  { cityName: 'Granada', countryCode: 'ES', countryName: 'Spain', adminLevel1: 'Andalusia', isCurated: true, popularity: 70 },\n  { cityName: 'Malaga', countryCode: 'ES', countryName: 'Spain', adminLevel1: 'Andalusia', isCurated: true, popularity: 65 },\n  \n  // United Kingdom\n  { cityName: 'London', countryCode: 'GB', countryName: 'United Kingdom', adminLevel1: 'England', isCurated: true, popularity: 100 },\n  { cityName: 'Edinburgh', countryCode: 'GB', countryName: 'United Kingdom', adminLevel1: 'Scotland', isCurated: true, popularity: 85 },\n  { cityName: 'Manchester', countryCode: 'GB', countryName: 'United Kingdom', adminLevel1: 'England', isCurated: true, popularity: 75 },\n  { cityName: 'Liverpool', countryCode: 'GB', countryName: 'United Kingdom', adminLevel1: 'England', isCurated: true, popularity: 70 },\n  { cityName: 'Cambridge', countryCode: 'GB', countryName: 'United Kingdom', adminLevel1: 'England', isCurated: true, popularity: 65 },\n  { cityName: 'Oxford', countryCode: 'GB', countryName: 'United Kingdom', adminLevel1: 'England', isCurated: true, popularity: 65 },\n  \n  // Thailand\n  { cityName: 'Bangkok', countryCode: 'TH', countryName: 'Thailand', adminLevel1: 'Bangkok', isCurated: true, popularity: 100 },\n  { cityName: 'Phuket', countryCode: 'TH', countryName: 'Thailand', adminLevel1: 'Phuket', isCurated: true, popularity: 90 },\n  { cityName: 'Chiang Mai', countryCode: 'TH', countryName: 'Thailand', adminLevel1: 'Chiang Mai', isCurated: true, popularity: 85 },\n  { cityName: 'Pattaya', countryCode: 'TH', countryName: 'Thailand', adminLevel1: 'Chonburi', isCurated: true, popularity: 75 },\n  { cityName: 'Krabi', countryCode: 'TH', countryName: 'Thailand', adminLevel1: 'Krabi', isCurated: true, popularity: 70 },\n  { cityName: 'Koh Samui', countryCode: 'TH', countryName: 'Thailand', adminLevel1: 'Surat Thani', isCurated: true, popularity: 65 },\n];\n\nexport class CityService {\n  // Get cities by country code\n  async getCitiesByCountry(countryCode: string): Promise<City[]> {\n    return await db\n      .select()\n      .from(cities)\n      .where(eq(cities.countryCode, countryCode.toUpperCase()))\n      .orderBy(desc(cities.popularity), cities.cityName);\n  }\n\n  // Get curated cities (our recommendations)\n  async getCuratedCities(countryCode?: string): Promise<City[]> {\n    const conditions = [eq(cities.isCurated, true)];\n    if (countryCode) {\n      conditions.push(eq(cities.countryCode, countryCode.toUpperCase()));\n    }\n    \n    return await db\n      .select()\n      .from(cities)\n      .where(and(...conditions))\n      .orderBy(desc(cities.popularity), cities.cityName);\n  }\n\n  // Find city by name and country\n  async findCity(cityName: string, countryCode?: string): Promise<City | null> {\n    const conditions = [eq(cities.cityName, cityName)];\n    if (countryCode) {\n      conditions.push(eq(cities.countryCode, countryCode.toUpperCase()));\n    }\n    \n    const result = await db\n      .select()\n      .from(cities)\n      .where(and(...conditions))\n      .limit(1);\n    \n    return result[0] || null;\n  }\n\n  // Find city by Google Place ID\n  async findCityByPlaceId(googlePlaceId: string): Promise<City | null> {\n    const result = await db\n      .select()\n      .from(cities)\n      .where(eq(cities.googlePlaceId, googlePlaceId))\n      .limit(1);\n    \n    return result[0] || null;\n  }\n\n  // Upsert city (insert or update)\n  async upsertCity(cityData: InsertCity): Promise<City> {\n    const existing = await this.findCityByPlaceId(cityData.googlePlaceId);\n    \n    if (existing) {\n      // Update existing city\n      const updateData: any = {\n        cityName: cityData.cityName,\n        countryCode: cityData.countryCode,\n        countryName: cityData.countryName,\n        adminLevel1: cityData.adminLevel1,\n        latitude: cityData.latitude,\n        longitude: cityData.longitude,\n        isCurated: cityData.isCurated,\n        updatedAt: new Date()\n      };\n      \n      if (cityData.popularity !== undefined) {\n        updateData.popularity = cityData.popularity;\n      }\n      if (cityData.metadata !== undefined) {\n        updateData.metadata = cityData.metadata;\n      }\n      if (cityData.lastValidated !== undefined) {\n        updateData.lastValidated = cityData.lastValidated;\n      }\n      \n      const [updated] = await db\n        .update(cities)\n        .set(updateData)\n        .where(eq(cities.googlePlaceId, cityData.googlePlaceId))\n        .returning();\n      return updated;\n    } else {\n      // Insert new city\n      const [inserted] = await db\n        .insert(cities)\n        .values([cityData])\n        .returning();\n      return inserted;\n    }\n  }\n\n  // Cache Google Places API response\n  async cacheResponse(cacheKey: string, data: any, ttlSeconds: number = 3600): Promise<void> {\n    const expiresAt = new Date(Date.now() + ttlSeconds * 1000);\n    \n    // Delete old cache entry if exists\n    await db.delete(placesCache).where(eq(placesCache.cacheKey, cacheKey));\n    \n    // Insert new cache entry\n    await db.insert(placesCache).values({\n      cacheKey,\n      responseData: data,\n      expiresAt\n    });\n  }\n\n  // Get cached response\n  async getCachedResponse(cacheKey: string): Promise<any | null> {\n    const now = new Date();\n    \n    const result = await db\n      .select()\n      .from(placesCache)\n      .where(and(\n        eq(placesCache.cacheKey, cacheKey),\n        gte(placesCache.expiresAt, now)\n      ))\n      .limit(1);\n    \n    if (result.length > 0) {\n      return result[0].responseData;\n    }\n    \n    return null;\n  }\n\n  // Clean expired cache entries\n  async cleanExpiredCache(): Promise<void> {\n    const now = new Date();\n    await db.delete(placesCache).where(sql`${placesCache.expiresAt} < ${now}`);\n  }\n\n  // Search cities with fuzzy matching\n  async searchCities(query: string, countryCode?: string): Promise<City[]> {\n    const searchPattern = `%${query}%`;\n    const conditions = [sql`${cities.cityName} ILIKE ${searchPattern}`];\n    \n    if (countryCode) {\n      conditions.push(eq(cities.countryCode, countryCode.toUpperCase()));\n    }\n    \n    return await db\n      .select()\n      .from(cities)\n      .where(and(...conditions))\n      .orderBy(desc(cities.popularity), cities.cityName)\n      .limit(10);\n  }\n\n  // Increment city popularity (when selected by users)\n  async incrementPopularity(cityId: number): Promise<void> {\n    await db\n      .update(cities)\n      .set({\n        popularity: sql`${cities.popularity} + 1`\n      })\n      .where(eq(cities.id, cityId));\n  }\n}\n\nexport const cityService = new CityService();","size_bytes":11068},"server/services/llmRanking.ts":{"content":"import OpenAI from 'openai';\nimport { GooglePlacesResult } from './googlePlaces';\n\ninterface RankingContext {\n  query: string;\n  city?: string;\n  tags?: string[];\n  timeSlot?: string;\n  currentLocation?: { lat: number; lng: number };\n}\n\nexport async function rankAndFilterPOIs(\n  places: GooglePlacesResult[],\n  context: RankingContext\n): Promise<GooglePlacesResult[]> {\n  try {\n    // If we have 5 or fewer results, return them all\n    if (places.length <= 5) {\n      return places;\n    }\n\n    const openai = new OpenAI({ \n      apiKey: process.env.OPENAI_API_KEY \n    });\n\n    // Prepare POI list for LLM\n    const poiList = places.slice(0, 20).map((place, index) => ({\n      index,\n      name: place.name,\n      rating: place.rating || 0,\n      reviews: place.user_ratings_total || 0,\n      types: place.types || [],\n      address: place.address,\n      price_level: place.price_level || 0,\n      description: place.description\n    }));\n\n    const prompt = `\nYou are helping select the best POIs for a traveler's search query.\n\nSearch Query: \"${context.query}\"\n${context.city ? `City: ${context.city}` : ''}\n${context.tags ? `Trip Preferences: ${context.tags.join(', ')}` : ''}\n${context.timeSlot ? `Time Slot: ${context.timeSlot}` : ''}\n\nAvailable POIs:\n${JSON.stringify(poiList, null, 2)}\n\nInstructions:\n1. Rank the POIs by relevance to the search query\n2. Consider rating quality (prefer 4.0+ with 200+ reviews, but include lower if highly relevant)\n3. Filter out low-credibility options (rating < 3.5 with < 50 reviews)\n4. Consider variety - don't return only the same type of place\n5. Return exactly 5 best options (or fewer if not enough quality matches)\n\nReturn a JSON object with:\n{\n  \"selected_indices\": [array of indices of selected POIs in order of relevance],\n  \"reasoning\": \"brief explanation of selection\"\n}\n`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o', // Latest model as per blueprint\n      messages: [\n        {\n          role: 'system',\n          content: 'You are an expert travel curator helping select the best places based on search queries.'\n        },\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      response_format: { type: 'json_object' },\n      temperature: 0.3, // Lower temperature for more consistent ranking\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    if (!result.selected_indices || !Array.isArray(result.selected_indices)) {\n      // Fallback to simple quality-based filtering\n      return places\n        .filter(p => (p.rating || 0) >= 4.0 && (p.user_ratings_total || 0) >= 100)\n        .slice(0, 5);\n    }\n\n    // Return the selected POIs in ranked order\n    const rankedPOIs = result.selected_indices\n      .filter((idx: number) => idx >= 0 && idx < places.length)\n      .map((idx: number) => places[idx])\n      .slice(0, 5);\n\n    return rankedPOIs.length > 0 ? rankedPOIs : places.slice(0, 5);\n\n  } catch (error) {\n    console.error('LLM ranking error:', error);\n    // Fallback to simple quality-based filtering\n    return places\n      .filter(p => (p.rating || 0) >= 4.0 && (p.user_ratings_total || 0) >= 100)\n      .slice(0, 5);\n  }\n}\n\n// Calculate distance between two coordinates (rough approximation)\nexport function calculateDistance(\n  lat1: number, \n  lon1: number, \n  lat2: number, \n  lon2: number\n): number {\n  const R = 6371; // Earth's radius in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}","size_bytes":3762},"server/services/placesEnrichment.ts":{"content":"import { cityService } from './cityService';\nimport type { InsertCity } from '@shared/schema';\n\n// Google Places API integration for city enrichment\nexport class PlacesEnrichmentService {\n  private apiKey: string;\n  private baseUrl = 'https://maps.googleapis.com/maps/api/place';\n\n  constructor() {\n    this.apiKey = process.env.GOOGLE_PLACES_API_KEY || '';\n    if (!this.apiKey) {\n      console.warn('GOOGLE_PLACES_API_KEY not set - Places enrichment will be limited');\n    }\n  }\n\n  // Get place details from Google Places API\n  async getPlaceDetails(placeId: string): Promise<any> {\n    if (!this.apiKey) {\n      throw new Error('Google Places API key not configured');\n    }\n\n    // Check cache first\n    const cacheKey = `place_details:${placeId}`;\n    const cached = await cityService.getCachedResponse(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const url = `${this.baseUrl}/details/json`;\n      const params = new URLSearchParams({\n        place_id: placeId,\n        fields: 'name,formatted_address,geometry,types,photos,address_components,utc_offset_minutes',\n        key: this.apiKey\n      });\n\n      const response = await fetch(`${url}?${params}`);\n      const data = await response.json();\n\n      if (data.status === 'OK' && data.result) {\n        // Cache the response for 24 hours\n        await cityService.cacheResponse(cacheKey, data.result, 86400);\n        return data.result;\n      } else {\n        console.error('Place details error:', data.status);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching place details:', error);\n      return null;\n    }\n  }\n\n  // Autocomplete for city search\n  async autocompleteCities(input: string, countryCode?: string): Promise<any[]> {\n    if (!this.apiKey) {\n      // Fallback to database search if no API key\n      return await cityService.searchCities(input, countryCode);\n    }\n\n    // Check cache first\n    const cacheKey = `autocomplete:${input}:${countryCode || 'all'}`;\n    const cached = await cityService.getCachedResponse(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const url = `${this.baseUrl}/autocomplete/json`;\n      const params: any = {\n        input,\n        types: '(cities)',\n        key: this.apiKey\n      };\n\n      // Add country restriction if provided\n      if (countryCode) {\n        params.components = `country:${countryCode.toLowerCase()}`;\n      }\n\n      const response = await fetch(`${url}?${new URLSearchParams(params)}`);\n      const data = await response.json();\n\n      if (data.status === 'OK' && data.predictions) {\n        // Cache for 1 hour\n        await cityService.cacheResponse(cacheKey, data.predictions, 3600);\n        return data.predictions;\n      } else {\n        console.error('Autocomplete error:', data.status);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error in autocomplete:', error);\n      return [];\n    }\n  }\n\n  // Convert Google Place to our City format\n  async enrichCityFromPlace(placeId: string, isCurated: boolean = false): Promise<InsertCity | null> {\n    const details = await this.getPlaceDetails(placeId);\n    if (!details) {\n      return null;\n    }\n\n    // Extract country code and admin level from address components\n    let countryCode = '';\n    let countryName = '';\n    let adminLevel1 = '';\n\n    for (const component of details.address_components || []) {\n      if (component.types.includes('country')) {\n        countryCode = component.short_name;\n        countryName = component.long_name;\n      }\n      if (component.types.includes('administrative_area_level_1')) {\n        adminLevel1 = component.long_name;\n      }\n    }\n\n    if (!countryCode) {\n      console.error('Could not extract country code from place details');\n      return null;\n    }\n\n    const cityData: InsertCity = {\n      googlePlaceId: placeId,\n      cityName: details.name,\n      countryCode,\n      countryName,\n      adminLevel1,\n      latitude: details.geometry.location.lat.toString(),\n      longitude: details.geometry.location.lng.toString(),\n      isCurated,\n      metadata: {\n        formattedAddress: details.formatted_address,\n        types: details.types,\n        photoReferences: details.photos?.map((p: any) => p.photo_reference) || [],\n        timezone: details.utc_offset_minutes ? `UTC${details.utc_offset_minutes >= 0 ? '+' : ''}${Math.floor(details.utc_offset_minutes / 60)}` : undefined\n      },\n      lastValidated: new Date()\n    };\n\n    return cityData;\n  }\n\n  // Validate and enrich a city by name\n  async validateAndEnrichCity(cityName: string, countryCode?: string): Promise<InsertCity | null> {\n    // First, try autocomplete to get the place ID\n    const predictions = await this.autocompleteCities(cityName, countryCode);\n    \n    if (predictions.length > 0) {\n      // Use the first prediction (most relevant)\n      const placeId = predictions[0].place_id;\n      return await this.enrichCityFromPlace(placeId);\n    }\n\n    return null;\n  }\n\n  // Seed database with curated cities\n  async seedCuratedCities(): Promise<void> {\n    console.log('Seeding curated cities...');\n    \n    // Import curated cities from cityService\n    const { curatedCities } = await import('./cityService');\n    \n    for (const city of curatedCities) {\n      try {\n        // Try to get Google Place ID for each curated city\n        const enrichedCity = await this.validateAndEnrichCity(city.cityName, city.countryCode);\n        \n        if (enrichedCity) {\n          // Merge curated data with Google data\n          const finalCity: InsertCity = {\n            ...enrichedCity,\n            isCurated: true,\n            popularity: city.popularity || 0\n          };\n          \n          await cityService.upsertCity(finalCity);\n          console.log(`✓ Seeded ${city.cityName}, ${city.countryName}`);\n        } else {\n          console.warn(`✗ Could not enrich ${city.cityName}, ${city.countryName} - will add without Google Place ID`);\n          \n          // Add without Google Place ID as fallback\n          const fallbackCity: InsertCity = {\n            googlePlaceId: `manual_${city.countryCode}_${city.cityName.toLowerCase().replace(/\\s+/g, '_')}`,\n            cityName: city.cityName,\n            countryCode: city.countryCode,\n            countryName: city.countryName,\n            adminLevel1: city.adminLevel1 || '',\n            latitude: '0',\n            longitude: '0',\n            isCurated: true,\n            popularity: city.popularity || 0,\n            metadata: {}\n          };\n          \n          await cityService.upsertCity(fallbackCity);\n        }\n      } catch (error) {\n        console.error(`Error seeding ${city.cityName}:`, error);\n      }\n    }\n    \n    console.log('Curated cities seeding complete!');\n  }\n}\n\nexport const placesEnrichmentService = new PlacesEnrichmentService();","size_bytes":6832},"server/services/sessionTagProcessor.ts":{"content":"/**\n * Session-scoped tag processor for handling free-text preferences\n * These are NEVER persisted to the canonical database\n */\n\ninterface SessionTag {\n  raw: string;\n  normalized: string;\n  category: 'water' | 'food' | 'culture' | 'nature' | 'shopping' | 'nightlife' | 'generic';\n  confidence: number;\n  searchQuery: string;\n}\n\ninterface TagCandidate {\n  tagRaw: string;\n  tagNorm: string;\n  cityId?: number;\n  category: string;\n  count: number;\n  lastSeenAt: Date;\n  samplePois?: string[];\n}\n\n// Safety filters - block inappropriate or nonsensical inputs\nconst BLOCKED_PATTERNS = [\n  /\\b(xxx|porn|adult|nsfw)\\b/i,\n  /\\b(kill|murder|violence|bomb)\\b/i,\n  /\\b(drug|weed|cocaine|heroin)\\b/i,\n  /^[^a-zA-Z0-9\\s]+$/,  // Only special characters\n  /^.{1,2}$/,  // Too short (1-2 chars)\n  /^.{100,}$/,  // Too long (>100 chars)\n];\n\n// Normalized category mappings for free-text\nconst CATEGORY_MAPPINGS: Record<string, { category: SessionTag['category'], searchTerms: string[] }> = {\n  // Water activities\n  'water': { category: 'water', searchTerms: ['water parks', 'beaches', 'swimming pools', 'aquariums'] },\n  'swim': { category: 'water', searchTerms: ['swimming pools', 'beaches', 'water sports'] },\n  'beach': { category: 'water', searchTerms: ['beaches', 'seaside', 'coastal areas'] },\n  'onsen': { category: 'water', searchTerms: ['hot springs', 'onsen', 'spa', 'thermal baths'] },\n  'hot spring': { category: 'water', searchTerms: ['hot springs', 'onsen', 'thermal baths'] },\n  'aquarium': { category: 'water', searchTerms: ['aquariums', 'marine life', 'sea world'] },\n  \n  // Food\n  'food': { category: 'food', searchTerms: ['restaurants', 'local cuisine', 'food markets'] },\n  'eat': { category: 'food', searchTerms: ['restaurants', 'cafes', 'dining'] },\n  'restaurant': { category: 'food', searchTerms: ['restaurants', 'dining', 'eateries'] },\n  'cafe': { category: 'food', searchTerms: ['cafes', 'coffee shops', 'bakeries'] },\n  'street food': { category: 'food', searchTerms: ['street food', 'food markets', 'food stalls'] },\n  'local food': { category: 'food', searchTerms: ['local cuisine', 'traditional restaurants', 'authentic food'] },\n  \n  // Culture\n  'temple': { category: 'culture', searchTerms: ['temples', 'shrines', 'religious sites'] },\n  'shrine': { category: 'culture', searchTerms: ['shrines', 'temples', 'spiritual sites'] },\n  'museum': { category: 'culture', searchTerms: ['museums', 'galleries', 'exhibitions'] },\n  'culture': { category: 'culture', searchTerms: ['cultural sites', 'heritage', 'historical places'] },\n  'history': { category: 'culture', searchTerms: ['historical sites', 'monuments', 'heritage'] },\n  'art': { category: 'culture', searchTerms: ['art galleries', 'museums', 'exhibitions'] },\n  \n  // Nature\n  'nature': { category: 'nature', searchTerms: ['parks', 'gardens', 'nature reserves'] },\n  'park': { category: 'nature', searchTerms: ['parks', 'gardens', 'green spaces'] },\n  'garden': { category: 'nature', searchTerms: ['gardens', 'botanical gardens', 'parks'] },\n  'mountain': { category: 'nature', searchTerms: ['mountains', 'hiking trails', 'viewpoints'] },\n  'hike': { category: 'nature', searchTerms: ['hiking trails', 'nature walks', 'trekking'] },\n  \n  // Shopping\n  'shop': { category: 'shopping', searchTerms: ['shopping malls', 'markets', 'stores'] },\n  'shopping': { category: 'shopping', searchTerms: ['shopping centers', 'retail', 'boutiques'] },\n  'market': { category: 'shopping', searchTerms: ['markets', 'bazaars', 'shopping streets'] },\n  'mall': { category: 'shopping', searchTerms: ['shopping malls', 'department stores'] },\n  \n  // Nightlife\n  'night': { category: 'nightlife', searchTerms: ['nightlife', 'bars', 'evening entertainment'] },\n  'bar': { category: 'nightlife', searchTerms: ['bars', 'pubs', 'lounges'] },\n  'club': { category: 'nightlife', searchTerms: ['nightclubs', 'dance clubs', 'party venues'] },\n  'party': { category: 'nightlife', searchTerms: ['party venues', 'nightclubs', 'entertainment'] },\n};\n\n/**\n * Process free-text into session-scoped tags\n * These are NEVER saved to the database\n */\nexport function processSessionTags(freeText: string): SessionTag[] {\n  const sessionTags: SessionTag[] = [];\n  \n  // Safety check - block inappropriate content\n  if (BLOCKED_PATTERNS.some(pattern => pattern.test(freeText))) {\n    console.warn('Blocked inappropriate input:', freeText);\n    return [];\n  }\n  \n  const lowerText = freeText.toLowerCase().trim();\n  const words = lowerText.split(/\\s+/);\n  \n  // Check for exact matches first\n  for (const [key, mapping] of Object.entries(CATEGORY_MAPPINGS)) {\n    if (lowerText.includes(key)) {\n      sessionTags.push({\n        raw: freeText,\n        normalized: key,\n        category: mapping.category,\n        confidence: 0.9,\n        searchQuery: mapping.searchTerms.join(' OR ')\n      });\n    }\n  }\n  \n  // If no exact matches, try word-by-word\n  if (sessionTags.length === 0) {\n    for (const word of words) {\n      if (CATEGORY_MAPPINGS[word]) {\n        const mapping = CATEGORY_MAPPINGS[word];\n        sessionTags.push({\n          raw: word,\n          normalized: word,\n          category: mapping.category,\n          confidence: 0.7,\n          searchQuery: mapping.searchTerms.join(' OR ')\n        });\n      }\n    }\n  }\n  \n  // If still no matches, create a generic tag (but with low confidence)\n  if (sessionTags.length === 0 && lowerText.length > 2) {\n    sessionTags.push({\n      raw: freeText,\n      normalized: lowerText,\n      category: 'generic',\n      confidence: 0.3,\n      searchQuery: lowerText\n    });\n  }\n  \n  return sessionTags;\n}\n\n/**\n * Log tag candidates for potential review (quarantined table)\n * This would be saved to a separate table with TTL, not the main tags table\n */\nexport function logTagCandidate(candidate: TagCandidate): void {\n  // In production, this would insert into user_tag_candidates table with 30-day TTL\n  console.log('Tag candidate logged for review:', {\n    ...candidate,\n    ttl: '30 days',\n    status: 'quarantined'\n  });\n  \n  // NOTE: We do NOT save this to the canonical tags table\n  // Only after human review would these be promoted\n}\n\n/**\n * Convert session tags to search preferences\n * These are used ONLY for the current session's POI selection\n */\nexport function sessionTagsToPreferences(sessionTags: SessionTag[]): string[] {\n  // Only use high-confidence tags for search\n  return sessionTags\n    .filter(tag => tag.confidence >= 0.5)\n    .map(tag => tag.searchQuery);\n}\n\n/**\n * Check if a preference needs clarification\n */\nexport function needsClarification(freeText: string): boolean {\n  const lowerText = freeText.toLowerCase().trim();\n  \n  // Too vague\n  if (lowerText.length < 3) return true;\n  \n  // Contains question marks or unclear intent\n  if (lowerText.includes('?')) return true;\n  \n  // No recognizable keywords at all\n  const sessionTags = processSessionTags(freeText);\n  if (sessionTags.length === 0 || sessionTags.every(t => t.confidence < 0.3)) {\n    return true;\n  }\n  \n  return false;\n}","size_bytes":7006},"server/services/tagNormalizationService.ts":{"content":"import { CityTag, TagAlias, InsertCityTag, InsertTagAlias } from '@shared/schema';\nimport { storage } from '../storage';\n\ninterface TagMatch {\n  tag: CityTag;\n  confidence: number;\n  matchType: 'exact' | 'alias' | 'semantic' | 'fuzzy';\n}\n\ninterface NormalizedTag {\n  originalInput: string;\n  normalized: string;\n  matched?: TagMatch;\n  isNew: boolean;\n  validatedPlaceId?: string;\n}\n\nexport class TagNormalizationService {\n  // Normalize text for matching\n  private normalizeText(text: string): string {\n    return text\n      .toLowerCase()\n      .trim()\n      .replace(/[\\s-_]+/g, '') // Remove spaces, hyphens, underscores\n      .replace(/[^\\w\\u3040-\\u309f\\u30a0-\\u30ff\\u4e00-\\u9faf\\u3400-\\u4dbf]/g, ''); // Keep alphanumeric + Japanese\n  }\n\n  // Calculate string similarity (Levenshtein distance)\n  private calculateSimilarity(str1: string, str2: string): number {\n    const longer = str1.length > str2.length ? str1 : str2;\n    const shorter = str1.length > str2.length ? str2 : str1;\n    \n    if (longer.length === 0) return 1.0;\n    \n    const editDistance = this.levenshteinDistance(longer, shorter);\n    return (longer.length - editDistance) / longer.length;\n  }\n\n  private levenshteinDistance(str1: string, str2: string): number {\n    const matrix: number[][] = [];\n    \n    for (let i = 0; i <= str2.length; i++) {\n      matrix[i] = [i];\n    }\n    \n    for (let j = 0; j <= str1.length; j++) {\n      matrix[0][j] = j;\n    }\n    \n    for (let i = 1; i <= str2.length; i++) {\n      for (let j = 1; j <= str1.length; j++) {\n        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n    \n    return matrix[str2.length][str1.length];\n  }\n\n  // Common Japanese romanization variations\n  private getJapaneseVariations(text: string): string[] {\n    const variations = [text];\n    \n    // Common romanization differences\n    const replacements = [\n      { from: 'ou', to: 'o' },\n      { from: 'uu', to: 'u' },\n      { from: 'づ', to: 'zu' },\n      { from: 'ぢ', to: 'ji' },\n      { from: 'tsu', to: 'tu' },\n      { from: 'chi', to: 'ti' },\n      { from: 'shi', to: 'si' }\n    ];\n    \n    replacements.forEach(({ from, to }) => {\n      if (text.includes(from)) {\n        variations.push(text.replace(new RegExp(from, 'g'), to));\n      }\n      if (text.includes(to)) {\n        variations.push(text.replace(new RegExp(to, 'g'), from));\n      }\n    });\n    \n    return [...new Set(variations)];\n  }\n\n  // Match user input against existing tags\n  async matchTags(\n    userInput: string,\n    cityId: number,\n    threshold: number = 0.75\n  ): Promise<NormalizedTag> {\n    const normalized = this.normalizeText(userInput);\n    const variations = this.getJapaneseVariations(normalized);\n    \n    // Get city tags and aliases\n    const cityTags = await storage.getCityTags(cityId);\n    const allAliases = await storage.getTagAliasesByCityId(cityId);\n    \n    let bestMatch: TagMatch | undefined;\n    let bestScore = 0;\n    \n    // Check each tag\n    for (const tag of cityTags) {\n      const tagNormalized = this.normalizeText(tag.label);\n      \n      // Check exact match\n      if (variations.includes(tagNormalized)) {\n        return {\n          originalInput: userInput,\n          normalized,\n          matched: {\n            tag,\n            confidence: 1.0,\n            matchType: 'exact'\n          },\n          isNew: false\n        };\n      }\n      \n      // Check fuzzy match\n      for (const variant of variations) {\n        const similarity = this.calculateSimilarity(variant, tagNormalized);\n        if (similarity > bestScore) {\n          bestScore = similarity;\n          bestMatch = {\n            tag,\n            confidence: similarity,\n            matchType: 'fuzzy'\n          };\n        }\n      }\n      \n      // Check aliases\n      const tagAliases = allAliases.filter(a => a.tagId === tag.id);\n      for (const alias of tagAliases) {\n        const aliasNormalized = this.normalizeText(alias.alias);\n        \n        if (variations.includes(aliasNormalized)) {\n          return {\n            originalInput: userInput,\n            normalized,\n            matched: {\n              tag,\n              confidence: Number(alias.confidence || 1.0),\n              matchType: 'alias'\n            },\n            isNew: false\n          };\n        }\n        \n        // Fuzzy match on aliases\n        for (const variant of variations) {\n          const similarity = this.calculateSimilarity(variant, aliasNormalized);\n          const weightedScore = similarity * Number(alias.confidence || 1.0);\n          if (weightedScore > bestScore) {\n            bestScore = weightedScore;\n            bestMatch = {\n              tag,\n              confidence: weightedScore,\n              matchType: 'alias'\n            };\n          }\n        }\n      }\n    }\n    \n    // Return best match if above threshold\n    if (bestMatch && bestScore >= threshold) {\n      return {\n        originalInput: userInput,\n        normalized,\n        matched: bestMatch,\n        isNew: false\n      };\n    }\n    \n    // No match found - this is a new tag\n    return {\n      originalInput: userInput,\n      normalized,\n      isNew: true\n    };\n  }\n\n  // Validate a new tag with Google Places API\n  async validateWithPlaces(\n    tagText: string,\n    cityName: string,\n    countryCode: string,\n    googleApiKey: string\n  ): Promise<{ valid: boolean; placeId?: string; details?: any }> {\n    try {\n      // Search for the place within the city\n      const searchQuery = `${tagText} in ${cityName}, ${countryCode}`;\n      const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(searchQuery)}&key=${googleApiKey}`;\n      \n      const response = await fetch(searchUrl);\n      const data = await response.json();\n      \n      if (data.status === 'OK' && data.results && data.results.length > 0) {\n        const place = data.results[0];\n        \n        // Check if the place is actually in the specified city\n        const addressComponents = place.address_components || [];\n        const cityMatch = addressComponents.some((comp: any) => \n          comp.types.includes('locality') && \n          this.normalizeText(comp.long_name) === this.normalizeText(cityName)\n        );\n        \n        if (cityMatch || place.vicinity?.toLowerCase().includes(cityName.toLowerCase())) {\n          return {\n            valid: true,\n            placeId: place.place_id,\n            details: {\n              name: place.name,\n              rating: place.rating,\n              userRatingsTotal: place.user_ratings_total,\n              types: place.types,\n              photoReference: place.photos?.[0]?.photo_reference\n            }\n          };\n        }\n      }\n      \n      return { valid: false };\n    } catch (error) {\n      console.error('Error validating with Places API:', error);\n      return { valid: false };\n    }\n  }\n\n  // Create a new tag from user input\n  async createUserTag(\n    tagText: string,\n    cityId: number,\n    placeId?: string,\n    metadata?: any\n  ): Promise<CityTag> {\n    const normalized = this.normalizeText(tagText);\n    \n    const newTag: InsertCityTag = {\n      cityId,\n      label: tagText,\n      normalizedLabel: normalized,\n      source: 'user_add',\n      score: '0.50', // Start with lower score for user-added tags\n      placeIds: placeId ? [placeId] : [],\n      metadata: metadata || {},\n      usageCount: 1,\n      isActive: true\n    };\n    \n    return await storage.createCityTag(newTag);\n  }\n\n  // Process multiple user inputs\n  async processUserTags(\n    inputs: string[],\n    cityId: number,\n    cityName: string,\n    countryCode: string,\n    googleApiKey?: string\n  ): Promise<{ matched: CityTag[]; new: string[]; invalid: string[] }> {\n    const matched: CityTag[] = [];\n    const newTags: string[] = [];\n    const invalid: string[] = [];\n    \n    for (const input of inputs) {\n      const result = await this.matchTags(input, cityId);\n      \n      if (result.matched) {\n        matched.push(result.matched.tag);\n        \n        // Increment usage count\n        await storage.incrementTagUsage(result.matched.tag.id);\n      } else if (result.isNew) {\n        // Validate with Places API if available\n        if (googleApiKey) {\n          const validation = await this.validateWithPlaces(\n            input,\n            cityName,\n            countryCode,\n            googleApiKey\n          );\n          \n          if (validation.valid) {\n            // Create new tag\n            const newTag = await this.createUserTag(\n              input,\n              cityId,\n              validation.placeId,\n              validation.details\n            );\n            matched.push(newTag);\n          } else {\n            // Still allow custom tags without Places validation\n            newTags.push(input);\n          }\n        } else {\n          newTags.push(input);\n        }\n      }\n    }\n    \n    return { matched, new: newTags, invalid };\n  }\n\n  // Add common aliases for a tag\n  async addCommonAliases(tagId: number, tagLabel: string): Promise<void> {\n    const aliases: InsertTagAlias[] = [];\n    \n    // Common abbreviations\n    if (tagLabel.toLowerCase().includes('disney')) {\n      aliases.push({\n        tagId,\n        alias: 'TDL',\n        normalizedAlias: this.normalizeText('TDL'),\n        language: 'en',\n        aliasType: 'abbreviation',\n        confidence: '0.90'\n      });\n    }\n    \n    if (tagLabel.toLowerCase().includes('universal studios')) {\n      aliases.push({\n        tagId,\n        alias: 'USJ',\n        normalizedAlias: this.normalizeText('USJ'),\n        language: 'en',\n        aliasType: 'abbreviation',\n        confidence: '0.90'\n      });\n    }\n    \n    // Japanese translations for Tokyo attractions\n    const japaneseTranslations: Record<string, string> = {\n      'Tokyo Tower': '東京タワー',\n      'Senso-ji Temple': '浅草寺',\n      'Tsukiji Market': '築地市場',\n      'Akihabara': '秋葉原',\n      'Shibuya Crossing': '渋谷スクランブル交差点',\n      'TeamLab Planets': 'チームラボプラネッツ'\n    };\n    \n    if (japaneseTranslations[tagLabel]) {\n      aliases.push({\n        tagId,\n        alias: japaneseTranslations[tagLabel],\n        normalizedAlias: this.normalizeText(japaneseTranslations[tagLabel]),\n        language: 'ja',\n        aliasType: 'translation',\n        confidence: '1.00'\n      });\n    }\n    \n    // Common typos and variations\n    const commonTypos: Record<string, string[]> = {\n      'Akihabara': ['Akiba', 'Akihabra', 'Akhihabara'],\n      'TeamLab': ['Team Lab', 'Teamlab', 'Team-Lab'],\n      'Senso-ji': ['Sensoji', 'Senso ji', 'Sensouji'],\n      'Fushimi Inari': ['Fushimi-Inari', 'Fushimi Inari Shrine', 'Inari Shrine']\n    };\n    \n    if (commonTypos[tagLabel]) {\n      for (const typo of commonTypos[tagLabel]) {\n        aliases.push({\n          tagId,\n          alias: typo,\n          normalizedAlias: this.normalizeText(typo),\n          language: 'en',\n          aliasType: typo.includes(' ') ? 'synonym' : 'typo',\n          confidence: '0.85'\n        });\n      }\n    }\n    \n    // Save all aliases\n    for (const alias of aliases) {\n      await storage.createTagAlias(alias);\n    }\n  }\n}\n\nexport const tagNormalizationService = new TagNormalizationService();","size_bytes":11431},"server/utils/safetyFilters.ts":{"content":"/**\n * Safety filters and validation for user inputs\n * Prevents inappropriate content and database pollution\n */\n\n// Content that should never be processed or saved\nconst INAPPROPRIATE_PATTERNS = [\n  // Explicit content\n  /\\b(xxx|porn|adult|nsfw|sex|nude|naked)\\b/i,\n  \n  // Violence\n  /\\b(kill|murder|violence|bomb|terrorist|weapon|gun)\\b/i,\n  \n  // Illegal substances\n  /\\b(drug|weed|cocaine|heroin|meth|cannabis)\\b/i,\n  \n  // Hate speech\n  /\\b(hate|racist|nazi|supremacist)\\b/i,\n  \n  // Personal information patterns\n  /\\b\\d{3}-?\\d{2}-?\\d{4}\\b/, // SSN pattern\n  /\\b\\d{16}\\b/, // Credit card pattern\n  /\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b/i, // Email\n  /\\b\\d{10,}\\b/, // Phone numbers\n];\n\n// Suspicious patterns that might indicate attempts to exploit the system\nconst SUSPICIOUS_PATTERNS = [\n  /\\bscript\\b.*\\balert\\b/i, // XSS attempts\n  /\\bselect\\b.*\\bfrom\\b/i, // SQL injection\n  /\\bdrop\\b.*\\btable\\b/i, // SQL injection\n  /\\b<.*>\\b/, // HTML injection\n  /\\b\\$\\{.*\\}\\b/, // Template injection\n  /\\b\\.\\.\\//, // Path traversal\n];\n\n/**\n * Check if input contains inappropriate content\n */\nexport function containsInappropriateContent(input: string): boolean {\n  return INAPPROPRIATE_PATTERNS.some(pattern => pattern.test(input));\n}\n\n/**\n * Check if input contains suspicious patterns\n */\nexport function containsSuspiciousPatterns(input: string): boolean {\n  return SUSPICIOUS_PATTERNS.some(pattern => pattern.test(input));\n}\n\n/**\n * Sanitize user input for safe processing\n */\nexport function sanitizeInput(input: string): string {\n  // Remove any HTML/script tags\n  let sanitized = input.replace(/<[^>]*>/g, '');\n  \n  // Remove SQL-like patterns\n  sanitized = sanitized.replace(/\\b(drop|delete|truncate|alter|create)\\s+(table|database)/gi, '');\n  \n  // Remove excessive whitespace\n  sanitized = sanitized.replace(/\\s+/g, ' ').trim();\n  \n  // Limit length\n  if (sanitized.length > 500) {\n    sanitized = sanitized.substring(0, 500);\n  }\n  \n  return sanitized;\n}\n\n/**\n * Validate if input is appropriate for processing\n */\nexport function isValidUserInput(input: string): { valid: boolean; reason?: string } {\n  if (!input || input.trim().length === 0) {\n    return { valid: false, reason: 'Empty input' };\n  }\n  \n  if (containsInappropriateContent(input)) {\n    return { valid: false, reason: 'Inappropriate content detected' };\n  }\n  \n  if (containsSuspiciousPatterns(input)) {\n    return { valid: false, reason: 'Suspicious patterns detected' };\n  }\n  \n  // Check for nonsensical input (only special characters, random letters, etc.)\n  if (!/[a-zA-Z]{2,}/.test(input)) {\n    return { valid: false, reason: 'Input must contain meaningful text' };\n  }\n  \n  // Check for excessive repetition\n  const words = input.toLowerCase().split(/\\s+/);\n  const uniqueWords = new Set(words);\n  if (words.length > 5 && uniqueWords.size < words.length / 3) {\n    return { valid: false, reason: 'Input contains excessive repetition' };\n  }\n  \n  return { valid: true };\n}\n\n/**\n * Filter out inappropriate POIs from search results\n */\nexport function filterPOIs(pois: any[]): any[] {\n  return pois.filter(poi => {\n    // Filter out inappropriate venue types\n    const inappropriateTypes = [\n      'adult_entertainment',\n      'liquor_store',\n      'casino',\n      'night_club'\n    ];\n    \n    if (poi.types && poi.types.some((t: string) => inappropriateTypes.includes(t))) {\n      return false;\n    }\n    \n    // Filter out venues with inappropriate names\n    if (poi.name && containsInappropriateContent(poi.name)) {\n      return false;\n    }\n    \n    return true;\n  });\n}\n\n/**\n * Rate limit check (would be implemented with Redis in production)\n */\nexport function checkRateLimit(userId: string, action: string): boolean {\n  // In production, this would check against a Redis store\n  // For now, always allow\n  return true;\n}","size_bytes":3820},"client/src/components/chat/EnhancedTagSelector.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { Check, Plus, X, Sparkles, MapPin, Search } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EnhancedTag {\n  id?: number;\n  label: string;\n  category?: string;\n  score?: string;\n  usageCount?: number;\n}\n\ninterface EnhancedTagSelectorProps {\n  cityName: string;\n  countryCode: string;\n  onTagsSelected: (tags: string[]) => void;\n  onSkip?: () => void;\n}\n\nexport function EnhancedTagSelector({ cityName, countryCode, onTagsSelected, onSkip }: EnhancedTagSelectorProps) {\n  const [availableTags, setAvailableTags] = useState<EnhancedTag[]>([]);\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [customInput, setCustomInput] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<{ label: string; confidence: number }[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSearching, setIsSearching] = useState(false);\n  const [cityId, setCityId] = useState<number | null>(null);\n  const [isDefault, setIsDefault] = useState(false);\n  const searchTimeout = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    loadCityTags();\n  }, [cityName, countryCode]);\n\n  // Debounced search as user types\n  useEffect(() => {\n    if (customInput.length < 2) {\n      setSearchResults([]);\n      return;\n    }\n\n    clearTimeout(searchTimeout.current);\n    searchTimeout.current = setTimeout(() => {\n      searchTags(customInput);\n    }, 300);\n\n    return () => clearTimeout(searchTimeout.current);\n  }, [customInput]);\n\n  const loadCityTags = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/cities/tags/${encodeURIComponent(cityName)}/${countryCode}`);\n      const data = await response.json();\n      \n      if (data.enhanced) {\n        // Use enhanced tags with categories and scores\n        setAvailableTags(data.enhanced);\n        setCityId(data.cityId);\n      } else if (data.tags) {\n        // Fallback to simple tag strings\n        setAvailableTags(data.tags.map((t: string | EnhancedTag) => \n          typeof t === 'string' ? { label: t } : t\n        ));\n      }\n      \n      setIsDefault(data.isDefault || false);\n    } catch (error) {\n      console.error(\"Failed to load city tags:\", error);\n      // Fallback to default tags\n      setAvailableTags([\n        { label: 'Must-see Highlights', category: 'attraction' },\n        { label: 'Local Food & Culture', category: 'food' },\n        { label: 'Shopping Districts', category: 'district' },\n        { label: 'Nature & Parks', category: 'experience' },\n        { label: 'Museums & Art', category: 'attraction' },\n        { label: 'Nightlife', category: 'experience' },\n        { label: 'Family Activities', category: 'experience' }\n      ]);\n      setIsDefault(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const searchTags = async (query: string) => {\n    if (!cityId) return;\n    \n    try {\n      setIsSearching(true);\n      const response = await fetch(`/api/cities/tags/search?q=${encodeURIComponent(query)}&cityId=${cityId}`);\n      const data = await response.json();\n      \n      if (data.found && data.tag) {\n        setSearchResults([{\n          label: data.tag.label,\n          confidence: data.tag.confidence\n        }]);\n      } else {\n        setSearchResults([]);\n      }\n    } catch (error) {\n      console.error(\"Search failed:\", error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const normalizeUserTags = async (tags: string[]) => {\n    if (!cityId) return tags;\n    \n    try {\n      const response = await apiRequest(\"/api/cities/tags/normalize\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          inputs: tags,\n          cityId,\n          cityName,\n          countryCode\n        })\n      });\n      \n      // Combine matched and custom tags\n      return [...(response.matched || []), ...(response.custom || [])];\n    } catch (error) {\n      console.error(\"Normalization failed:\", error);\n      return tags;\n    }\n  };\n\n  const toggleTag = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  const addCustomTag = async () => {\n    if (!customInput.trim()) return;\n    \n    const trimmed = customInput.trim();\n    \n    // Check if already selected\n    if (selectedTags.includes(trimmed)) {\n      setCustomInput(\"\");\n      return;\n    }\n    \n    // Add the custom tag\n    setSelectedTags(prev => [...prev, trimmed]);\n    setCustomInput(\"\");\n    setSearchResults([]);\n  };\n\n  const selectSearchResult = (label: string) => {\n    if (!selectedTags.includes(label)) {\n      setSelectedTags(prev => [...prev, label]);\n    }\n    setCustomInput(\"\");\n    setSearchResults([]);\n  };\n\n  const removeTag = (tag: string) => {\n    setSelectedTags(prev => prev.filter(t => t !== tag));\n  };\n\n  const handleConfirm = async () => {\n    if (selectedTags.length > 0) {\n      // Normalize tags before sending\n      const normalizedTags = await normalizeUserTags(selectedTags);\n      onTagsSelected(normalizedTags);\n    }\n  };\n\n  // Group tags by category\n  const groupedTags = availableTags.reduce((acc, tag) => {\n    const category = tag.category || 'other';\n    if (!acc[category]) acc[category] = [];\n    acc[category].push(tag);\n    return acc;\n  }, {} as Record<string, EnhancedTag[]>);\n\n  const categoryIcons = {\n    attraction: <MapPin className=\"w-3 h-3\" />,\n    district: <MapPin className=\"w-3 h-3\" />,\n    experience: <Sparkles className=\"w-3 h-3\" />,\n    food: <span className=\"text-xs\">🍜</span>,\n    other: <span className=\"text-xs\">•</span>\n  };\n\n  const categoryColors = {\n    attraction: \"bg-blue-100 hover:bg-blue-200 text-blue-800\",\n    district: \"bg-purple-100 hover:bg-purple-200 text-purple-800\",\n    experience: \"bg-green-100 hover:bg-green-200 text-green-800\",\n    food: \"bg-orange-100 hover:bg-orange-200 text-orange-800\",\n    other: \"bg-gray-100 hover:bg-gray-200 text-gray-800\"\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-6 bg-white/95 backdrop-blur animate-fade-in\">\n        <div className=\"animate-pulse space-y-3\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          <div className=\"flex flex-wrap gap-2\">\n            {[1, 2, 3, 4, 5].map(i => (\n              <div key={i} className=\"h-8 bg-gray-200 rounded-full w-24\"></div>\n            ))}\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-6 bg-white/95 backdrop-blur animate-fade-in\">\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">\n            {isDefault \n              ? `What interests you most?`\n              : `Popular in ${cityName}`\n            }\n          </h3>\n          {selectedTags.length > 0 && (\n            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700\">\n              {selectedTags.length} selected\n            </Badge>\n          )}\n        </div>\n\n        {/* Selected tags */}\n        {selectedTags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 p-3 bg-purple-50 rounded-lg\">\n            {selectedTags.map(tag => (\n              <Badge\n                key={tag}\n                className=\"pl-3 pr-1 py-1 bg-purple-600 text-white hover:bg-purple-700\"\n              >\n                {tag}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"ml-1 h-auto p-0.5 hover:bg-purple-500\"\n                  onClick={() => removeTag(tag)}\n                >\n                  <X className=\"w-3 h-3\" />\n                </Button>\n              </Badge>\n            ))}\n          </div>\n        )}\n\n        {/* Available tags grouped by category */}\n        <div className=\"space-y-3\">\n          {Object.entries(groupedTags).map(([category, tags]) => (\n            <div key={category}>\n              {!isDefault && (\n                <p className=\"text-xs text-gray-500 mb-1 capitalize\">{category}</p>\n              )}\n              <div className=\"flex flex-wrap gap-2\">\n                {tags.map(tag => (\n                  <Button\n                    key={tag.label}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className={`${\n                      selectedTags.includes(tag.label)\n                        ? 'bg-purple-100 border-purple-400 text-purple-700'\n                        : categoryColors[category as keyof typeof categoryColors] || categoryColors.other\n                    } transition-all`}\n                    onClick={() => toggleTag(tag.label)}\n                  >\n                    {categoryIcons[category as keyof typeof categoryIcons] || categoryIcons.other}\n                    <span className=\"ml-1\">{tag.label}</span>\n                    {selectedTags.includes(tag.label) && (\n                      <Check className=\"w-3 h-3 ml-1\" />\n                    )}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Custom input with search */}\n        <div className=\"space-y-2\">\n          <div className=\"flex gap-2\">\n            <div className=\"relative flex-1\">\n              <Input\n                placeholder={`Add your own (e.g., \"TeamLab\", \"築地\", \"Shinjuku nightlife\")`}\n                value={customInput}\n                onChange={(e) => setCustomInput(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && addCustomTag()}\n                className=\"pr-8\"\n              />\n              {isSearching && (\n                <Search className=\"absolute right-2 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400 animate-pulse\" />\n              )}\n            </div>\n            <Button\n              onClick={addCustomTag}\n              disabled={!customInput.trim()}\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n            >\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          \n          {/* Search results */}\n          {searchResults.length > 0 && (\n            <div className=\"bg-gray-50 rounded-lg p-2 space-y-1\">\n              <p className=\"text-xs text-gray-500 px-2\">Did you mean:</p>\n              {searchResults.map(result => (\n                <button\n                  key={result.label}\n                  className=\"w-full text-left px-2 py-1 rounded hover:bg-gray-100 text-sm flex items-center justify-between\"\n                  onClick={() => selectSearchResult(result.label)}\n                >\n                  <span>{result.label}</span>\n                  <span className=\"text-xs text-gray-400\">\n                    {Math.round(result.confidence * 100)}% match\n                  </span>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Action buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          <Button\n            onClick={handleConfirm}\n            disabled={selectedTags.length === 0}\n            className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white\"\n          >\n            Continue with {selectedTags.length || 'no'} {selectedTags.length === 1 ? 'preference' : 'preferences'}\n          </Button>\n          {onSkip && (\n            <Button\n              onClick={onSkip}\n              variant=\"outline\"\n              className=\"border-gray-300\"\n            >\n              Skip\n            </Button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":11762},"client/src/components/chat/TagSelector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { getCityTags } from \"@/lib/api\";\nimport { Check, Plus, X, Sparkles, MapPin } from \"lucide-react\";\n\ninterface TagSelectorProps {\n  cityName: string;\n  countryCode: string;\n  onTagsSelected: (tags: string[]) => void;\n  onSkip?: () => void;\n}\n\nexport function TagSelector({ cityName, countryCode, onTagsSelected, onSkip }: TagSelectorProps) {\n  const [availableTags, setAvailableTags] = useState<string[]>([]);\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [customTag, setCustomTag] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isDefault, setIsDefault] = useState(false);\n\n  useEffect(() => {\n    loadCityTags();\n  }, [cityName, countryCode]);\n\n  const loadCityTags = async () => {\n    try {\n      setIsLoading(true);\n      const { tags, isDefault: defaultTags } = await getCityTags(cityName, countryCode);\n      setAvailableTags(tags);\n      setIsDefault(defaultTags);\n    } catch (error) {\n      console.error(\"Failed to load city tags:\", error);\n      // Fallback to default tags\n      setAvailableTags([\n        'Must-see Highlights',\n        'Local Food & Culture',\n        'Shopping Districts',\n        'Nature & Parks',\n        'Museums & Art',\n        'Nightlife',\n        'Family Activities'\n      ]);\n      setIsDefault(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleTag = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  const addCustomTag = () => {\n    if (customTag.trim() && !selectedTags.includes(customTag.trim())) {\n      setSelectedTags(prev => [...prev, customTag.trim()]);\n      setCustomTag(\"\");\n    }\n  };\n\n  const removeTag = (tag: string) => {\n    setSelectedTags(prev => prev.filter(t => t !== tag));\n  };\n\n  const handleConfirm = () => {\n    if (selectedTags.length > 0) {\n      onTagsSelected(selectedTags);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      addCustomTag();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-4\">\n        <p className=\"text-brand-mute\">Loading attractions for {cityName}...</p>\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"bg-brand-card/50 border-brand-border p-4 space-y-4\">\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <MapPin className=\"w-4 h-4 text-brand-accent\" />\n          <h3 className=\"font-medium text-brand-text\">\n            {isDefault ? \"What interests you most?\" : `Popular in ${cityName}:`}\n          </h3>\n        </div>\n        \n        {/* Available Tags */}\n        <div className=\"flex flex-wrap gap-2\">\n          {availableTags.map((tag) => {\n            const isSelected = selectedTags.includes(tag);\n            return (\n              <Badge\n                key={tag}\n                variant={isSelected ? \"default\" : \"outline\"}\n                className={`cursor-pointer transition-all ${\n                  isSelected \n                    ? \"bg-brand-accent text-brand-bg border-brand-accent\" \n                    : \"bg-transparent hover:bg-brand-accent/10 hover:border-brand-accent\"\n                }`}\n                onClick={() => toggleTag(tag)}\n              >\n                {isSelected && <Check className=\"w-3 h-3 mr-1\" />}\n                {tag}\n              </Badge>\n            );\n          })}\n        </div>\n\n        {/* Selected Tags Display */}\n        {selectedTags.length > 0 && (\n          <div className=\"pt-3 border-t border-brand-border\">\n            <p className=\"text-xs text-brand-mute mb-2\">Selected ({selectedTags.length}):</p>\n            <div className=\"flex flex-wrap gap-2\">\n              {selectedTags.map((tag) => (\n                <Badge\n                  key={tag}\n                  variant=\"default\"\n                  className=\"bg-brand-primary text-white pl-2 pr-1\"\n                >\n                  {tag}\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"ml-1 h-auto p-0 hover:bg-transparent\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeTag(tag);\n                    }}\n                  >\n                    <X className=\"w-3 h-3\" />\n                  </Button>\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Custom Tag Input */}\n        <div className=\"pt-3 border-t border-brand-border\">\n          <p className=\"text-xs text-brand-mute mb-2\">Add your own preference:</p>\n          <div className=\"flex gap-2\">\n            <Input\n              type=\"text\"\n              value={customTag}\n              onChange={(e) => setCustomTag(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"e.g., TeamLab Planets, Vegan restaurants...\"\n              className=\"flex-1 bg-brand-bg/50 border-brand-border text-brand-text placeholder:text-brand-mute\"\n            />\n            <Button\n              size=\"sm\"\n              onClick={addCustomTag}\n              disabled={!customTag.trim()}\n              className=\"bg-brand-accent/20 text-brand-accent hover:bg-brand-accent/30\"\n            >\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-3\">\n          <Button\n            onClick={handleConfirm}\n            disabled={selectedTags.length === 0}\n            className=\"flex-1 bg-brand-accent text-brand-bg hover:bg-yellow-500 disabled:opacity-50\"\n          >\n            <Sparkles className=\"w-4 h-4 mr-2\" />\n            Generate Itinerary {selectedTags.length > 0 && `(${selectedTags.length})`}\n          </Button>\n          {onSkip && (\n            <Button\n              variant=\"outline\"\n              onClick={onSkip}\n              className=\"border-brand-border text-brand-mute hover:bg-brand-bg/50\"\n            >\n              Skip\n            </Button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":6389},"client/src/components/packages/CleanPackageCard.tsx":{"content":"import { TravelPackage } from \"@/types/travel\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Clock, DollarSign, Heart, Star } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface CleanPackageCardProps {\n  package: TravelPackage;\n  index: number;\n  onSelect: (pkg: TravelPackage) => void;\n  showHeart?: boolean;\n}\n\n// Generate beautiful gradient backgrounds for packages\nconst getPackageImage = (type: string, destination: string) => {\n  // Using gradient backgrounds as hero images\n  const gradients = {\n    classic: \"bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500\",\n    foodie: \"bg-gradient-to-br from-orange-400 via-red-500 to-pink-500\",\n    budget: \"bg-gradient-to-br from-green-400 via-teal-500 to-blue-500\",\n  };\n  \n  return gradients[type as keyof typeof gradients] || gradients.classic;\n};\n\nconst getRecommendedBadge = (index: number) => {\n  if (index === 0) return { text: \"Top Pick\", color: \"bg-yellow-500\" };\n  if (index === 1) return { text: \"Popular\", color: \"bg-gray-400\" };\n  if (index === 2) return { text: \"Best Value\", color: \"bg-orange-400\" };\n  return null;\n};\n\nexport function CleanPackageCard({ package: pkg, index, onSelect, showHeart = true }: CleanPackageCardProps) {\n  const [, setLocation] = useLocation();\n  const recommendedBadge = getRecommendedBadge(index);\n  const imageClass = getPackageImage(pkg.type, pkg.destination);\n  \n  // Extract key highlights as tags (max 4)\n  const highlightTags = pkg.highlights?.slice(0, 4) || [];\n  \n  // Format price (remove \"per person\" text if present)\n  const formatPrice = (price: string) => {\n    // Extract just the numeric value with currency symbol\n    const match = price.match(/\\$?[\\d,]+/);\n    return match ? match[0] : price.replace(/per person/i, '').trim();\n  };\n  \n  const handleViewItinerary = () => {\n    if (pkg.id) {\n      setLocation(`/itinerary/${pkg.id}`);\n    } else {\n      onSelect(pkg);\n    }\n  };\n  \n  return (\n    <Card className=\"overflow-hidden bg-white border-0 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer group\">\n      {/* Hero Image Section */}\n      <div className=\"relative h-64 overflow-hidden\">\n        <div className={`absolute inset-0 ${imageClass}`}>\n          {/* Overlay for better text readability */}\n          <div className=\"absolute inset-0 bg-black/20\"></div>\n        </div>\n        \n        {/* Badges */}\n        <div className=\"absolute top-4 left-4 flex items-center gap-2\">\n          {recommendedBadge && (\n            <Badge className={`${recommendedBadge.color} text-white border-0 px-3 py-1 text-xs font-medium`}>\n              {recommendedBadge.text}\n            </Badge>\n          )}\n        </div>\n        \n        {/* Rating */}\n        <div className=\"absolute top-4 right-4 bg-white/90 backdrop-blur rounded-full px-3 py-1.5 flex items-center gap-1\">\n          <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n          <span className=\"text-sm font-medium\">{index === 0 ? '4.9' : index === 1 ? '4.8' : '4.7'}</span>\n        </div>\n        \n        {/* Package Type Badge */}\n        <div className=\"absolute bottom-4 left-4\">\n          <Badge className=\"bg-white/90 backdrop-blur text-gray-800 border-0 px-3 py-1 text-xs font-medium capitalize\">\n            {pkg.type} Package\n          </Badge>\n        </div>\n      </div>\n      \n      {/* Content Section */}\n      <div className=\"p-6\">\n        {/* Title and Location */}\n        <div className=\"mb-4\">\n          <h3 className=\"text-xl font-bold text-gray-900 mb-2 line-clamp-1\">\n            {pkg.name}\n          </h3>\n          <div className=\"flex items-center text-gray-600 text-sm\">\n            <MapPin className=\"w-4 h-4 mr-1\" />\n            <span>{pkg.destination || pkg.route}</span>\n          </div>\n        </div>\n        \n        {/* Description */}\n        <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">\n          {pkg.description}\n        </p>\n        \n        {/* Price and Duration Row */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center text-2xl font-bold text-gray-900\">\n              <DollarSign className=\"w-5 h-5\" />\n              <span>{formatPrice(pkg.budget).replace(/[\\$NT]/g, '').trim()}</span>\n            </div>\n            <div className=\"flex items-center text-sm text-gray-600\">\n              <Clock className=\"w-4 h-4 mr-1\" />\n              <span>{pkg.days} days</span>\n            </div>\n          </div>\n          {showHeart && (\n            <button className=\"p-2 rounded-full hover:bg-gray-100 transition-colors\">\n              <Heart className=\"w-5 h-5 text-gray-400 hover:text-red-500\" />\n            </button>\n          )}\n        </div>\n        \n        {/* Must-See Highlights */}\n        <div className=\"mb-5\">\n          <p className=\"text-xs text-gray-600 mb-2\">Key Highlights:</p>\n          <div className=\"flex flex-wrap gap-1.5\">\n            {highlightTags.map((tag, idx) => (\n              <Badge \n                key={idx} \n                variant=\"secondary\"\n                className=\"bg-gray-100 text-gray-700 border-0 px-2 py-0.5 text-xs font-normal\"\n              >\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        </div>\n        \n        {/* Small metric tags */}\n        <div className=\"flex flex-wrap gap-2 mb-5\">\n          <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5 border-gray-200\">\n            {pkg.attractionCount} attractions\n          </Badge>\n          <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5 border-gray-200\">\n            {pkg.diningCount} dining\n          </Badge>\n          {pkg.accommodation && (\n            <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5 border-gray-200\">\n              Hotels included\n            </Badge>\n          )}\n        </div>\n        \n        {/* CTA Button */}\n        <Button\n          onClick={handleViewItinerary}\n          className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium py-2.5 rounded-lg hover:opacity-90 transition-opacity\"\n        >\n          View Full Itinerary\n        </Button>\n      </div>\n    </Card>\n  );\n}","size_bytes":6317},"client/src/components/ui/Chip.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface ChipProps {\n  children: React.ReactNode;\n  variant?: \"default\" | \"secondary\" | \"outline\" | \"muted\";\n  size?: \"sm\" | \"md\";\n  className?: string;\n}\n\nexport function Chip({ \n  children, \n  variant = \"default\", \n  size = \"sm\",\n  className \n}: ChipProps) {\n  const baseStyles = \"inline-flex items-center rounded-full font-medium transition-colors\";\n  \n  const sizeStyles = {\n    sm: \"text-xs px-2 py-0.5\",\n    md: \"text-sm px-3 py-1\"\n  };\n  \n  const variantStyles = {\n    default: \"bg-purple-100 text-purple-700 border-0\",\n    secondary: \"bg-gray-100 text-gray-700 border-0\",\n    outline: \"border border-gray-300 text-gray-600 bg-transparent\",\n    muted: \"bg-gray-50 text-gray-500 border border-gray-200\"\n  };\n  \n  return (\n    <span \n      className={cn(\n        baseStyles,\n        sizeStyles[size],\n        variantStyles[variant],\n        className\n      )}\n    >\n      {children}\n    </span>\n  );\n}","size_bytes":942},"client/src/components/ui/StarRating.tsx":{"content":"import { Star } from \"lucide-react\";\n\ninterface StarRatingProps {\n  rating: number;\n  maxRating?: number;\n  showScore?: boolean;\n  reviewCount?: number;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function StarRating({ \n  rating, \n  maxRating = 5, \n  showScore = true,\n  reviewCount,\n  size = \"sm\" \n}: StarRatingProps) {\n  const fullStars = Math.floor(rating);\n  const hasHalfStar = rating - fullStars >= 0.25 && rating - fullStars < 0.75;\n  const emptyStars = maxRating - fullStars - (hasHalfStar ? 1 : 0);\n  \n  const starSize = size === \"sm\" ? \"w-4 h-4\" : size === \"md\" ? \"w-5 h-5\" : \"w-6 h-6\";\n  const textSize = size === \"sm\" ? \"text-sm\" : size === \"md\" ? \"text-base\" : \"text-lg\";\n  \n  return (\n    <div className=\"flex items-center gap-1\">\n      <div className=\"flex items-center\">\n        {/* Full stars */}\n        {Array.from({ length: fullStars }).map((_, i) => (\n          <Star key={`full-${i}`} className={`${starSize} text-yellow-500 fill-current`} />\n        ))}\n        \n        {/* Half star */}\n        {hasHalfStar && (\n          <div className=\"relative\">\n            <Star className={`${starSize} text-gray-300`} />\n            <div className=\"absolute inset-0 overflow-hidden w-1/2\">\n              <Star className={`${starSize} text-yellow-500 fill-current`} />\n            </div>\n          </div>\n        )}\n        \n        {/* Empty stars */}\n        {Array.from({ length: Math.ceil(emptyStars) }).map((_, i) => (\n          <Star key={`empty-${i}`} className={`${starSize} text-gray-300`} />\n        ))}\n      </div>\n      \n      {/* Score and review count */}\n      {showScore && (\n        <div className=\"flex items-center gap-1 ml-1\">\n          <span className={`font-medium text-gray-700 ${textSize}`}>\n            {rating.toFixed(1)}/5\n          </span>\n          {reviewCount !== undefined && (\n            <span className={`${textSize}`} style={{ color: '#9CA3AF' }}>\n              ({reviewCount >= 1000 ? `${(reviewCount / 1000).toFixed(1)}k` : reviewCount.toLocaleString()} reviews)\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2085},"client/src/components/ui/star-rating.tsx":{"content":"import React from 'react';\nimport { Star, StarHalf } from 'lucide-react';\n\ninterface StarRatingProps {\n  rating: number;\n  maxRating?: number;\n  showNumber?: boolean;\n  reviewCount?: number;\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport function StarRating({ \n  rating, \n  maxRating = 5, \n  showNumber = true,\n  reviewCount,\n  size = 'md',\n  className = ''\n}: StarRatingProps) {\n  const fullStars = Math.floor(rating);\n  const hasHalfStar = rating % 1 >= 0.5;\n  const emptyStars = maxRating - fullStars - (hasHalfStar ? 1 : 0);\n\n  const sizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4',\n    lg: 'w-5 h-5'\n  };\n\n  const starSize = sizeClasses[size];\n  \n  // Size-dependent text sizes\n  const ratingTextSize = size === 'sm' ? 'text-sm' : size === 'md' ? 'text-base' : 'text-lg';\n  // Review count is always smaller\n  const reviewTextSize = size === 'sm' ? 'text-[10px]' : size === 'md' ? 'text-xs' : 'text-sm';\n  \n  const formatReviewCount = (count: number): string => {\n    if (count >= 1000000) {\n      return `${(count / 1000000).toFixed(1)}M`;\n    }\n    if (count >= 1000) {\n      return `${(count / 1000).toFixed(1)}k`;\n    }\n    return count.toLocaleString();\n  };\n\n  return (\n    <div className={`inline-flex items-center min-w-0 ${className}`}>\n      {/* Stars */}\n      <div className=\"flex items-center flex-shrink-0\">\n        {/* Full stars */}\n        {Array.from({ length: fullStars }).map((_, i) => (\n          <Star \n            key={`full-${i}`} \n            className={`${starSize} fill-yellow-500 text-yellow-500 flex-shrink-0`}\n          />\n        ))}\n        \n        {/* Half star */}\n        {hasHalfStar && (\n          <div className=\"relative flex-shrink-0\">\n            <Star className={`${starSize} text-gray-300`} />\n            <div className=\"absolute inset-0 overflow-hidden w-1/2\">\n              <Star className={`${starSize} fill-yellow-500 text-yellow-500`} />\n            </div>\n          </div>\n        )}\n        \n        {/* Empty stars */}\n        {Array.from({ length: emptyStars }).map((_, i) => (\n          <Star \n            key={`empty-${i}`} \n            className={`${starSize} text-gray-300 flex-shrink-0`}\n          />\n        ))}\n      </div>\n      \n      {/* Rating number and review count in same flex container */}\n      <div className=\"flex items-center gap-1 ml-1.5 min-w-0\">\n        {showNumber && (\n          <span className={`font-medium text-gray-700 ${ratingTextSize} flex-shrink-0`}>\n            {rating.toFixed(1)}\n          </span>\n        )}\n        \n        {/* Review count with smaller font and truncation */}\n        {reviewCount !== undefined && reviewCount > 0 && (\n          <span \n            className={`${reviewTextSize} text-gray-400 whitespace-nowrap overflow-hidden text-ellipsis`}\n            style={{ maxWidth: '80px' }}\n          >\n            ({formatReviewCount(reviewCount)})\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":2934},"server/services/intelligentItineraryBuilder.ts":{"content":"import OpenAI from 'openai';\nimport type { POIWithReason } from './enhancedPackageGenerator';\n\nconst openai = new OpenAI({\n  apiKey: process.env.VITE_OPENAI_API_KEY || ''\n});\n\n// Duration estimates based on POI type (in hours)\nconst DURATION_ESTIMATES: Record<string, number> = {\n  // Full day activities (6-8 hours)\n  'amusement_park': 8,\n  'theme_park': 8,\n  'water_park': 6,\n  'zoo': 5,\n  'safari_park': 5,\n  'national_park': 6,\n  \n  // Long activities (3-5 hours)\n  'aquarium': 3,\n  'museum': 3,\n  'science_museum': 3.5,\n  'history_museum': 3,\n  'natural_history_museum': 3.5,\n  'art_gallery': 2.5,\n  'castle': 3,\n  'palace': 3.5,\n  'fortress': 2.5,\n  'historical_landmark': 2.5,\n  'unesco_world_heritage_site': 3,\n  'botanical_garden': 2.5,\n  'beach': 4,\n  'lake': 3,\n  'hiking_area': 4,\n  'mountain_peak': 5,\n  'ski_resort': 8,\n  'golf_course': 4,\n  \n  // Medium activities (1.5-3 hours)\n  'temple': 1.5,\n  'hindu_temple': 1.5,\n  'buddhist_temple': 2,\n  'shrine': 1,\n  'church': 1,\n  'cathedral': 1.5,\n  'mosque': 1,\n  'synagogue': 1,\n  'cemetery': 1.5,\n  'memorial': 1,\n  'shopping_mall': 3,\n  'department_store': 2,\n  'market': 2,\n  'local_market': 2,\n  'farmers_market': 1.5,\n  'flea_market': 2,\n  'night_market': 2.5,\n  'outlet_mall': 3,\n  'theater': 3,\n  'performing_arts_theater': 3,\n  'movie_theater': 2.5,\n  'opera_house': 3.5,\n  'concert_hall': 3,\n  'stadium': 3,\n  'sports_complex': 2.5,\n  'spa': 3,\n  'hot_spring': 2.5,\n  'casino': 3,\n  'vineyard': 2.5,\n  'winery': 2,\n  'brewery': 1.5,\n  'distillery': 1.5,\n  \n  // Food & Dining (1-2 hours)\n  'restaurant': 1.5,\n  'fine_dining_restaurant': 2,\n  'casual_restaurant': 1,\n  'fast_food_restaurant': 0.5,\n  'cafe': 1,\n  'coffee_shop': 0.75,\n  'bakery': 0.5,\n  'bar': 2,\n  'pub': 2,\n  'night_club': 3,\n  'food_court': 1,\n  'food_market': 1.5,\n  'street_food': 0.5,\n  'ice_cream_shop': 0.5,\n  'dessert_shop': 0.5,\n  \n  // Quick visits (0.5-1.5 hours)\n  'viewpoint': 0.5,\n  'scenic_spot': 0.75,\n  'observation_deck': 1,\n  'landmark': 1,\n  'monument': 0.75,\n  'statue': 0.5,\n  'fountain': 0.25,\n  'tower': 1.5,\n  'lighthouse': 1,\n  'bridge': 0.5,\n  'square': 0.5,\n  'plaza': 0.5,\n  'promenade': 1,\n  'pier': 1,\n  'harbor': 1,\n  'marina': 1,\n  \n  // Neighborhood/District (2-4 hours)\n  'neighborhood': 2,\n  'sublocality': 2,\n  'tourist_attraction': 2,\n  'point_of_interest': 1.5,\n  'locality': 3,\n  'town_square': 1,\n  \n  // Parks & Gardens (1-3 hours)\n  'park': 2,\n  'city_park': 1.5,\n  'national_garden': 2,\n  'garden': 1.5,\n  'japanese_garden': 1.5,\n  'arboretum': 2,\n  \n  // Activity-based\n  'gym': 1.5,\n  'fitness_center': 1.5,\n  'yoga_studio': 1.5,\n  'bowling_alley': 2,\n  'amusement_center': 2,\n  'arcade': 1.5,\n  'escape_room': 1.5,\n  'karaoke': 2,\n  \n  // Transportation hubs (usually pass-through)\n  'train_station': 0.5,\n  'subway_station': 0.25,\n  'bus_station': 0.25,\n  'airport': 0.5,\n  'ferry_terminal': 0.5,\n  \n  // Services (quick stops)\n  'bank': 0.5,\n  'atm': 0.1,\n  'post_office': 0.5,\n  'pharmacy': 0.25,\n  'hospital': 0.5,\n  'police': 0.25,\n  'library': 1.5,\n  'university': 2,\n  'school': 1,\n  \n  // Accommodation (not typically visited as attractions)\n  'lodging': 0.5,\n  'hotel': 0.5,\n  'hostel': 0.5,\n  'guest_house': 0.5,\n  \n  // Default\n  'default': 2\n};\n\nexport interface EnhancedPOI {\n  name: string;\n  placeId: string;\n  reason: string;\n  rating?: number;\n  reviewCount?: number;\n  category: string;\n  estimatedDuration: number; // in hours\n  types?: string[];\n  openingHours?: any;\n  geometry?: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n  };\n}\n\nexport interface DayPlan {\n  day: number;\n  title: string;\n  description: string;\n  morningPOIs: EnhancedPOI[];\n  afternoonPOIs: EnhancedPOI[];\n  eveningPOIs: EnhancedPOI[];\n  totalDuration: number;\n  feasibilityScore: number;\n}\n\n// Estimate visit duration based on POI type and name\nexport function estimatePOIDuration(poi: any): number {\n  const name = poi.name?.toLowerCase() || '';\n  \n  // Special case: Major theme parks and full-day attractions\n  const fullDayAttractions = [\n    'disneyland', 'disney', 'universal studios', 'six flags', \n    'legoland', 'seaworld', 'busch gardens', 'cedar point'\n  ];\n  if (fullDayAttractions.some(attraction => name.includes(attraction))) {\n    return 8;\n  }\n  \n  // Major zoos and safari parks\n  if ((name.includes('zoo') && (name.includes('national') || name.includes('san diego') || name.includes('bronx'))) ||\n      name.includes('safari') || name.includes('animal kingdom')) {\n    return 5;\n  }\n  \n  // Major aquariums\n  if (name.includes('aquarium') && \n      (name.includes('georgia') || name.includes('monterey') || name.includes('shedd') || name.includes('national'))) {\n    return 3.5;\n  }\n  \n  // Famous towers with likely queue times\n  const famousTowers = ['eiffel', 'tokyo tower', 'skytree', 'cn tower', 'empire state', \n                       'willis tower', 'space needle', 'burj khalifa', 'london eye'];\n  if (famousTowers.some(tower => name.includes(tower))) {\n    return 2; // Include queue time\n  }\n  \n  // Major museums requiring more time\n  const majorMuseums = ['louvre', 'metropolitan', 'british museum', 'vatican', 'uffizi', \n                       'prado', 'hermitage', 'smithsonian', 'natural history', 'moma'];\n  if (majorMuseums.some(museum => name.includes(museum))) {\n    return 4;\n  }\n  \n  // Large palaces and castle complexes\n  const largePalaces = ['versailles', 'forbidden city', 'buckingham', 'schönbrunn', \n                       'windsor castle', 'neuschwanstein', 'alhambra'];\n  if (largePalaces.some(palace => name.includes(palace))) {\n    return 4;\n  }\n  \n  // Check POI types from Google Places - look for most specific type first\n  if (poi.types && Array.isArray(poi.types)) {\n    // Sort types by specificity (longer type names are usually more specific)\n    const sortedTypes = [...poi.types].sort((a, b) => b.length - a.length);\n    \n    for (const type of sortedTypes) {\n      if (DURATION_ESTIMATES[type]) {\n        // Adjust duration based on additional context\n        let duration = DURATION_ESTIMATES[type];\n        \n        // Restaurants: Fine dining takes longer\n        if (type.includes('restaurant')) {\n          if (name.includes('michelin') || name.includes('fine dining') || \n              name.includes('tasting menu') || name.includes('omakase')) {\n            duration = 2.5;\n          } else if (name.includes('buffet')) {\n            duration = 1.5;\n          } else if (name.includes('fast') || name.includes('quick')) {\n            duration = 0.75;\n          }\n        }\n        \n        // Shopping: Outlets and large malls take longer\n        if (type.includes('shopping') || type === 'store') {\n          if (name.includes('outlet') || name.includes('premium')) {\n            duration = 3.5;\n          } else if (name.includes('department store') || name.includes('mall')) {\n            duration = 3;\n          } else if (name.includes('boutique') || name.includes('gift shop')) {\n            duration = 0.75;\n          }\n        }\n        \n        // Parks: National parks and large parks take longer\n        if (type === 'park') {\n          if (name.includes('national') || name.includes('central park') || \n              name.includes('golden gate') || name.includes('hyde park')) {\n            duration = 3;\n          }\n        }\n        \n        // Beaches: Famous beaches might need more time\n        if (type === 'beach') {\n          if (name.includes('beach park') || name.includes('beach resort')) {\n            duration = 5;\n          }\n        }\n        \n        return duration;\n      }\n    }\n  }\n  \n  // Category-based fallback with refined durations\n  const category = poi.category?.toLowerCase();\n  if (category) {\n    switch (category) {\n      case 'restaurant':\n      case 'food':\n      case 'dining':\n        // Check for specific dining types\n        if (name.includes('fine dining') || name.includes('michelin')) return 2.5;\n        if (name.includes('buffet')) return 1.5;\n        if (name.includes('cafe') || name.includes('coffee')) return 1;\n        if (name.includes('fast food') || name.includes('quick')) return 0.75;\n        return 1.5;\n      \n      case 'museum':\n      case 'culture':\n      case 'cultural':\n        if (name.includes('national') || name.includes('art')) return 3;\n        return 2.5;\n      \n      case 'shopping':\n      case 'market':\n        if (name.includes('mall') || name.includes('outlet')) return 3;\n        if (name.includes('market')) return 2;\n        return 1.5;\n      \n      case 'nature':\n      case 'outdoor':\n      case 'park':\n        if (name.includes('national')) return 4;\n        if (name.includes('hike') || name.includes('trail')) return 3;\n        return 2;\n      \n      case 'entertainment':\n      case 'nightlife':\n        if (name.includes('show') || name.includes('concert')) return 3;\n        if (name.includes('club') || name.includes('bar')) return 2.5;\n        return 2;\n      \n      case 'attraction':\n      case 'landmark':\n        if (name.includes('tower') || name.includes('observation')) return 1.5;\n        return 2;\n      \n      case 'beach':\n      case 'water':\n        return 3;\n      \n      case 'spa':\n      case 'wellness':\n        return 2.5;\n      \n      default:\n        return 2;\n    }\n  }\n  \n  return DURATION_ESTIMATES.default;\n}\n\n// Use LLM to get intelligent duration estimate for complex POIs\nasync function getIntelligentDurationEstimate(poi: any): Promise<number> {\n  try {\n    if (!process.env.VITE_OPENAI_API_KEY) {\n      return estimatePOIDuration(poi); // Fallback to rule-based estimation\n    }\n\n    const prompt = `Estimate the typical visit duration for this place of interest:\n\nName: ${poi.name}\nTypes: ${(poi.types || []).join(', ')}\nCategory: ${poi.category || 'Unknown'}\nDescription: ${poi.description || 'N/A'}\nLocation: ${poi.address || 'Unknown'}\n\nConsider:\n1. Type of attraction (museum, restaurant, park, etc.)\n2. Typical visitor behavior and queue times\n3. Size and scope of the attraction\n4. Whether it's a quick photo stop or immersive experience\n\nProvide a realistic duration in hours (as a decimal number).\nFor example: 0.5 for 30 minutes, 1.5 for 90 minutes, 3 for 3 hours.\n\nReturn ONLY a number, nothing else.`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'system',\n          content: 'You are a travel expert who estimates realistic visit durations for tourist attractions.'\n        },\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      temperature: 0.3,\n      max_tokens: 10\n    });\n\n    const duration = parseFloat(response.choices[0].message.content?.trim() || '2');\n    \n    // Validate the response\n    if (isNaN(duration) || duration < 0.25 || duration > 12) {\n      return estimatePOIDuration(poi); // Fallback if invalid\n    }\n    \n    return duration;\n  } catch (error) {\n    console.error('Error getting intelligent duration estimate:', error);\n    return estimatePOIDuration(poi); // Fallback on error\n  }\n}\n\n// Calculate travel time between POIs (simplified - assumes 30 min average)\nfunction estimateTravelTime(poi1: EnhancedPOI, poi2: EnhancedPOI): number {\n  // If we have coordinates, we could calculate actual distance\n  // For now, use a simplified estimate\n  if (poi1.geometry && poi2.geometry) {\n    const lat1 = poi1.geometry.location.lat;\n    const lng1 = poi1.geometry.location.lng;\n    const lat2 = poi2.geometry.location.lat;\n    const lng2 = poi2.geometry.location.lng;\n    \n    // Haversine distance formula (simplified)\n    const distance = Math.sqrt(Math.pow(lat2 - lat1, 2) + Math.pow(lng2 - lng1, 2));\n    \n    // Rough estimate: 0.01 degrees ≈ 1km ≈ 20 min travel time in city\n    return Math.min(1, distance * 20);\n  }\n  \n  // Default travel time between attractions\n  return 0.5; // 30 minutes\n}\n\n// Use LLM to create intelligent itinerary\nexport async function createIntelligentItinerary(\n  pois: EnhancedPOI[],\n  days: number,\n  destination: string,\n  preferences: string[]\n): Promise<DayPlan[]> {\n  // Prepare POI data for LLM\n  const poisData = pois.map(poi => ({\n    name: poi.name,\n    category: poi.category,\n    duration: poi.estimatedDuration,\n    reason: poi.reason,\n    placeId: poi.placeId\n  }));\n  \n  const prompt = `You are a travel planning expert. Create a realistic ${days}-day itinerary for ${destination}.\n\nUser preferences: ${preferences.join(', ')}\n\nAvailable POIs with estimated visit durations:\n${JSON.stringify(poisData, null, 2)}\n\nIMPORTANT RULES:\n1. Maximum 8 hours of activities per day (excluding meals)\n2. Group nearby attractions together to minimize travel time\n3. NEVER put theme parks (Disneyland, Universal Studios) with other major attractions on the same day\n4. Balance each day with a mix of activities (culture, food, shopping, etc.)\n5. Consider that restaurants/cafes are for meals, not counted in the 8-hour activity limit\n6. Morning: 9am-12pm (3 hours), Afternoon: 12pm-5pm (5 hours), Evening: 5pm-9pm (4 hours)\n7. Leave buffer time for travel between locations (assume 30 min between POIs)\n8. Distribute the user's preferred tags/interests across ALL days, not just Day 1\n\nReturn a JSON array of day plans with this structure:\n[\n  {\n    \"day\": 1,\n    \"title\": \"Day 1: [Theme of the day]\",\n    \"description\": \"Brief description of the day's focus\",\n    \"morningPOIs\": [\"placeId1\", \"placeId2\"],\n    \"afternoonPOIs\": [\"placeId3\", \"placeId4\"],\n    \"eveningPOIs\": [\"placeId5\"],\n    \"totalDuration\": 7.5,\n    \"feasibilityScore\": 0.9\n  }\n]\n\nEnsure each POI appears only once across all days. The feasibilityScore (0-1) indicates how realistic the day plan is.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: [\n        {\n          role: 'system',\n          content: 'You are a travel itinerary expert who creates realistic, executable travel plans.'\n        },\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      temperature: 0.7,\n      response_format: { type: 'json_object' }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{\"days\":[]}');\n    const dayPlans = result.days || result;\n    \n    // Map the LLM response back to our DayPlan structure\n    return dayPlans.map((plan: any) => {\n      const morningPOIs = (plan.morningPOIs || [])\n        .map((placeId: string) => pois.find(p => p.placeId === placeId))\n        .filter(Boolean);\n      \n      const afternoonPOIs = (plan.afternoonPOIs || [])\n        .map((placeId: string) => pois.find(p => p.placeId === placeId))\n        .filter(Boolean);\n      \n      const eveningPOIs = (plan.eveningPOIs || [])\n        .map((placeId: string) => pois.find(p => p.placeId === placeId))\n        .filter(Boolean);\n      \n      return {\n        day: plan.day,\n        title: plan.title || `Day ${plan.day}: Exploring ${destination}`,\n        description: plan.description || 'A day of discovery and adventure',\n        morningPOIs,\n        afternoonPOIs,\n        eveningPOIs,\n        totalDuration: plan.totalDuration || \n          [...morningPOIs, ...afternoonPOIs, ...eveningPOIs]\n            .reduce((sum, poi) => sum + poi.estimatedDuration, 0),\n        feasibilityScore: plan.feasibilityScore || 0.8\n      };\n    });\n  } catch (error) {\n    console.error('Error creating intelligent itinerary:', error);\n    // Fallback to simple distribution\n    return createFallbackItinerary(pois, days, destination);\n  }\n}\n\n// Fallback itinerary creation if LLM fails\nfunction createFallbackItinerary(\n  pois: EnhancedPOI[],\n  days: number,\n  destination: string\n): DayPlan[] {\n  const dayPlans: DayPlan[] = [];\n  const usedPOIs = new Set<string>();\n  \n  // Separate POIs by duration\n  const fullDayPOIs = pois.filter(p => p.estimatedDuration >= 6);\n  const halfDayPOIs = pois.filter(p => p.estimatedDuration >= 3 && p.estimatedDuration < 6);\n  const quickPOIs = pois.filter(p => p.estimatedDuration < 3);\n  \n  for (let day = 1; day <= days; day++) {\n    const morningPOIs: EnhancedPOI[] = [];\n    const afternoonPOIs: EnhancedPOI[] = [];\n    const eveningPOIs: EnhancedPOI[] = [];\n    let totalDuration = 0;\n    \n    // Check if we have a full-day activity\n    const fullDayActivity = fullDayPOIs.find(p => !usedPOIs.has(p.placeId));\n    if (fullDayActivity) {\n      afternoonPOIs.push(fullDayActivity);\n      usedPOIs.add(fullDayActivity.placeId);\n      totalDuration = fullDayActivity.estimatedDuration;\n    } else {\n      // Build a balanced day\n      const maxDuration = 8;\n      \n      // Morning (up to 3 hours)\n      for (const poi of [...halfDayPOIs, ...quickPOIs]) {\n        if (usedPOIs.has(poi.placeId)) continue;\n        if (totalDuration + poi.estimatedDuration > maxDuration) continue;\n        if (morningPOIs.reduce((sum, p) => sum + p.estimatedDuration, 0) + poi.estimatedDuration > 3) continue;\n        \n        morningPOIs.push(poi);\n        usedPOIs.add(poi.placeId);\n        totalDuration += poi.estimatedDuration;\n        \n        if (morningPOIs.length >= 2) break;\n      }\n      \n      // Afternoon (up to 4 hours)\n      for (const poi of [...halfDayPOIs, ...quickPOIs]) {\n        if (usedPOIs.has(poi.placeId)) continue;\n        if (totalDuration + poi.estimatedDuration > maxDuration) continue;\n        if (afternoonPOIs.reduce((sum, p) => sum + p.estimatedDuration, 0) + poi.estimatedDuration > 4) continue;\n        \n        afternoonPOIs.push(poi);\n        usedPOIs.add(poi.placeId);\n        totalDuration += poi.estimatedDuration;\n        \n        if (afternoonPOIs.length >= 2) break;\n      }\n      \n      // Evening (up to 2 hours, usually dining or light activities)\n      for (const poi of quickPOIs.filter(p => p.category === 'food' || p.category === 'nightlife')) {\n        if (usedPOIs.has(poi.placeId)) continue;\n        if (totalDuration + poi.estimatedDuration > maxDuration + 1) continue; // Allow slight overflow for dinner\n        \n        eveningPOIs.push(poi);\n        usedPOIs.add(poi.placeId);\n        totalDuration += poi.estimatedDuration;\n        \n        if (eveningPOIs.length >= 1) break;\n      }\n    }\n    \n    dayPlans.push({\n      day,\n      title: `Day ${day}: ${destination} Discovery`,\n      description: fullDayActivity \n        ? `Full day at ${fullDayActivity.name}`\n        : `Exploring the best of ${destination}`,\n      morningPOIs,\n      afternoonPOIs,\n      eveningPOIs,\n      totalDuration,\n      feasibilityScore: totalDuration <= 8 ? 0.9 : 0.7\n    });\n  }\n  \n  return dayPlans;\n}\n\n// Convert DayPlan to the format expected by the existing system\nexport function convertToItineraryFormat(dayPlan: DayPlan, destination: string): any {\n  const allPOIs = [\n    ...dayPlan.morningPOIs.map(p => ({ ...p, timeLabel: 'Morning', time: 'morning' })),\n    ...dayPlan.afternoonPOIs.map(p => ({ ...p, timeLabel: 'Afternoon', time: 'afternoon' })),\n    ...dayPlan.eveningPOIs.map(p => ({ ...p, timeLabel: 'Evening', time: 'evening' }))\n  ];\n  \n  return {\n    day: dayPlan.day,\n    location: destination,\n    title: dayPlan.title,\n    description: dayPlan.description,\n    pois: allPOIs.map((poi: any) => ({\n      id: `poi-${dayPlan.day}-${poi.placeId}`,\n      name: poi.name,\n      placeId: poi.placeId,\n      category: poi.category,\n      types: poi.types,\n      rating: poi.rating,\n      reviewCount: poi.reviewCount,\n      reason: poi.reason,\n      description: poi.description,\n      address: poi.address,\n      duration: poi.estimatedDuration >= 1 \n        ? `${Math.round(poi.estimatedDuration)} hour${Math.round(poi.estimatedDuration) !== 1 ? 's' : ''}`\n        : `${Math.round(poi.estimatedDuration * 60)} mins`,\n      durationHours: poi.estimatedDuration,\n      time: poi.time,\n      timeLabel: poi.timeLabel\n    })),\n    activities: allPOIs.map((poi: any) => `${poi.name} - ${poi.reason}`)\n  };\n}","size_bytes":19818},"client/src/config/poiTypeConfig.ts":{"content":"export type POIVariant = \n  | 'restaurant'\n  | 'cafe'\n  | 'bar'\n  | 'museum'\n  | 'nature'\n  | 'shopping'\n  | 'landmark'\n  | 'theme-park'\n  | 'religious'\n  | 'beach'\n  | 'attraction';\n\nexport const POI_COLORS: Record<POIVariant, { bg: string; hover: string; pressed: string; text: string }> = {\n  restaurant: {\n    bg: '#D5589B',  // Adjusted for better contrast (4.5:1)\n    hover: '#C14A8A',\n    pressed: '#AD3C79',\n    text: 'white'\n  },\n  cafe: {\n    bg: '#E09355',  // Adjusted for better contrast\n    hover: '#CC844C',\n    pressed: '#B87543',\n    text: 'white'\n  },\n  bar: {\n    bg: '#D69E00',  // Adjusted for darker yellow\n    hover: '#C28F00',\n    pressed: '#AE8000',\n    text: 'white'\n  },\n  museum: {\n    bg: '#4C6FFF',\n    hover: '#3A5FEB',\n    pressed: '#2950D7',\n    text: 'white'\n  },\n  nature: {\n    bg: '#2A9E5F',  // Slightly darker for better contrast\n    hover: '#268F56',\n    pressed: '#22804D',\n    text: 'white'\n  },\n  shopping: {\n    bg: '#1F9999',  // Darker teal for better contrast\n    hover: '#1C8A8A',\n    pressed: '#197B7B',\n    text: 'white'\n  },\n  landmark: {\n    bg: '#7C5CFC',\n    hover: '#6D4EE8',\n    pressed: '#5F41D4',\n    text: 'white'\n  },\n  'theme-park': {\n    bg: '#E86A4C',  // Adjusted coral for better contrast\n    hover: '#D45C41',\n    pressed: '#C04E36',\n    text: 'white'\n  },\n  religious: {\n    bg: '#B8447C',  // Adjusted magenta for better contrast\n    hover: '#A43C6F',\n    pressed: '#903462',\n    text: 'white'\n  },\n  beach: {\n    bg: '#0391D8',  // Slightly darker blue for better contrast\n    hover: '#0383C4',\n    pressed: '#0375B0',\n    text: 'white'\n  },\n  attraction: {\n    bg: '#6E44FF',\n    hover: '#5F3AEB',\n    pressed: '#5131D7',\n    text: 'white'\n  }\n};\n\nexport function mapGooglePlaceTypeToPOIVariant(types: string[] | undefined): POIVariant {\n  if (!types || types.length === 0) {\n    return 'attraction';\n  }\n\n  // Restaurant / Food\n  if (types.some(t => \n    t.includes('restaurant') || \n    t === 'food' ||\n    t === 'meal_delivery' ||\n    t === 'meal_takeaway'\n  )) {\n    return 'restaurant';\n  }\n\n  // Cafe / Bakery\n  if (types.some(t => \n    t === 'cafe' || \n    t === 'bakery' ||\n    t === 'coffee_shop'\n  )) {\n    return 'cafe';\n  }\n\n  // Bar / Nightlife\n  if (types.some(t => \n    t === 'bar' || \n    t === 'night_club' ||\n    t === 'nightlife' ||\n    t === 'pub' ||\n    t === 'brewery' ||\n    t === 'winery'\n  )) {\n    return 'bar';\n  }\n\n  // Museum / History\n  if (types.some(t => \n    t.includes('museum') ||\n    t === 'art_gallery' ||\n    t === 'library'\n  )) {\n    return 'museum';\n  }\n\n  // Park / Nature / Garden\n  if (types.some(t => \n    t === 'park' || \n    t === 'zoo' ||\n    t === 'aquarium' ||\n    t === 'botanical_garden' ||\n    t === 'campground' ||\n    t === 'national_park' ||\n    t === 'nature_reserve' ||\n    t === 'wildlife_park'\n  )) {\n    return 'nature';\n  }\n\n  // Shopping / Market\n  if (types.some(t => \n    t === 'shopping_mall' || \n    t === 'store' ||\n    t === 'market' ||\n    t === 'supermarket' ||\n    t === 'department_store' ||\n    t === 'clothing_store' ||\n    t === 'book_store' ||\n    t === 'electronics_store' ||\n    t === 'furniture_store' ||\n    t === 'home_goods_store' ||\n    t === 'jewelry_store' ||\n    t === 'shoe_store'\n  )) {\n    return 'shopping';\n  }\n\n  // Landmark / Observation Deck / Tower\n  if (types.some(t => \n    t === 'tourist_attraction' ||\n    t === 'point_of_interest' ||\n    t === 'landmark' ||\n    t === 'observation_deck' ||\n    t === 'viewpoint' ||\n    t === 'monument' ||\n    t === 'historical_landmark' ||\n    t === 'city_hall' ||\n    t === 'town_square'\n  )) {\n    return 'landmark';\n  }\n\n  // Theme Park / Amusement\n  if (types.some(t => \n    t === 'amusement_park' ||\n    t === 'theme_park' ||\n    t === 'water_park' ||\n    t === 'entertainment'\n  )) {\n    return 'theme-park';\n  }\n\n  // Temple / Shrine / Religious Site\n  if (types.some(t => \n    t === 'hindu_temple' ||\n    t === 'buddhist_temple' ||\n    t === 'church' ||\n    t === 'mosque' ||\n    t === 'synagogue' ||\n    t === 'shrine' ||\n    t === 'place_of_worship' ||\n    t === 'cemetery'\n  )) {\n    return 'religious';\n  }\n\n  // Beach / Lake / Waterfront\n  if (types.some(t => \n    t === 'beach' ||\n    t === 'natural_feature' ||\n    t === 'lake' ||\n    t === 'river' ||\n    t === 'waterfall' ||\n    t === 'marina'\n  )) {\n    return 'beach';\n  }\n\n  // Default fallback\n  return 'attraction';\n}\n\nexport function getPOIColorClass(variant: POIVariant): string {\n  const color = POI_COLORS[variant];\n  return `text-white font-medium`;\n}\n\nexport function getPOIColorStyle(variant: POIVariant, state: 'default' | 'hover' | 'pressed' = 'default'): React.CSSProperties {\n  const color = POI_COLORS[variant];\n  let backgroundColor = color.bg;\n  \n  if (state === 'hover') {\n    backgroundColor = color.hover;\n  } else if (state === 'pressed') {\n    backgroundColor = color.pressed;\n  }\n\n  return {\n    backgroundColor,\n    color: color.text,\n    border: 'none'\n  };\n}","size_bytes":4958},"client/src/utils/colorContrastChecker.ts":{"content":"// Helper functions to check WCAG color contrast ratios\n// This is a utility to verify our POI colors meet accessibility standards\n\nfunction getLuminance(hexColor: string): number {\n  const rgb = hexToRgb(hexColor);\n  const [r, g, b] = rgb.map(val => {\n    val = val / 255;\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  });\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\nfunction hexToRgb(hex: string): [number, number, number] {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [\n    parseInt(result[1], 16),\n    parseInt(result[2], 16),\n    parseInt(result[3], 16)\n  ] : [0, 0, 0];\n}\n\nfunction getContrastRatio(color1: string, color2: string): number {\n  const lum1 = getLuminance(color1);\n  const lum2 = getLuminance(color2);\n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n  return (brightest + 0.05) / (darkest + 0.05);\n}\n\nexport function checkColorContrast(backgroundColor: string, textColor: string = '#FFFFFF'): {\n  ratio: number;\n  passesAA: boolean;\n  passesAAA: boolean;\n} {\n  const ratio = getContrastRatio(backgroundColor, textColor);\n  return {\n    ratio: Math.round(ratio * 100) / 100,\n    passesAA: ratio >= 4.5,  // WCAG AA standard for normal text\n    passesAAA: ratio >= 7     // WCAG AAA standard for normal text\n  };\n}\n\n// Test all POI colors\nexport const POI_COLOR_CONTRAST_RESULTS = {\n  restaurant: checkColorContrast('#E86AA6'),     // Pink\n  cafe: checkColorContrast('#F4A261'),           // Orange\n  bar: checkColorContrast('#F7B801'),            // Yellow\n  museum: checkColorContrast('#4C6FFF'),         // Blue\n  nature: checkColorContrast('#2EAD68'),         // Green\n  shopping: checkColorContrast('#23B5B5'),       // Teal\n  landmark: checkColorContrast('#7C5CFC'),       // Purple\n  themePark: checkColorContrast('#FF7A59'),      // Coral\n  religious: checkColorContrast('#C84E89'),      // Magenta\n  beach: checkColorContrast('#03A9F4'),          // Light Blue\n  attraction: checkColorContrast('#6E44FF')      // Brand Purple\n};\n\n// Log results for verification\nconsole.log('POI Color Contrast Check Results:');\nObject.entries(POI_COLOR_CONTRAST_RESULTS).forEach(([name, result]) => {\n  console.log(`${name}: ${result.ratio}:1 - ${result.passesAA ? '✓ Passes' : '✗ Fails'} WCAG AA`);\n});","size_bytes":2339}}}